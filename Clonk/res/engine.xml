<script>
	<functions>
		<function name="Abs" return="int">
			<parameters>
				<parameter name="iValue" type="int" />
			</parameters>
			<description>Bildet den Absolutwert (Betrag), entfernt also das Vorzeichen des ersten Parameters.</description>
		</function>
		<function name="Angle" return="int">
			<parameters>
				<parameter name="iX1" type="int" />
				<parameter name="iY1" type="int" />
				<parameter name="iX2" type="int" />
				<parameter name="iY2" type="int" />
				<parameter name="iPrec" type="int" />
			</parameters>
			<description>Liefert den Winkel, in dem sich der zweite Punkt vom ersten Punkt aus gesehen befindet. Der Winkel wird in Grad zurückgeliefert, 0° ist senkrecht oben. Alle Koordinaten sind global.</description>
		</function>
		<function name="ArcCos" return="int">
			<parameters>
				<parameter name="iVal" type="int" />
				<parameter name="iRadius" type="int" />
			</parameters>
			<description>Berechnet den Arcuscosinus von iVal/iRadius, also Result=arccos(iVal/iRadius). Dies entspricht cos(Result)=iVal/iRadius. Die Funktion wird benötigt, um Seitenverhältnisse zu einem Winkel umzurechnen. Für die meisten Fälle ist <a href="../../../sdk/script/fn/Angle.html">Angle</a>() aber ausreichend und praktischer.</description>
		</function>
		<function name="ArcSin" return="int">
			<parameters>
				<parameter name="iVal" type="int" />
				<parameter name="iRadius" type="int" />
			</parameters>
			<description>Berechnet den Arcussinus von iVal/iRadius, also Result=arcsin(iVal/iRadius). Dies entspricht Sin(Result)=iVal/iRadius. Die Funktion wird benötigt, um Seitenverhältnisse zu einem Winkel umzurechnen. Für die meisten Fälle ist <a href="../../../sdk/script/fn/Angle.html">Angle</a>() aber ausreichend und praktischer.</description>
		</function>
		<function name="BitAnd" return="int">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
			</parameters>
			<description>Gibt (iVal1 &amp; iVal2) zurück (Bitweises And). Sollte in neuen Scripts durch den Operator "&amp;" ersetzt werden.</description>
		</function>
		<function name="BoundBy" return="int">
			<parameters>
				<parameter name="iVal" type="int" />
				<parameter name="iRange1" type="int" />
				<parameter name="iRange2" type="int" />
			</parameters>
			<description>Gibt iVal zurück, wenn der Wert innerhalb der Grenzen liegt (iVal &gt;= iRange1 und iVal &lt;= iRange2). Andernfalls wird die jeweils nächstliegende Grenze zurückgegeben.</description>
		</function>
		<function name="Cos" return="int">
			<parameters>
				<parameter name="iAngle" type="int" />
				<parameter name="iRadius" type="int" />
				<parameter name="iPrec" type="int" />
			</parameters>
			<description>Liefert cos(iAngle) * iRadius.</description>
		</function>
		<function name="Distance" return="int">
			<parameters>
				<parameter name="iX1" type="int" />
				<parameter name="iY1" type="int" />
				<parameter name="iX2" type="int" />
				<parameter name="iY2" type="int" />
			</parameters>
			<description>Berechnet den Abstand zwischen zwei Punkten. Die Funktion entspricht Sqrt((iX2-iX1)^2 + (iY2-iY1)^2;).</description>
		</function>
		<function name="Div" return="int">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
			</parameters>
			<description>Führt eine Division durch, wobei eine Division durch 0 einfach 0 zurückgibt. Statt dieser Funktion sollte der Operator "/" verwendet werden.</description>
		</function>
		<function name="Inside" return="bool">
			<parameters>
				<parameter name="iVal" type="int" />
				<parameter name="iRange1" type="int" />
				<parameter name="iRange2" type="int" />
			</parameters>
			<description>Gibt TRUE zurück, wenn iVal &gt;= iRange1 und iVal &lt;= iRange2 ist.</description>
		</function>
		<function name="Max" return="int">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
			</parameters>
			<description>Gibt den größeren der beiden Werte zurück</description>
		</function>
		<function name="Min" return="int">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
			</parameters>
			<description>Gibt den kleineren der beiden Werte zurück</description>
		</function>
		<function name="Mod" return="int">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
			</parameters>
			<description>Gibt den Divisionsrest von iVal1 / iVal2 zurück.</description>
		</function>
		<function name="Mul" return="int">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
			</parameters>
			<description>Multipliziert iVal1 mit iVal2 und gibt das Ergebnis zurück.</description>
		</function>
		<function name="Pow" return="int">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
			</parameters>
			<description>Errechnet die Potenz von iVal1 und iVal2 ("X hoch Y")</description>
		</function>
		<function name="Random" return="int">
			<parameters>
				<parameter name="iMaxVal" type="int" />
			</parameters>
			<description>Gibt eine Zufallszahl zwischen 0 und iMaxVal-1 zurück. Der zurückgegebene Wert kann jedoch nicht höher als 32767 sein.</description>
		</function>
		<function name="Sin" return="int">
			<parameters>
				<parameter name="iAngle" type="int" />
				<parameter name="iRadius" type="int" />
				<parameter name="iPrec" type="int" />
			</parameters>
			<description>Liefert sin(iAngle) * iRadius.</description>
		</function>
		<function name="Sqrt" return="int">
			<parameters>
				<parameter name="iValue" type="int" />
			</parameters>
			<description>Zieht die Wurzel aus dem ersten Parameter. Ist der Parameter kleiner als 0, wird einfach 0 zurückgegeben.</description>
		</function>
		<function name="Sub" return="int">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
				<parameter name="iVal3" type="int" />
				<parameter name="iVal4" type="int" />
			</parameters>
			<description>Subtrahiert die Summe von iVal2, 3 und 4 von iVal1 und gibt das Ergebnis zurück. Diese Funktion sollte in neuen Scripts durch den Operator "-" ersetzt werden.</description>
		</function>
		<function name="Sum" return="int">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
				<parameter name="iVal3" type="int" />
				<parameter name="iVal4" type="int" />
			</parameters>
			<description>Bildet die Summe von iVal1, iVal2, iVal3 und iVal4 und gibt das Ergebnis zurück. Diese Funktion sollte in neuen Scripts durch den Operator "+" ersetzt werden.</description>
		</function>
		<function name="AddEffect" return="int">
			<parameters>
				<parameter name="szEffectName" type="string" />
				<parameter name="pTarget" type="object" />
				<parameter name="iPrio" type="int" />
				<parameter name="iTimerIntervall" type="int" />
				<parameter name="pCmdTarget" type="object" />
				<parameter name=" idCmdTarget" type="id" />
				<parameter name="var1" type="any" />
				<parameter name="var2" type="any" />
				<parameter name="var3" type="any" />
				<parameter name="var4" type="any" />
			</parameters>
			<description>Erzeugt einen Effekt. Rückgabewert ist der Effektindex bei Erfolg, oder 0 bei Fehlschlag (weil der Effekt beispielsweise abgelehnt wurde). Wenn der Effekt von einem anderen Effekt aufgenommen wurde, der sich in demselben Aufruf entfernt, wird -2 zurückgegeben.</description>
		</function>
		<function name="ChangeEffect" return="bool">
			<parameters>
				<parameter name="szEffectName" type="string" />
				<parameter name="pTarget" type="object" />
				<parameter name="iIndex" type="int" />
				<parameter name="szNewEffectName" type="string" />
				<parameter name="iNewTimer" type="int" />
			</parameters>
			<description>Ändert den Namen eines Effektes, und damit auch die aufgerufenen Callback-Funktionen.</description>
		</function>
		<function name="CheckEffect" return="int">
			<parameters>
				<parameter name="szEffectName" type="string" />
				<parameter name="pTarget" type="object" />
				<parameter name="iPrio" type="int" />
				<parameter name="iTimerIntervall" type="int" />
				<parameter name="var1" type="any" />
				<parameter name="var2" type="any" />
				<parameter name="var3" type="any" />
				<parameter name="var4" type="any" />
			</parameters>
			<description>Führt Fx*Effect (und ggf. auch Fx*Add)-Callbacks in der entsprechenden Effektliste aus, ohne einen Effekt selber zu erstellen. Rückgabewert ist -1, wenn ein anderer Effekt den Effekt abgelehnt hat, und die Effektnummer des aufnehmenden Effektes, wenn der Effekt aufgenommen wurde.</description>
		</function>
		<function name="EffectCall" return="any">
			<parameters>
				<parameter name="pTarget" type="object" />
				<parameter name="iNumber" type="int" />
				<parameter name="szCommand" type="string" />
			</parameters>
			<description>Führt einen Funktionsaufruf im angegebenen Effekt durch. Der Aufruf erhält den Befehlskontext des Effektes, und die ersten beiden Aufrufparameter sind immer Zielobjekt und Effektindex. Die weiteren Parameter können frei gewählt werden.</description>
		</function>
		<function name="EffectVar" return="int">
			<parameters>
				<parameter name="iVarIndex" type="int" />
				<parameter name="pTarget" type="object" />
				<parameter name="iNumber" type="int" />
			</parameters>
			<description>Liefert eine Referenz auf eine effektlokale Variable. Diese kann zum Lesen und schreiben verwendet werden.</description>
		</function>
		<function name="GetEffect" return="any">
			<parameters>
				<parameter name="szEffectName" type="string" />
				<parameter name="pTarget" type="object" />
				<parameter name="iIndex" type="int" />
				<parameter name="iQueryVal" type="int" />
				<parameter name="iMaxPriority" type="int" />
			</parameters>
			<description>Fragt Effektdaten ab, oder ermittelt, ob ein bstimmter Effekt vorhanden ist. Der Rückgabetyp richtet sich nach dem abgefragten Wert. Wurde der Effekt nicht gefunden, wird immer 0 zurückgegeben.</description>
		</function>
		<function name="GetEffectCount" return="int">
			<parameters>
				<parameter name="szMask" type="string" />
				<parameter name="pTarget" type="object" />
				<parameter name="iMaxPriority" type="int" />
			</parameters>
			<description>Zählt die Effekte in einem Objekt oder globale Effekte.</description>
		</function>
		<function name="RemoveEffect" return="bool">
			<parameters>
				<parameter name="szEffectName" type="string" />
				<parameter name="pTarget" type="object" />
				<parameter name="iIndex" type="int" />
				<parameter name="fDoNoCalls" type="bool" />
				<parameter name="iNewTimer" type="int" />
			</parameters>
			<description>Löscht einen Effekt</description>
		</function>
		<function name="Sound" return="bool">
			<parameters>
				<parameter name="szSound" type="string" />
				<parameter name="fGlobal" type="bool" />
				<parameter name="pObj" type="object" />
				<parameter name="iVolume" type="int" />
				<parameter name="iPlayer" type="int" />
				<parameter name="iLoopCount" type="int" />
			</parameters>
			<description>Spielt einen Sound ab. Die entsprechende Sounddatei muss in der Gruppendatei Sound.c4g, in der aktiven Szenariodatei oder in einer geladenen Objektdefinition vorhanden sein. Bei lokalen Aufrufen werden Geräusche abhängig von der aktuellen Position des aufrufenden Objekts abgespielt.</description>
		</function>
		<function name="SoundLevel" return="bool">
			<parameters>
				<parameter name="szSound" type="string" />
				<parameter name="iVolume" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Spielt einen Soundeffekt permanent in einer Schleife ab, bis er wieder gestopp wird. Die Position ist global, solange pObj nicht angegeben ist; der Sound wird also überall auf der Karte gleichmäßig gehört.</description>
		</function>
		<function name="EditCursor" return="object">
			<parameters>
			</parameters>
			<description>Liefert im Entwicklermodus der Engine das Objekt, welches sich im gerade unter dem Mauscursor befindet (Modus: Objekte auswählen und verschieben).</description>
		</function>
		<function name="ReloadDef" return="bool">
			<parameters>
				<parameter name="idDef" type="id" />
			</parameters>
			<description>Aktualisiert eine Definition. Dieser Befehl kann im Entwicklermodus in der Konsole eingegeben werden, nachdem die Definition auf der Festplatte verändert wurde. Sie muss zuvor geladen gewesen sein.</description>
		</function>
		<function name="ReloadParticle" return="bool">
			<parameters>
				<parameter name="szParticle" type="string" />
			</parameters>
			<description>Aktualisiert eine Partikeldefinition. Dieser Befehl kann im Entwicklermodus in der Konsole eingegeben werden, nachdem die Definition auf der Festplatte verändert wurde. Sie muss zuvor geladen gewesen sein.</description>
		</function>
		<function name="StartScriptProfiler" return="bool">
			<parameters>
				<parameter name="idDefScript" type="id" />
			</parameters>
			<description>Startet den Scriptprofiler.</description>
		</function>
		<function name="StopScriptProfiler" return="bool">
			<parameters>
			</parameters>
			<description>Stoppt den Scriptprofiler, und gibt das Ergebnis im Log aus.</description>
		</function>
		<function name="GetActMapVal" return="any">
			<parameters>
				<parameter name="strEntry" type="string" />
				<parameter name="strAction" type="string" />
				<parameter name="idDef" type="id" />
				<parameter name="iEntryNr" type="int" />
			</parameters>
			<description>Fragt Aktionsdaten aus der <a href="../../../sdk/definition/actmap.html">ActMap.txt</a> anhand deren dortigem Namen ab.</description>
		</function>
		<function name="GetDefCoreVal" return="any">
			<parameters>
				<parameter name="strEntry" type="string" />
				<parameter name="strSection" type="string" />
				<parameter name="idDef" type="id" />
				<parameter name="iEntryNr" type="int" />
			</parameters>
			<description>Gibt einen Eigenschaftswert einer Objektdefinition nach seinem Namen in der <a href="../../../sdk/definition/defcore.html">DefCore.txt</a>
          zurück.</description>
		</function>
		<function name="GetMaterialVal" return="any">
			<parameters>
				<parameter name="strEntry" type="string" />
				<parameter name="strSection" type="string" />
				<parameter name="iMaterial" type="int" />
				<parameter name="iEntryNr" type="int" />
			</parameters>
			<description>Gibt einen Eigenschaftswert einer Materialdefinition nach seinem Namen in der <a href="../../../sdk/material/c4m.html">Materialdatei</a>
          zurück.</description>
		</function>
		<function name="GetObjectInfoCoreVal" return="any">
			<parameters>
				<parameter name="strEntry" type="string" />
				<parameter name="strSection" type="string" />
				<parameter name="pObj" type="object" />
				<parameter name="iEntryNr" type="int" />
			</parameters>
			<description>Bei dem InfoCore handelt es sich um die Informationen eines CrewMembers, die in dem Spieler gespeichert
          werden (*.c4i). Dementsprechend gibt GetObjectInfoCoreVal einen Eigenschaftswert eines Crewmembers
          nach Namen in einer c4i-Datei zurück</description>
		</function>
		<function name="GetObjectVal" return="any">
			<parameters>
				<parameter name="strEntry" type="string" />
				<parameter name="strSection" type="string" />
				<parameter name="pObj" type="object" />
				<parameter name="iEntryNr" type="int" />
			</parameters>
			<description>Gibt einen Eigenschaftswert eines Objekts nach seinem Namen in der Objects.txt zurück.</description>
		</function>
		<function name="GetPlayerInfoCoreVal" return="any">
			<parameters>
				<parameter name="strEntry" type="string" />
				<parameter name="strSection" type="string" />
				<parameter name="iPlayer" type="id" />
				<parameter name="iEntryNr" type="int" />
			</parameters>
			<description>Gibt einen Eigenschaftswert aus der Player.txt eines Spielers zurück.</description>
		</function>
		<function name="GetPlayerVal" return="any">
			<parameters>
				<parameter name="strEntry" type="string" />
				<parameter name="strSection" type="string" />
				<parameter name="iPlayer" type="int" />
				<parameter name="iEntryNr" type="int" />
			</parameters>
			<description>Fragt Eigenschaftswerte eines Spielers anhand dessen Namen ab, wie sie beim Speichern eines Spiels in die game.txt geschrieben werden</description>
		</function>
		<function name="GetScenarioVal" return="any">
			<parameters>
				<parameter name="strEntry" type="string" />
				<parameter name="strSection" type="string" />
				<parameter name="iEntryNr" type="int" />
			</parameters>
			<description>Fragt Eigenschaftswerte des Szenarios anhand dessen Namen/Sekion in der <a href="../../../sdk/scenario/scenario.html">Scenario.txt</a> ab</description>
		</function>
		<function name="FrameCounter" return="int">
			<parameters>
			</parameters>
			<description>Gibt die Nummer des Frames zurück, in dem sich das Spiel befindet. Dieser Zähler beginnt beim Szenarienstart mit 0, und zählt dann mit ca. 37 Frames pro Sekunde hoch (abhängig von der Spielgeschwindigkeit)</description>
		</function>
		<function name="GameOver" return="bool">
			<parameters>
			</parameters>
			<description>Beendet die Runde. Die Runde wird für alle überlebenden Spieler als gewonnen gewertet.</description>
		</function>
		<function name="GetGravity" return="int">
			<parameters>
			</parameters>
			<description>Liest die Schwerkraft (in Prozent) aus.</description>
		</function>
		<function name="IsNetwork" return="bool">
			<parameters>
			</parameters>
			<description>Prüft, ob das aktuelle Spiel ein Netzwerkspiel ist.</description>
		</function>
		<function name="IsNewgfx" return="bool">
			<parameters>
			</parameters>
			<description>Gibt zurück, ob das 32 Bit/16 Bit-Grafiksystem aktiviert ist. Bei Rückgabewert FALSE befindet sich die Engine im 8 Bit-Modus. Diese Funktion ist veraltet. Ab 4.9.5.0 CE läuft die Engine ausschließlich im 32 Bit/16 Bit-Modus.</description>
		</function>
		<function name="ResetGamma" return="bool">
			<parameters>
				<parameter name="iRampIndex" type="int" />
			</parameters>
			<description>Setzt eine Gammarampe auf den Normalwert zurück. Dies entspricht <a href="../../../sdk/script/fn/SetGamma.html">SetGamma</a>(<a href="../../../sdk/script/fn/RGB.html">RGB</a>(0,0,0), <a href="../../../sdk/script/fn/RGB.html">RGB</a>(128,128,128), <a href="../../../sdk/script/fn/RGB.html">RGB</a>(255,255,255), iRampIndex);. Für weitere Informationen siehe <a href="../../../sdk/script/fn/SetGamma.html">SetGamma</a>.</description>
		</function>
		<function name="SetGameSpeed" return="bool">
			<parameters>
				<parameter name="iGameSpeed" type="int" />
			</parameters>
			<description>Setzt die Spielgeschwindigkeit.</description>
		</function>
		<function name="SetGamma" return="bool">
			<parameters>
				<parameter name="dwClr1" type="dword" />
				<parameter name="dwClr2" type="dword" />
				<parameter name="dwClr3" type="dword" />
				<parameter name="iRampIndex" type="int" />
			</parameters>
			<description>Setzt eine Gammarampe. Mit Gammarampen kann global das Aussehen des gesamten Spieles gesteuert werden, indem jedem Farbkanal eine eigene Tabelle zugewiesen wird, aus der die neue Helligkeit abgelesen wird. Damit kann man zum Beispiel bestimmte Farben speziell hervorheben, alles abdunkeln oder erhellen oder sogar das Bild komplett invertieren.</description>
		</function>
		<function name="SetGravity" return="int">
			<parameters>
				<parameter name="iGravity" type="int" />
			</parameters>
			<description>Setzt die Schwerkraft. Dabei entspricht die Standardgravitation (100%) einer Beschleunigung von 0.2 Pixeln pro Tick² (Zunahme der YDir um 2 pro Tick bei iPrecision=10)</description>
		</function>
		<function name="GetSkyAdjust" return="dword">
			<parameters>
				<parameter name="fBackColor" type="bool" />
			</parameters>
			<description>Gibt die mit <a href="../../../sdk/script/fn/SetSkyAdjust.html">SetSkyAdjust</a> gesetzte Himmelsmodulation zurück. Für weitere Informationen siehe <a href="../../../sdk/script/fn/SetSkyAdjust.html">SetSkyAdjust</a>
</description>
		</function>
		<function name="GetSkyColor" return="int">
			<parameters>
				<parameter name="iIndex" type="int" />
				<parameter name="iRGB" type="int" />
			</parameters>
			<description>Liefert den Farbwert des Himmels. Mit iRGB kann angegeben werden ob entweder Rot (iRGB ist 0), Grün (iRGB ist 1) oder Blau (iRGB ist 2) zurück gegeben werden soll. Mit iIndex wird festgelegt von welchem Palettenindex (0 - 19) der Wert zurück gegeben werden soll.</description>
		</function>
		<function name="SetSkyAdjust" return="bool">
			<parameters>
				<parameter name="dwClrMod" type="dword" />
				<parameter name="dwBackClr" type="dword" />
			</parameters>
			<description>Setzt die Himmelsmodulation. Die Himmelsfarben werden mit der angegebenen Farbe so verrechnet wie auch ColorByOwner-Grafiken.</description>
		</function>
		<function name="SetSkyColor" return="bool">
			<parameters>
				<parameter name="iIndex" type="int" />
				<parameter name="iRed" type="int" />
				<parameter name="iGreen" type="int" />
				<parameter name="iBlue" type="int" />
			</parameters>
			<description>Verändert eine Himmelsfarben. Dabei wird im 8Bit-Modus der entsprechende Paletteneintrag geändert.</description>
		</function>
		<function name="SetSkyFade" return="bool">
			<parameters>
				<parameter name="iFromRed" type="int" />
				<parameter name="iFromGreen" type="int" />
				<parameter name="iFromBlue" type="int" />
				<parameter name="iToRed" type="int" />
				<parameter name="iToGreen" type="int" />
				<parameter name="iToBlue" type="int" />
			</parameters>
			<description>Verändert die Himmelsfarben. Dabei werden im 8Bit-Modus die Palettenfarben 0 (Anfangsfarbe) bis 19 (Endfartbe) auf einen Verlauf zwischen den angegebenen Farbwerten gesetzt. Das macht natürlich nur dann Sinn, wenn der Himmel aus einem Farbverlauf besteht.</description>
		</function>
		<function name="SetSkyParallax" return="bool">
			<parameters>
				<parameter name="iMode" type="int" />
				<parameter name="iParX" type="int" />
				<parameter name="iParY" type="int" />
				<parameter name="iXDir" type="int" />
				<parameter name="iYDir" type="int" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
			</parameters>
			<description>Verändert Parallaxität und Scrollgeschwindigkeit des Himmels.</description>
		</function>
		<function name="SkyPar_Keep" return="int">
			<parameters>
			</parameters>
			<description>Konstante für <a href="../../../sdk/script/fn/SetSkyParallax.html">SetSkyParallax</a>.</description>
		</function>
		<function name="AddMsgBoardCmd" return="int">
			<parameters>
				<parameter name="strCommand" type="string" />
				<parameter name="strScript" type="string" />
			</parameters>
			<description>Erzeugt ein neues selbstdefiniertes Messageboard-Kommando. Dieses Kommando kann von jedem Spieler im Spiel durch Eingabe von "/[Kommandoname]" aufgerufen werden.
          In dem Fall wird der angegebene Script ausgeführt. Im Script kann "%s" dafür verwendet werden, eventuell angegebene Parameter einzubinden.</description>
		</function>
		<function name="DoScoreboardShow" return="bool">
			<parameters>
				<parameter name="iChange" type="int" />
				<parameter name="iForPlr" type="int" />
			</parameters>
			<description>Ändert den Sichtbarkeitszähler für das Scoreboard. Der intern verwaltete Zähler beginnt bei 0. Ist er größer als 0, wird das Scoreboard gezeigt. Ist er kleiner als 0, wird es verborgen. Ist er gleich 0, wird das Scoreboard nur dann gezeigt, wenn der Spieler die entsprechende Taste (normalweise Tab) drückt.
    </description>
		</function>
		<function name="ScoreboardCol" return="int">
			<parameters>
				<parameter name="idDef" type="id" />
			</parameters>
			<description>Wandelt eine Objektdefinitions-ID in eine Zahl um, die als Spaltenidentifikator für <a href="../../../sdk/script/fn/SetScoreboardData.html">SetScoreboardData</a> verwendet werden kann. Diese Funktion ist dann interessant, wenn ein Objekt auf das Scoreboard zugreifen will, aber dabei sicher stellen muss, dass es nicht dieselbe ID wie ein anderes Objekt verwendet.
    </description>
		</function>
		<function name="SetScoreboardData" return="bool">
			<parameters>
				<parameter name="iRowID" type="int" />
				<parameter name="iColID" type="int" />
				<parameter name="sText" type="string" />
				<parameter name="iData" type="int" />
			</parameters>
			<description>Setzt Daten im Scoreboard. Das Scoreboard ist eine globale Tabelle, die Szenarien nutzen können um zum Beispiel den aktuellen Punktestand aller Spieler oder sonstige Rundendaten darzustellen. Es wird vom Spieler standardgemäß mit der Taste Tab aufgerufen, kann aber auch per Script mit <a href="../../../sdk/script/fn/DoScoreboardShow.html">DoScoreboardShow</a> forciert gezeigt oder verborgen werden.<br/>
	Das Scoreboard wird automatisch erstellt, sobald Daten darin gesetzt werden. Es wird automatisch gelöscht, wenn es außer Überschriften keine Daten mehr enthält.<br/>
	Daten werden über einen Zeilen- und Spaltenindex adressiert. Werte mit gleichem Zeilenindex landen in der gleichen Zeile; Werte mit gleichem Spaltenindex in der gleichen Spalte. Existieren noch keine Daten für einen Zeilen- bzw. Spaltenindex, so wird die Zeile bzw. Spalte neu angelegt und unten bzw. rechts angehängt. Es ist also nicht entscheidend, welche Indizes verwendet werden, solange sie eindeutig sind. Es können z.B. Spielernummern, Spieler-IDs (siehe <a href="../../../sdk/script/fn/GetPlayerID.html">GetPlayerID</a>) oder Team-IDs (siehe <a href="../../../sdk/script/fn/GetPlayerTeam.html">GetPlayerTeam</a>) angegeben werden. Damit mehrere Objektdefinitionen wie zum Beispiel ein Todeszähler nicht dieselben IDs für Spalten verwenden, gibt es die Funktion <a href="../../../sdk/script/fn/ScoreboardCol.html">ScoreboardCol</a>, die aus einer ID einen eindeutige Spaltenindex generiert. Dabei ist natürlich trotzdem darauf zu achten, dass mehrere solcher Objekte die gleichen Zeilenadressierungen verwenden. Indizes müssen nicht fortlaufend sein; Zeilen und Spalten werden nach Reihenfolge des Hinzufügens und nicht nach Indizes sortiert. Für benutzerdefinierte Sortierungen (zum Beispiel absteigend nach Punkten für eine Bestenliste) dient die Funktion <a href="../../../sdk/script/fn/SortScoreboard.html">SortScoreboard</a>.
    </description>
		</function>
		<function name="SortScoreboard" return="bool">
			<parameters>
				<parameter name="iColID" type="int" />
				<parameter name="fReverse" type="bool" />
			</parameters>
			<description>Sortiert die Zeilen des Scoreboards nach den Extradaten einer Spalte. Wenn zwei Einträge in dieser Spalte die gleichen Werte besitzen, wird nicht umsortiert. So kann durch sukzessive Aufrufe dieser Funktion nach mehreren Spalten sortiert werden.
    </description>
		</function>
		<function name="ExtractLiquid" return="int">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
			</parameters>
			<description>Saugt ein Pixel Flüssigkeit an der angegebenen Position ab. Zurückgegeben wird die Materialnummer des abgesogenen Materials; bei Misserfolg -1.</description>
		</function>
		<function name="ExtractMaterialAmount" return="int">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iMat" type="int" />
				<parameter name="iAmount" type="int" />
			</parameters>
			<description>Extrahiert eine bestimmte Menge des gleichen Materials an einer Stelle. Zurückgegeben wird die tatsächlich erfolgreich extrahierte Materialmenge.</description>
		</function>
		<function name="GBackLiquid" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
			</parameters>
			<description>Überprüft ob sich an angegebener Position in der Landschaft Flüssigkeit befindet.</description>
		</function>
		<function name="GBackSemiSolid" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
			</parameters>
			<description>Überprüft ob sich an angegebener Position in der Landschaft feste Materie oder Flüssigkeit befindet. Also alles außer Himmel und Tunnel.</description>
		</function>
		<function name="GBackSky" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
			</parameters>
			<description>Überprüft ob sich an angegebener Position in der Landschaft Himmel befindet.</description>
		</function>
		<function name="GBackSolid" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
			</parameters>
			<description>Überprüft ob sich an angegebener Position in der Landschaft feste Materie befindet. Also alles wo Objekte nicht durchkönnen.</description>
		</function>
		<function name="GetMaterial" return="int">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
			</parameters>
			<description>Fragt das Material an einer bestimmten Stelle der Landschaft ab. Der zurückgegebene Wert ist ein Materialindex, der mit anderen Indizes zum Beispiel über die Funktion <a href="../../../sdk/script/fn/Material.html">Material</a>() verglichen werden kann. Für Himmel gibt die Funktion -1 zurück.</description>
		</function>
		<function name="GetMaterialColor" return="int">
			<parameters>
				<parameter name="iMat" type="int" />
				<parameter name="iNumber" type="int" />
				<parameter name="iChannel" type="int" />
			</parameters>
			<description>Ermittelt die Farbe eines Materials.</description>
		</function>
		<function name="GetMaterialCount" return="int">
			<parameters>
				<parameter name="iMaterial" type="int" />
			</parameters>
			<description>Liefert die in der Landschaft vorhandene Menge des angegebenen Materials.</description>
		</function>
		<function name="InsertMaterial" return="bool">
			<parameters>
				<parameter name="iMat" type="int" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iXDir" type="int" />
				<parameter name="iYDir" type="int" />
			</parameters>
			<description>Fügt ein Materialpixel an der angegebenen Position in der angegebenen Geschwindigkeit ein.</description>
		</function>
		<function name="Material" return="int">
			<parameters>
				<parameter name="szMaterialName" type="string" />
			</parameters>
			<description>Gibt den Index eines Materials anhand seines Namens zurück. Dieser Index wird in den meisten materialbezogenen Funktionen verwendet.</description>
		</function>
		<function name="MaterialName" return="string">
			<parameters>
				<parameter name="iMat" type="int" />
			</parameters>
			<description>Gibt den (internen, englischen) Namen eines Materials zurück.</description>
		</function>
		<function name="SetMaterialColor" return="bool">
			<parameters>
				<parameter name="iMat" type="int" />
				<parameter name="iR1" type="int" />
				<parameter name="iG1" type="int" />
				<parameter name="iB1" type="int" />
				<parameter name="iR2" type="int" />
				<parameter name="iG2" type="int" />
				<parameter name="iB2" type="int" />
				<parameter name="iR3" type="int" />
				<parameter name="iG3" type="int" />
				<parameter name="iB3" type="int" />
			</parameters>
			<description>Setzt die Farben eines Materials in der Palette. Dadurch werden alle Vorkommen dieses Materials auf der Karte in der neuen Farbe dargestellt.</description>
		</function>
		<function name="CastPXS" return="int">
			<parameters>
				<parameter name="szMaterial" type="string" />
				<parameter name="iAmount" type="int" />
				<parameter name="iLevel" type="int" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
			</parameters>
			<description>Verschleudert namentlich angegebene Materialpixel an angegebener Position. Bei einem lokalen Aufruf gelten die Koordinaten als Offset zum aufrufenden Objekt.</description>
		</function>
		<function name="DigFree" return="int">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iRadius" type="int" />
			</parameters>
			<description>Gräbt ein kreisrundes Loch in halbfesten Materialien.</description>
		</function>
		<function name="DigFreeRect" return="int">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
			</parameters>
			<description>Gräbt ein rechteckiges Loch in halbfesten Materialien.</description>
		</function>
		<function name="DrawDefMap" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="szMapDef" type="string" />
			</parameters>
			<description>Zeichnet eine dynamische Zufallskarte innerhalb eines Bereichs. Dazu wird die angegebene Karte in der Landscape.txt gesucht.</description>
		</function>
		<function name="DrawMap" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="szMap" type="string" />
			</parameters>
			<description>Zeichnet eine dynamische Zufallskarte innerhalb eines Bereichs. Dazu wird derselbe Generator benutzt, der auch die Karten der Landscape.txt zeichnet.</description>
		</function>
		<function name="DrawMaterialQuad" return="bool">
			<parameters>
				<parameter name="szMaterialTexture" type="string" />
				<parameter name="iX1" type="int" />
				<parameter name="iY1" type="int" />
				<parameter name="iX2" type="int" />
				<parameter name="iY2" type="int" />
				<parameter name="iX3" type="int" />
				<parameter name="iY3" type="int" />
				<parameter name="iX4" type="int" />
				<parameter name="iY4" type="int" />
				<parameter name="sub" type="bool" />
			</parameters>
			<description>Zeichnet ein viereckiges Polygon im angegebenen Material mit der angegebenen Textur. Wenn keine Textur angegeben ist, wird Smooth angenommen.</description>
		</function>
		<function name="FindConstructionSite" return="bool">
			<parameters>
				<parameter name="idDef" type="id" />
				<parameter name="iVarNumX" type="int" />
				<parameter name="iVarNumY" type="int" />
			</parameters>
			<description>Sucht einen Bauplatz für ein Gebäude, ausgehend von <a href="../../../sdk/script/fn/Var.html">Var</a>(iVarNumX)/<a href="../../../sdk/script/fn/Var.html">Var</a>(iVarNumY). Wenn ein Bauplatz gefunden wird, wird er in den entsprechenden Variablen abgelegt, und es wird TRUE zurückgegeben. Ansonsten ist der Rückgabewert FALSE.</description>
		</function>
		<function name="FreeRect" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="iFreeDensity" type="int" />
			</parameters>
			<description>Entfernt alle Materialien innerhalb des angegebenen Rechtecks. Die Koordinaten sind immer global, und der untere und rechte Rand des Rechtecks zählen nicht mit dazu.</description>
		</function>
		<function name="GetPathLength" return="int">
			<parameters>
				<parameter name="iFromX" type="int" />
				<parameter name="iFromY" type="int" />
				<parameter name="iToX" type="int" />
				<parameter name="iToY" type="int" />
			</parameters>
			<description>Sucht mittels des auch für die Clonk-Wegfindung benutzten Algorithmus
          einen Weg zwischen zwei Punkten der Landschaft und gibt dessen Länge
          zurück. Wurde kein Weg gefunden, gibt die Funktion 0 zurück.</description>
		</function>
		<function name="InLiquid" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt TRUE zurück, wenn sich das Objekt in einer Flüssigkeit befindet.</description>
		</function>
		<function name="LandscapeHeight" return="int">
			<parameters>
			</parameters>
			<description>Gibt die Höhe der Landschaft in Pixel zurück.</description>
		</function>
		<function name="LandscapeWidth" return="int">
			<parameters>
			</parameters>
			<description>Gibt die Breite der Landschaft in Pixel zurück.</description>
		</function>
		<function name="PathFree" return="bool">
			<parameters>
				<parameter name="iX1" type="int" />
				<parameter name="iY1" type="int" />
				<parameter name="iX2" type="int" />
				<parameter name="iY2" type="int" />
			</parameters>
			<description>Gibt zurück, ob der Weg zwischen den beiden angegebenen Punkten in der Landschaft frei ist, d.h., ob sich keine festen Materialien auf der Verbindungslinie zwischen den Punkten befinden.</description>
		</function>
		<function name="SetClimate" return="bool">
			<parameters>
				<parameter name="iClimate" type="int" />
			</parameters>
			<description>Setzt das Klima (Durchschnittstemperatur).</description>
		</function>
		<function name="SetLandscapePixel" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="dwValue" type="dword" />
			</parameters>
			<description>Färbt ein Pixel in der Landschaft ein. Diese Funktion ist nicht im 8Bit-Grafiksystem verfügbar.</description>
		</function>
		<function name="SetMatAdjust" return="bool">
			<parameters>
				<parameter name="dwClrMod" type="dword" />
			</parameters>
			<description>Setzt die Materialmodulation. Die Materialfarben werden mit der angegebenen Farbe so verrechnet wie auch ColorByOwner-Grafiken.</description>
		</function>
		<function name="ShakeFree" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iRadius" type="int" />
			</parameters>
			<description>Löst innerhalb eines kreisförmigen Bereiches halbfestes Material in der Landschaft. Für gelöstes Material wird neu geprüft, ob es in darunterliegendes Material fallen kann. Dadurch kann man zum Beispiel Höhlendecken einstürzen lassen.</description>
		</function>
		<function name="And" return="int">
			<parameters>
				<parameter name="fCon1" type="int" />
				<parameter name="fCon2" type="int" />
			</parameters>
			<description>Gibt TRUE zurück, wenn beide Parameter ungleich Null sind (Logisches And). Sollte in neueren Scripts durch den <a href="../../../sdk/script/operatoren.html">Operator</a> "&amp;&amp;" ersetzt werden.</description>
		</function>
		<function name="Equal" return="bool">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
			</parameters>
			<description>Gibt true zurück, wenn iVal1 == iVal2, false, wenn nicht.</description>
		</function>
		<function name="GreaterThan" return="bool">
			<parameters>
				<parameter name="iVal1" type="int" />
				<parameter name="iVal2" type="int" />
			</parameters>
			<description>Gibt True zurück wenn iVal1 größer als iVal2 ist.</description>
		</function>
		<function name="LessThan" return="bool">
			<parameters>
				<parameter name="iValue1" type="int" />
				<parameter name="iValue1" type="int" />
			</parameters>
			<description>Gibt TRUE zurück, wenn der erste übergebene Wert kleiner ist als der zweite (iValue1 &lt; iValue2)</description>
		</function>
		<function name="Not" return="bool">
			<parameters>
				<parameter name="Value" type="bool" />
			</parameters>
			<description>Gibt true zurück, wenn Value false ist, false, wenn Value true ist.</description>
		</function>
		<function name="Or" return="int">
			<parameters>
				<parameter name="fCon1" type="int" />
				<parameter name="fCon2" type="int" />
				<parameter name="fCon3" type="int" />
				<parameter name="fCon4" type="int" />
				<parameter name="fCon5" type="int" />
			</parameters>
			<description>Gibt TRUE zurück, wenn einer der Parameter ungleich Null ist (Logisches Oder). Sollte in neueren Scripts durch den Operator "||" ersetzt werden.</description>
		</function>
		<function name="Music" return="int">
			<parameters>
				<parameter name="szSongName" type="string" />
				<parameter name="fLoop" type="bool" />
			</parameters>
			<description>Spielt ein Musikstück ab. Die entsprechende Datei muss in einer der aktiven Musikdateien vorhanden sein. Sind im ausgewählten Szenario Musikdateien vorhanden, gilt die Szenariodatei als aktive Musikdatei, andernfalls wird die globale Musikdatei Music.c4g genutzt. Bei erfolgreichem Aufruf dieser Funktion wird die Musikwiedergabe aktiviert, auch wenn sie in den Optionen des Menüsystems deaktiviert wurde.</description>
		</function>
		<function name="MusicLevel" return="int">
			<parameters>
				<parameter name="iLevel" type="int" />
			</parameters>
			<description>Setzt die Lautstärke, mit der die Hintergrundmusik abgespielt wird (siehe <a href="../../../sdk/script/fn/Music.html">Music</a>).</description>
		</function>
		<function name="SetPlayList" return="int">
			<parameters>
				<parameter name="szPlayList" type="string" />
			</parameters>
			<description>Setzt die Liste der Musikstücke, die in zufälliger Reihenfolge abgespielt werden sollen (wenn die Musik aktiviert ist). Zurückgegeben wird die Anzahl der aktivierten Musikstücke (Im Netzwerk wird allerdings immer 0 zurückgegeben).</description>
		</function>
		<function name="CustomMessage" return="bool">
			<parameters>
				<parameter name="message" type="string" />
				<parameter name="obj" type="object" />
				<parameter name="plr" type="int" />
				<parameter name="offset_x" type="int" />
				<parameter name="offset_y" type="int" />
				<parameter name="color" type="int" />
				<parameter name="deco" type="id" />
				<parameter name="portrait" type="string" />
				<parameter name="flags" type="int" />
			</parameters>
			<description>Gibt eine Nachricht aus.</description>
		</function>
		<function name="Log" return="bool">
			<parameters>
				<parameter name="szMessage" type="string" />
			</parameters>
			<description>Gibt einen Text im Messageboard am unteren Bildschirmrand aus. Die Parameter können über den C-Formatierungsstil in den Text eingebunden werden. Siehe dazu auch <a href="../../../sdk/script/fn/Format.html">Format</a>.</description>
		</function>
		<function name="Message" return="bool">
			<parameters>
				<parameter name="strMessage" type="string" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Zeigt eine Nachricht an. Diese kann nach dem C-Formatierungsstil formatiert werden (siehe <a href="../../../sdk/script/fn/Format.html">Format</a>)</description>
		</function>
		<function name="PlayerMessage" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="szMessage" type="string" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt eine Nachricht nur im Viewport eines Spielers aus. Die Nachrichtenformatierung erfolgt analog zu <a href="../../../sdk/script/fn/Message.html">Message</a>.</description>
		</function>
		<function name="PlrMessage" return="bool">
			<parameters>
				<parameter name="szMessage" type="string" />
				<parameter name="iPlr" type="int" />
			</parameters>
			<description>Gibt eine Nachricht nur im Viewport eines Spielers aus. Die Nachrichtenformatierung erfolgt analog zu <a href="../../../sdk/script/fn/Message.html">Message</a>.</description>
		</function>
		<function name="ActIdle" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Prüft, ob das Objekt eine Aktivität ausführt. Bei lokalem Aufruf kann pObj == 0 sein.</description>
		</function>
		<function name="GetActTime" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert den Zeitraum in Frames, die das angegebene Objekt bereits die aktuelle Aktivität ausgeführt hat.</description>
		</function>
		<function name="GetAction" return="string">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert den Namen der momentanen Aktivität eines Objekts zurück, "Idle", wenn das Objekt keine Aktivität ausführt.</description>
		</function>
		<function name="GetActionTarget" return="object">
			<parameters>
				<parameter name="iTargetIndex" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die aktuellen Aktivitätszielobjekte eines Objekts.</description>
		</function>
		<function name="GetDir" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die aktuelle Richtung eines Objekts als DIR_x()-Wert.</description>
		</function>
		<function name="GetPhase" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die Aktivitätsphase von *pObj. *pObj ist Null bei lokalem Aufruf.</description>
		</function>
		<function name="GetProcedure" return="string">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt die Prozedur der gegenwärtigen Aktivität eines Objekts zurück (z.B. FLOAT, ATTACH, etc.). Bei einer NONE-Prozedur oder keiner Aktivität wird 0 zurückgegeben.</description>
		</function>
		<function name="ObjectSetAction" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="szAction" type="string" />
				<parameter name="pTarget1" type="object" />
				<parameter name="pTarget2" type="object" />
				<parameter name="fDirect" type="bool" />
			</parameters>
			<description>Setzt die Aktivität des angegebenen Objekts. Siehe auch <a href="../../../sdk/definition/actmap.html">ActMap.txt</a>.</description>
		</function>
		<function name="SetAction" return="bool">
			<parameters>
				<parameter name="szAction" type="string" />
				<parameter name="pTarget1" type="object" />
				<parameter name="pTarget2" type="object" />
			</parameters>
			<description>Setzt die Aktivität des aufrufenden Objekts. Siehe auch <a href="../../../sdk/definition/actmap.html">ActMap.txt</a>.</description>
		</function>
		<function name="SetActionData" return="bool">
			<parameters>
				<parameter name="iData" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt den Zusatzparameter für die aktuell ausgeführte Aktivitäts-Prozedur. Die Auswirkung dieses Parameters hängt von der gesetzten Prozedur ab. Siehe dazu auch <a href="../../../sdk/definition/procedures.html">ActMap-Prozeduren</a>.</description>
		</function>
		<function name="SetActionTargets" return="bool">
			<parameters>
				<parameter name="pTarget1" type="object" />
				<parameter name="pTarget2" type="object" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt die aktuellen Aktivitätszielobjekte eines Objekts. Die Auswirkung der Zielobjekte richtet sich nach der <a href="../../../sdk/definition/procedures.html">Prozedur</a> der aktuell gesetzten Aktivität.</description>
		</function>
		<function name="SetBridgeActionData" return="bool">
			<parameters>
				<parameter name="iBridgeLength" type="int" />
				<parameter name="fMoveClonk" type="bool" />
				<parameter name="fWall" type="bool" />
				<parameter name="iBridgeMaterial" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt Zusatzparameter für eine aktuell ausgeführte BRIDGE-Prozedur.</description>
		</function>
		<function name="SetDir" return="int">
			<parameters>
				<parameter name="iDir" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt die Richtung eines Objekts.</description>
		</function>
		<function name="SetPhase" return="bool">
			<parameters>
				<parameter name="iPhase" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt die Aktivitätsphase eines Objekts.</description>
		</function>
		<function name="Fling" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="iXDir" type="int" />
				<parameter name="iYDir" type="int" />
			</parameters>
			<description>Verschleudert pObj in die angegebene Richtung. Diese Funktion ist für Lebewesen konzipiert, da sie die entsprechenden Aktivitäten setzt.</description>
		</function>
		<function name="GetComDir" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die aktuelle Befehlsrichtung eines Objekts. Diese gibt die momentane, beabsichtigte Bewegungsrichtung an. Die Auswirkung dieser Richtung hängt von der <a href="../../../sdk/definition/procedures.html">Prozedur</a> der aktuellen <a href="../../../sdk/definition/actmap.html">Aktivität</a> ab.</description>
		</function>
		<function name="GetR" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die Rotation in Grad von *pObj. Der Rückgabewert liegt zwischen -180° und 180°. 0° ist der Normalzustand.</description>
		</function>
		<function name="GetRDir" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="iPrecision" type="int" />
			</parameters>
			<description>Liefert die Rotations-Geschwindigkeit von pObj.</description>
		</function>
		<function name="GetXDir" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="iPrecision" type="int" />
			</parameters>
			<description>Liefert die Geschwindigkeit in X-Richtung von pObj.</description>
		</function>
		<function name="GetYDir" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="iPrecision" type="int" />
			</parameters>
			<description>Liefert die Geschwindigkeit in Y-Richtung von pObj.</description>
		</function>
		<function name="Jump" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Veranlasst das Objekt dazu, zu springen. Dabei gelten sämtliche Beschränkungen, die auch bei Ansteuerung über die Tastatur gelten:
          Das Objekt kann nur springen, wenn es gerade steht (seine Action die Procedure "WALK" hat).<br/>
          Im Wasser wird die Action "Dive" aktiviert.<br/>
          Die Funktion gibt zurück, ob die Aktion erfolgreich durchgeführt wurde.
          </description>
		</function>
		<function name="SetComDir" return="int">
			<parameters>
				<parameter name="iComDir" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt die Befehlsrichtung eines Objekts (siehe <a href="../../../sdk/script/fn/GetComDir.html">GetComDir</a>)</description>
		</function>
		<function name="SetR" return="bool">
			<parameters>
				<parameter name="iR" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt die Drehung eines Objekts.</description>
		</function>
		<function name="SetRDir" return="bool">
			<parameters>
				<parameter name="iRDir" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="iPrecision" type="int" />
			</parameters>
			<description>Setzt die Drehungsgeschwindigkeit eines Objekts.</description>
		</function>
		<function name="SetXDir" return="bool">
			<parameters>
				<parameter name="iXDir" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="iPrecision" type="int" />
			</parameters>
			<description>Setzt die horizontale Geschwindigkeit eines Objekts.</description>
		</function>
		<function name="SetYDir" return="bool">
			<parameters>
				<parameter name="iYDir" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="iPrecision" type="int" />
			</parameters>
			<description>Setzt die vertikale Geschwindigkeit eines Objekts.</description>
		</function>
		<function name="SimFlight" return="bool">
			<parameters>
				<parameter name="&amp; iX" type="int" />
				<parameter name="&amp; iY" type="int" />
				<parameter name="&amp; iXDir" type="int" />
				<parameter name="&amp; iYDir" type="int" />
				<parameter name="iMinDensity" type="int" />
				<parameter name="iMaxDensity" type="int" />
				<parameter name="iIteration" type="int" />
				<parameter name="iPrecision" type="int" />
			</parameters>
			<description>Simuliert die Bewegung eines freien Falles mit Anfangsgeschwindigkeit in die angegebene Richtung. Wenn die simulierte Bewegung ein Material mit der gewünschten Dichte durchläuft, gibt diese Funktion true zurück, ansonsten false.<br/> Bei true wird die X- und Y-Position des Aufpralls in den angegebenen Variablen für iX und iY gespeichert, die Aufprallgeschwindigkeit in den angegebenen Variablen fü iXDir und iYDir. Siehe dazu <a href="../../../sdk/script/Funcs.html#referenzen">Referenzen</a>.</description>
		</function>
		<function name="AddCommand" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="szCommand" type="string" />
				<parameter name="pTarget" type="object" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="pTarget2" type="object" />
				<parameter name="iInterval" type="int" />
				<parameter name="Data" type="any" />
				<parameter name="iRetries" type="int" />
				<parameter name="iBaseMode" type="int" />
			</parameters>
			<description>Fügt ein Kommado in die Kommandoliste eines Objekts hinzu (an den Anfang, siehe auch <a href="../../../sdk/script/fn/AppendCommand.html">AppendCommand</a>). D.h. es wird ein Kommando hinzugefügt, welches das Objekt vor anderen vorher gegebenen Kommandos auszuführen hat (war vorher kein Kommando gesetzt, so entspricht AddCommand <a href="../../../sdk/script/fn/SetCommand.html">SetCommand</a>) <br/>
          Für Kommando-Beschreibungen siehe <a href="../../../sdk/script/fn/SetCommand.html">SetCommand</a>
	</description>
		</function>
		<function name="AppendCommand" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="szCommand" type="string" />
				<parameter name="pTarget" type="object" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="pTarget2" type="object" />
				<parameter name="iInterval" type="int" />
				<parameter name="Data" type="any" />
				<parameter name="iRetries" type="int" />
				<parameter name="iBaseMode" type="int" />
			</parameters>
			<description>Fügt ein Kommando der Kommandoliste eines Objekts am Ende hinzu. Das Objekt wird also das zuerst gegebene Kommando ausführen und sich danach automatisch dem mit AppendCommand hinzugefügten widmen.<br/>
          Für Kommando-Beschreibungen siehe <a href="../../../sdk/script/fn/SetCommand.html">SetCommand</a><br/>
          Bemerkung: Mit AppendCommand hinzugefügte Befehle werden nicht an gesteuerte Fahrzeuge weitergeleitet (siehe VehicleControl)</description>
		</function>
		<function name="FinishCommand" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="fSuccess" type="bool" />
				<parameter name="iCommandNum" type="int" />
			</parameters>
			<description>Beendet ein Kommado in der Kommandoliste eines Objekts.</description>
		</function>
		<function name="GetCommand" return="any">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="iElement" type="int" />
				<parameter name="iCommandNum" type="int" />
			</parameters>
			<description>Gibt Informationen über ein Kommando eines Objekts zurück. Führt das Objekt momentan keine Aktion aus, so wird (bei jedem Wert von iElement) 0 zurückgegeben.</description>
		</function>
		<function name="SetCommand" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="szCommand" type="string" />
				<parameter name="pTarget" type="object" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="pTarget2" type="object" />
				<parameter name="Data" type="any" />
				<parameter name="iRetries" type="int" />
			</parameters>
			<description>Gibt einem Objekt ein Kommando, welches dieses selbstständig (ggf. durch automatische Wegfindung) auszuführen versucht.
    </description>
		</function>
		<function name="GetClrModulation" return="dword">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="iOverlayID" type="int" />
			</parameters>
			<description>Fragt die Farbmodulation eines Objekts ab. Diese ist ein Farbwert, der multiplikativ (oder auch additiv, bei entsprechend aktiviertem  BlitMode in der DefCore) aufgerechnet wird. Für weitere Hinweise siehe auch <a href="../../../sdk/script/fn/SetClrModulation.html">SetClrModulation</a>().</description>
		</function>
		<function name="GetColor" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Fragt den indizierten Farbwert eines Objekts ab, nach dem die ColorByOwner-Flächern eingefärbt sind. Dieser konnte beispielsweise durch <a href="../../../sdk/script/fn/SetOwner.html">SetOwner</a> oder <a href="../../../sdk/script/fn/SetColor.html">SetColor</a> gesetzt worden sein.</description>
		</function>
		<function name="GetColorDw" return="dword">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Fragt den RGB-Farbwert der Färbung der ColorByOwner-Flächen eines Objekts ab. Diese werden beispielsweise durch <a href="../../../sdk/script/fn/SetOwner.html">SetOwner</a>, <a href="../../../sdk/script/fn/SetColor.html">SetColor</a> oder <a href="../../../sdk/script/fn/SetColorDw.html">SetColorDw</a> gesetzt.</description>
		</function>
		<function name="GetObjectBlitMode" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="iOverlayID" type="int" />
			</parameters>
			<description>Liefert den aktuellen Zeichenmodus eines Objekts.</description>
		</function>
		<function name="GetPortrait" return="any">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="fGetID" type="bool" />
				<parameter name="fGetPermanent" type="bool" />
			</parameters>
			<description>Frägt Name oder ID des Portraits eines Crew-Mitglieds ab.</description>
		</function>
		<function name="GetUnusedOverlayID" return="int">
			<parameters>
				<parameter name="iBaseIndex" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt eine ungenutzte Overlay-ID zurück. Es wird der erste freie Overlay nach iBaseIndex zurückgegeben.</description>
		</function>
		<function name="SetClrModulation" return="bool">
			<parameters>
				<parameter name="dwClr" type="dword" />
				<parameter name="pObj" type="object" />
				<parameter name="iOverlayID" type="int" />
			</parameters>
			<description>Ändert die Farbmodulation eines Objekts. Diese ist ein Farbwert, der multiplikativ aufgerechnet wird. Bei <a href="../../../sdk/script/fn/RGB.html">RGB</a>(255,0,0) würden also nur die Rotanteile der Grafik gezeichnet werden. <a href="../../../sdk/script/fn/RGBa.html">RGBa</a>(255,255,255,128) würde die Grafik halbtransparent machen (sofern Alphaaddition nicht in den Grafikoptionen deaktiviert ist).</description>
		</function>
		<function name="SetColor" return="bool">
			<parameters>
				<parameter name="iColor" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt die ColorByOwner-Färbung eines Objekts. Dieser Aufruf entspricht dem Setzen eines neuen Besitzers mit <a href="../../../sdk/script/fn/SetOwner.html">SetOwner</a> bei einem Spieler mit der Spielerfarbe iColor.</description>
		</function>
		<function name="SetColorDw" return="bool">
			<parameters>
				<parameter name="dwNewColor" type="dword" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt die ColorByOwner-Färbung eines Objekts. Dieser Aufruf entspricht dem Setzen eines neuen Besitzers mit <a href="../../../sdk/script/fn/SetOwner.html">SetOwner</a> bei einem Spieler mit der Spielerfarbe dwNewColor.</description>
		</function>
		<function name="SetGraphics" return="bool">
			<parameters>
				<parameter name="szGfxName" type="string" />
				<parameter name="pObj" type="object" />
				<parameter name="idSrcDef" type="id" />
				<parameter name="iOverlay" type="int" />
				<parameter name="iOverlayMode" type="int" />
				<parameter name="szAction" type="string" />
				<parameter name="dwBlitMode" type="int" />
				<parameter name="pOvelayObject" type="object" />
			</parameters>
			<description>Ändert die Grafik eines Objekts. Diese beeinflusst die Darstellung des betreffenden Objekts überall im Spiel: In der Landschaft, im Menü oder auf Maussteuerungssymbolen.</description>
		</function>
		<function name="SetObjDrawTransform" return="bool">
			<parameters>
				<parameter name="iWidth" type="int" />
				<parameter name="iXSkew" type="int" />
				<parameter name="iXAdjust" type="int" />
				<parameter name="iYSkew" type="int" />
				<parameter name="iHeight" type="int" />
				<parameter name="iYAdjust" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="iOverlayID" type="int" />
			</parameters>
			<description>Transformiert die Grafik des angegebenen Objektes.</description>
		</function>
		<function name="SetObjectBlitMode" return="int">
			<parameters>
				<parameter name="dwNewBlitMod" type="dword" />
				<parameter name="pObj" type="object" />
				<parameter name="iOverlayID" type="int" />
			</parameters>
			<description>Ändert den Zeichenmodus für eine Objekts. Die möglichen Werte entsprechen denen des DefCore-Flags BlitMode (siehe Anmerkung). Die Funktion gibt jeweils den vorher gesetzten Blitmodus zurück.</description>
		</function>
		<function name="SetPicture" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Ändert die Repräsentativgrafik eines Objekts auf ein neues Zielrechteck der aktuell benutzten Grafik. Die Repräsentativgrafik wird beispielsweise im Menü oder der Inventarliste des ausgewählten Clonks verwendet. Siehe auch Eintrag Picture in der <a href="../../../sdk/definition/defcore.html">DefCore.txt</a>.</description>
		</function>
		<function name="SetPortrait" return="bool">
			<parameters>
				<parameter name="szPortrait" type="string" />
				<parameter name="pTarget" type="object" />
				<parameter name="idSrcDef" type="id" />
				<parameter name="fPermanent" type="bool" />
				<parameter name="fCopyGfx" type="bool" />
			</parameters>
			<description>Ändert das Portrait eines Crew-Mitglieds während des Spiels.</description>
		</function>
		<function name="Buy" return="object">
			<parameters>
				<parameter name="idBuyObj" type="id" />
				<parameter name="iForPlr" type="int" />
				<parameter name="iPayPlr" type="int" />
				<parameter name="pToBase" type="object" />
				<parameter name="fShowErrors" type="bool" />
			</parameters>
			<description>Kauft ein Objekt für iForPlr, und zieht iPayPlr Geld ab. Wenn dieser nicht genug Geld oder das Objekt nicht im Heimatbasismaterial hat, wird der Vorgang nicht ausgeführt.</description>
		</function>
		<function name="CastObjects" return="int">
			<parameters>
				<parameter name=" id" type="id" />
				<parameter name=" iNumber" type="int" />
				<parameter name=" iLevel" type="int" />
				<parameter name=" iX" type="int" />
				<parameter name=" iY" type="int" />
			</parameters>
			<description>Verschleudert iNumber Objekte an angegebener Position mit einer Geschwindigkeit von iLevel. Bei einem lokalen Aufruf haben die erzeugten Objekte den selben Besitzer wie das aufrufende Objekt.</description>
		</function>
		<function name="ComposeContents" return="object">
			<parameters>
				<parameter name="id" type="id" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Erzeugt ein Objekt vom Typ id als Inhalt von pObj. Das Objekt wird aus seinen Komponenten zusammen gesetzt, die in pObj enthalten sein müssen. Andernfalls wird eine Meldung ausgegeben, welche Objekte noch benötigt werden. Auch ComposeContents produziert den Engine Objekt-Call BuildNeedsMaterial, durch den die Meldung über noch benötigtes Material ausgewertet und abgefangen werden kann.</description>
		</function>
		<function name="CreateConstruction" return="object">
			<parameters>
				<parameter name="id" type="id" />
				<parameter name="iXOffset" type="int" />
				<parameter name="iYOffset" type="int" />
				<parameter name="iOwner" type="int" />
				<parameter name="iCompletion" type="int" />
				<parameter name="fTerrain" type="bool" />
				<parameter name="fCheckSite" type="bool" />
			</parameters>
			<description>Sollte statt <a href="../../../sdk/script/fn/CreateObject.html">CreateObject</a> benutzt werden, wenn ein Gebäude oder eine Baustelle erzeugt werden soll. Bei lokalen Aufrufen dieser Funktion wird die angegebene Position zu Offset-Koordinaten zum aufrufenden Objekt.
Wenn fCheckSite 1 ist, wird die Baustelle vorher auf ihre Eignung überprüft. Ist die Position ungeeignet (z.B. durch unebenen Untergrund oder andere Gebäude), wird beim aufrufenden Objekt eine entsprechende Meldung ausgegeben und die Funktion gibt 0 zurück.</description>
		</function>
		<function name="CreateContents" return="object">
			<parameters>
				<parameter name="id" type="id" />
				<parameter name="pObj" type="object" />
				<parameter name="iCount" type="int" />
			</parameters>
			<description>Erzeugt ein Objekt vom Typ id als Inhalt von pObj.</description>
		</function>
		<function name="CreateObject" return="object">
			<parameters>
				<parameter name="id" type="id" />
				<parameter name="iXOffset" type="int" />
				<parameter name="iYOffset" type="int" />
				<parameter name="iOwner" type="int" />
			</parameters>
			<description>Erzeugt ein Objekt des angegebenen Typs an der angegebenen Position. iXOffset und iYOffset bestimmen die Position in absoluten Pixel-Koordinaten der Landschaft (Mitte Unterkante des Objekts). Bei lokalen Aufrufen dieser Funktion wird die angegebene Position zu Offset-Koordinaten zum aufrufenden Objekt.</description>
		</function>
		<function name="Explode" return="bool">
			<parameters>
				<parameter name="iLevel" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="idEffect" type="id" />
				<parameter name="szParticle" type="string" />
			</parameters>
			<description>Lässt ein Objekt explodieren. Die Explosion beschädigt Landschaft und Objekte, und das Objekt wird mitsamt Inhalt vor der Explosion entfernt. Wenn sich das Objekt in einen anderen Objekt befindet, werden alle anderen Inhaltsobjekte und das enthaltende Objekt beschädigt. Als Verursacher des Schadens gilt der Besitzer des explodierenden Objekts.</description>
		</function>
		<function name="RemoveObject" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="fEjectContents" type="bool" />
			</parameters>
			<description>Entfernt ein Objekt.</description>
		</function>
		<function name="Sell" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Verkauft ein Objekt mitsamt Inhalt.</description>
		</function>
		<function name="Split2Components" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Zerlegt ein Objekt in seine Bestandteile. Die Bestandteile werden in zufälliger Drehung und mit geringer Geschwindigkeit in zufälliger Richtung an der Stelle erzeugt, an der sich das Objekt befand. Das Objekt wird anschließend vernichtet. Wenn sich das Objekt in einem Behälter befand, werden auch die Komponenten nach der Erschaffung in den Behälter versetzt.</description>
		</function>
		<function name="Collect" return="bool">
			<parameters>
				<parameter name="pItem" type="object" />
				<parameter name="pTarget" type="object" />
			</parameters>
			<description>Sammelt ein Objekt auf. Der Befehl führt dieselben Funktionen aus, als wäre das Objekt durch den normalen Collection-Bereich des Objekts eingesammelt worden (z.B. RejectCollect, Prüfung auf Flagge/Flagge abnehmbar, Hit-Aufruf bei OCF_HitSpeed2, usw.). Die einzigen Unterschiede sind, dass keine Prüfung der Position von pItem auf den Entrance-Bereich von pTarget/this() gemacht wird, und dass pItem nicht auf OCF_Carryable geprüft wird.<br/>Mit diesem Befehl lässt sich beispielsweise das Aufnehmen von Objekten aus Containern heraus realisieren. Wenn die Aufnahme fehlschlug (Beispielsweise durch den RejectCollect-Aufruf oder weil der Container voll war), gibt die Funktion 0 zurück. Ansonsten 1.</description>
		</function>
		<function name="Contained" return="object">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert das Objekt, in dem sich pObj befindet. Rückgabewert Null, wenn pObj sich im Freien befindet.</description>
		</function>
		<function name="Contents" return="object">
			<parameters>
				<parameter name="iIndex" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert das indizierte Objekt, das in pObj enthalten ist.</description>
		</function>
		<function name="ContentsCount" return="int">
			<parameters>
				<parameter name="id" type="id" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die Anzahl der Objekte vom Typ id, die in pObj enthalten sind.</description>
		</function>
		<function name="GrabContents" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Entfernt sämtlichen Inhalt von *pObj, und gibt diesen dem aufrufenden Objekt.</description>
		</function>
		<function name="ScrollContents" return="object">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Rotiert den Inhalt eines Objekts. Dabei wird immer genau ein Objekt weiter gescrollt (im Gegensatz zu <a href="../../../sdk/script/fn/ShiftContents.html">ShiftContents</a>). Es wird außerdem kein ControlContents aufgerufen. <br/>
          Zurückgegeben wird ein Pointer auf das Objekt, das sich nach der Rotation am Anfang der Inhaltsliste befindet.</description>
		</function>
		<function name="ShiftContents" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="fShiftBack" type="bool" />
				<parameter name="idTarget" type="id" />
				<parameter name="fDoCalls" type="bool" />
			</parameters>
			<description>Sortiert die Inhaltsobjekte so um, dass das nächste Objekt mit anderer ID vorne liegt. Die häufigste Anwendung für diesen Befehl ist ein Inventarwechsel.</description>
		</function>
		<function name="GetCategory" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="idDef" type="id" />
			</parameters>
			<description>Fragt die Objektkategorie eines Objekts ab. Die Objektkategorie wird normalerweise über die <a href="../../../sdk/definition/defcore.html">DefCore</a> gesetzt, und danach höchstens in seltenen Fällen mit <a href="../../../sdk/script/fn/SetCategory.html">SetCategory</a> geändert. Sie bestimmt das allgemeine Verhalten eines Objekts und dessen Platzierung. Eine mit GetCategory abgefragt Kategorie kann mit dem &amp;-Operator gegen eine C4D_-Konstante geprüft werden.</description>
		</function>
		<function name="SetCategory" return="bool">
			<parameters>
				<parameter name="iCategory" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Ändert die Kategorie eines Objekts.</description>
		</function>
		<function name="ComponentAll" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="idComponents" type="id" />
			</parameters>
			<description>Prüft, ob ein Objekt nur aus einem Objekttyp besteht.</description>
		</function>
		<function name="GetComponent" return="int">
			<parameters>
				<parameter name="idComponent" type="id" />
				<parameter name="iIndex" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="idDef" type="id" />
			</parameters>
			<description>Liefert Objektkomponenten.</description>
		</function>
		<function name="SetComponent" return="bool">
			<parameters>
				<parameter name="idComponent" type="id" />
				<parameter name="iCount" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt die Anzahl einer Komponente eines Objekts.</description>
		</function>
		<function name="DeathAnnounce" return="bool">
			<parameters>
			</parameters>
			<description>Gibt eine Botschaft a la "[name] ist von uns gegangen"  über dem aufrufenden Objekt aus.</description>
		</function>
		<function name="DoBreath" return="bool">
			<parameters>
				<parameter name="iChange" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Verändert den Atemwert eines Objekts.</description>
		</function>
		<function name="GetAlive" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt zurück, ob das Objekt noch am Leben ist.</description>
		</function>
		<function name="GetBreath" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert den aktuellen Atemwert eines Objekts in Prozent. 100% stellen hierbei den maximalen Physical-Wert von 100000 dar. Siehe auch DefCore.txt Sektion [Physical]. pObj Null bei lokalem Aufruf.</description>
		</function>
		<function name="Kill" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="fForced" type="bool" />
			</parameters>
			<description>Tötet ein Objekt. Nur Lebewesen.</description>
		</function>
		<function name="Punch" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="iX" type="int" />
			</parameters>
			<description>Schlägt pObj.</description>
		</function>
		<function name="SetAlive" return="int">
			<parameters>
				<parameter name="fAlive" type="bool" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Legt fest, ob ein Objekt lebt.</description>
		</function>
		<function name="CrewMember" return="bool">
			<parameters>
				<parameter name="id" type="id" />
			</parameters>
			<description>Liefert den Wert von "CrewMember" aus der DefCore von id.</description>
		</function>
		<function name="DoCrewExp" return="bool">
			<parameters>
				<parameter name="iChange" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt einem Clonk Erfahrungspunkte.</description>
		</function>
		<function name="GetCaptain" return="object">
			<parameters>
				<parameter name="iPlayer" type="int" />
			</parameters>
			<description>Liefert den Captain von iPlayer. Nur bei der Spielregel "Verlust Captain".</description>
		</function>
		<function name="GetController" return="int">
			<parameters>
				<parameter name="pObj" type="int" />
			</parameters>
			<description>Fragt ab, welcher Spieler ein Objekt zur Zeit kontrolliert bzw. zuletzt kontrolliert hat. Bei Mannschaftsmitgliedern ist dies normalerweise immer der Besitzer; bei Fahrzeugen der Controller des Clonks, der es zuletzt bedient (angefasst und geschoben/gezogen) hat. Objekte, die von Lebewesen aufgenommen werden, nehmen automatisch den Controller ihres Containers an. Beim Besitzerwechsel (siehe <a href="../../../sdk/script/fn/SetOwner.html">SetOwner</a>())wird automatisch auch der Controller auf den neuen Besitzer geändert.</description>
		</function>
		<function name="GetCrew" return="object">
			<parameters>
				<parameter name="iPlayer" type="int" />
				<parameter name="iIndex" type="int" />
			</parameters>
			<description>Gibt ein Mannschaftsmitglied eines Spielers zurück.</description>
		</function>
		<function name="GetCrewCount" return="int">
			<parameters>
				<parameter name="iPlayer" type="int" />
			</parameters>
			<description>Liefert die Anzahl der Mannschaftsmitglieder eines Spielers zurück.</description>
		</function>
		<function name="GetCrewEnabled" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Fragt ab, ob ein Mannschaftsmitglied gegenwärtig angewählt werden kann.</description>
		</function>
		<function name="GetCursor" return="object">
			<parameters>
				<parameter name="iPlayer" type="int" />
				<parameter name="iIndex" type="int" />
			</parameters>
			<description>Gibt den momentan kontrollierten Clonk eines Spielers zurück. Werden mehrere Clonks gelenkt, ist es bei iIndex=0 (oder weggelassen) immer das primär ausgewählte Mannschaftsmitglied. Also das, dem beispielsweise auch die Sicht folgt.</description>
		</function>
		<function name="GetHiRank" return="object">
			<parameters>
				<parameter name="iPlayer" type="int" />
			</parameters>
			<description>Liefert den höchstrangigen aktiven Clonk von iPlayer.</description>
		</function>
		<function name="GrabObjectInfo" return="bool">
			<parameters>
				<parameter name="pFrom" type="object" />
				<parameter name="pTo" type="object" />
			</parameters>
			<description>Überträgt die Infosektion von einem anderen Objekt zu pFrom bzw. dem aufrufenden Objekt. Die Infosektion enthält Namen, Rang, permantente Physicals, usw. Mit diesem Befehl lassen sich beispielsweise Wiederbelebungen realisieren, indem einfach beim Tod eines Clonks ein neuer erstellt und die Infosektion übertragen wird.</description>
		</function>
		<function name="MakeCrewMember" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="iPlayer" type="int" />
			</parameters>
			<description>Fügt ein Objekt (z.B. einen Clonk) der Crew eines Spielers hinzu. Das Objekt muss die CrewMember-Eigenschaft in der DefCore gesetzt haben.<br/>
        Gibt 1 zurück, wenn das Objekt erfolgreich der Crew hinzugefügt wurde.</description>
		</function>
		<function name="SetCrewEnabled" return="bool">
			<parameters>
				<parameter name="fEnabled" type="bool" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Aktiviert oder deaktiviert Mannschaftsmitglieder. Deaktivierte Mannschaftsmitglieder können nicht mehr vom Spieler angewählt werden. So kann es auch passieren, dass ein Spieler zwar 0 Mannschaftsmitglieder zur Auswahl hat, aber trotzdem nicht eliminiert ist. Nur für Objekte, die auch wirklich zu einer Mannschaft gehören. Deaktivierte Mannschaftsmitglieder sind automatisch nicht mehr ausgewählt.</description>
		</function>
		<function name="SetCrewStatus" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="fInCrew" type="bool" />
				<parameter name="pCrew" type="object" />
			</parameters>
			<description>Fügt ein Objekt (z.B. einen Clonk) der Crew eines Spielers hinzu oder entfernt dieses aus der Crew. Das Objekt muss die CrewMember-Eigenschaft in der DefCore gesetzt haben.</description>
		</function>
		<function name="UnselectCrew" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
			</parameters>
			<description>Wählt die gesamte Mannschaft eines Spieler ab. Nach dem Aufruf dieses Befehls sollte mit <a href="../../../sdk/script/fn/SelectCrew.html">SelectCrew</a> wieder ein Clonk angewählt werden.</description>
		</function>
		<function name="AddMenuItem" return="int">
			<parameters>
				<parameter name="szCaption" type="string" />
				<parameter name="szCommand" type="string" />
				<parameter name="idItem" type="id" />
				<parameter name="pMenuObject" type="object" />
				<parameter name="iCount" type="int" />
				<parameter name="Parameter" type="int" />
				<parameter name="szInfoCaption" type="string" />
				<parameter name="iExtra" type="int" />
				<parameter name="XPar1" type="int" />
				<parameter name="XPar2" type="int" />
			</parameters>
			<description>Fügt einen Menüeintrag hinzu.</description>
		</function>
		<function name="ClearMenuItems" return="int">
			<parameters>
				<parameter name="pMenuObject" type="object" />
			</parameters>
			<description>Entfernt alle Einträge aus einem Menü.</description>
		</function>
		<function name="CloseMenu" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Schließt das Menü eines Objekts.</description>
		</function>
		<function name="CreateMenu" return="int">
			<parameters>
				<parameter name="idSymbol" type="id" />
				<parameter name="pMenuObject" type="object" />
				<parameter name="pCommandObject" type="object" />
				<parameter name="iExtra" type="int" />
				<parameter name="szCaption" type="string" />
				<parameter name="iExtraData" type="int" />
				<parameter name="iStyle" type="int" />
				<parameter name="fPermanent" type="bool" />
				<parameter name="idMenuID" type="id" />
			</parameters>
			<description>Erzeugt ein benutzerdefiniertes Menü in pMenuObject. Menüeinträge müssen mit <a href="../../../sdk/script/fn/AddMenuItem.html">AddMenuItem</a> hinzugefügt werden.</description>
		</function>
		<function name="GetMenu" return="id">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die ID des Menüs, falls das Objekt ein Menü geöffnet hat. Normalerweise ist das die ID des Menüsymbols (idSymbol), wenn nicht bei <a href="../../../sdk/script/fn/CreateMenu.html">CreateMenu</a> explizit eine andere Menü-ID als idMenuID angegeben wurde. 0 bei keinem Menü oder bei keinem Symbol.</description>
		</function>
		<function name="GetMenuSelection" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Ermittelt den gerade ausgewählten Menüeintrag des geöffneten Menüs eines Objekts.</description>
		</function>
		<function name="SelectMenuItem" return="bool">
			<parameters>
				<parameter name="iItem" type="int" />
				<parameter name="pMenuObj" type="object" />
			</parameters>
			<description>Setzt die Auswahl in einem Menu.</description>
		</function>
		<function name="SetMenuSize" return="bool">
			<parameters>
				<parameter name="iCols" type="int" />
				<parameter name="iRows" type="int" />
				<parameter name="pMenuObj" type="object" />
			</parameters>
			<description>Ändert die Größe eines Objektmenüs, so dass die vorgegebene Anzahl an Menüeinträgen in Breite und Höhe hineinpassen.</description>
		</function>
		<function name="ShowInfo" return="bool">
			<parameters>
				<parameter name="pObject" type="object" />
			</parameters>
			<description>Zeigt die Beschreibung eines Objekts in einem kleinen Informationsfenster (intern ein Menü) beim aufrufenden Objekt an.</description>
		</function>
		<function name="GetOCF" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert das Object-Character-Flag eines Objekts. Dieser Wert beschreibt den aktuellen Zustand des Objekts. Der Rückgabewert ist eine Bitmaske und kann mit BitAnd() mit einem OCF_x()-Wert verglichen werden.</description>
		</function>
		<function name="Enter" return="bool">
			<parameters>
				<parameter name="pTarget" type="object" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Versetzt ein Objekt in ein anderes hinein. Bei diesem Vorgang wird weder RejectCollect, noch Collection oder ActivateEntrance im Zielobjekt aufgerufen. Dafür aber RejectEntrance und Entrance im Objekt, das hineinversetzt werden soll.</description>
		</function>
		<function name="Exit" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iR" type="int" />
				<parameter name="iXDir" type="int" />
				<parameter name="iYDir" type="int" />
				<parameter name="iRDir" type="int" />
			</parameters>
			<description>Versetzt ein Objekt aus seinem Behälter heraus, und setzt optional seine Geschwindigkeit.</description>
		</function>
		<function name="GetX" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die X-Position von *pObj.</description>
		</function>
		<function name="GetY" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die Y-Position von *pObj.</description>
		</function>
		<function name="Resort" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Sortiert ein Objekt neu in die Objektliste ein.</description>
		</function>
		<function name="ResortObject" return="bool">
			<parameters>
				<parameter name="szResortFunc" type="string" />
				<parameter name="pResortObj" type="object" />
			</parameters>
			<description>Sortiert ein Objekt neu in die Objektliste ein. Die Platzierung ergibt sich nach einer Platzierungsfunktion, die die Objektposition relativ zu jedem anderen Objekt in der Objektliste definieren sollte. Wenn das erste Objekt vor dem zweiten stehen sollte, muss die Funktion einen Wert kleiner Null zurückgeben. Ansonsten einen Wert größer oder gleich Null.</description>
		</function>
		<function name="ResortObjects" return="bool">
			<parameters>
				<parameter name="szResortFunc" type="string" />
				<parameter name="iCategory" type="int" />
			</parameters>
			<description>Sortiert die Objektliste teilweise oder komplett neu. Dafür wird ein einfacher Sortierungsalgorithmus angewandt, der immer wieder die angegebene Funktion aufruft, welche dann die Relation zweier Objekte zueinander zurückgeben muss. Die beiden Objekte werden als <a href="../../../sdk/script/fn/Par.html">Par</a>(0) und <a href="../../../sdk/script/fn/Par.html">Par</a>(1) übergeben. Wenn das erste Objekt vor dem zweiten stehen sollte, muss die Funktion einen Wert kleiner Null zurückgeben. Ansonsten einen Wert größer oder gleich Null.</description>
		</function>
		<function name="SetObjectOrder" return="bool">
			<parameters>
				<parameter name="pObjBeforeOrAfter" type="object" />
				<parameter name="pSortObj" type="object" />
				<parameter name="fAfter" type="bool" />
			</parameters>
			<description>Sorgt dafür, dass ein Objekt mit Sicherheit vor oder hinter einem anderen Objekt angeordnet ist. Dadurch lässt sich beispielsweise sicherstellen, dass sich ein Fahrstuhlkorb immer vor dem zugehörigen Fahrstuhl befindet.</description>
		</function>
		<function name="SetPosition" return="int">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="fCheckBounds" type="bool" />
			</parameters>
			<description>Verschiebt ein Objekt an die angegebene Position. Dabei wird das Objekt an die exakte Pixelposition gesetzt, und eventuelle, interne Verschiebungen um Pixelbruchteile werden verworfen.</description>
		</function>
		<function name="GetVisibility" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Fragt die Sichtbarkeit eines Objekts ab. Siehe dazu auch <a href="../../../sdk/script/fn/SetVisibility.html">SetVisibility</a>.</description>
		</function>
		<function name="SetVisibility" return="bool">
			<parameters>
				<parameter name="dwVisibility" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Verändert die Sichtbarkeit eines Objekts. Objekte können für beliebige Gruppen sichtbar gemacht werden, indem für dwVisibility eine Bitmaske angegeben wird.
		</description>
		</function>
		<function name="ChangeDef" return="bool">
			<parameters>
				<parameter name="idNewDef" type="id" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Weist einem Objekt eine neue Definition zu.</description>
		</function>
		<function name="CheckEnergyNeedChain" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Überprüft, ob ein an das angegebene Objekt angeschlossener Verbraucher Energie benötigt. Dabei werden auch indirekt (also über mehrere Leitungen über einen weiteren Verbraucher) angeschlossene Verbraucher überprüft.</description>
		</function>
		<function name="DoCon" return="bool">
			<parameters>
				<parameter name="iChange" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Verändert die Fertigstellung eines Objekts. Die meisten Lebewesen und Bäume können dadurch vergrößert oder verkleinert werden. Gebäude können zu Baustellen zurückgesetzt und Baustellen vorwärts oder rückwärts gebaut werden.<br/>
      Sinkt die Fertigstellung eines Objekts auf oder unter 0, wird dieses gelöscht.
    </description>
		</function>
		<function name="DoDamage" return="bool">
			<parameters>
				<parameter name="iChange" type="int" />
				<parameter name="pTarget" type="object" />
			</parameters>
			<description>Verändert den Schadenswert eines Objekts. Bei iChange ungleich Null wird im Zielobjekt außerdem die Funktion Damage aufgerufen. Bei lokalem Aufruf gilt der Besitzer des aufrufenden Objekts als Verursacher des Schadens.</description>
		</function>
		<function name="DoEnergy" return="bool">
			<parameters>
				<parameter name="iChange" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="fExakt" type="bool" />
				<parameter name="iEngType" type="int" />
				<parameter name="iCausedBy" type="int" />
			</parameters>
			<description>Verändert die Energie eines Objekts. Die Energie entspricht bei Gebäuden der elektrischen Energie, und bei Lebewesen der Lebensenergie.</description>
		</function>
		<function name="DoMagicEnergy" return="bool">
			<parameters>
				<parameter name="iChange" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="fAllowPartial" type="bool" />
			</parameters>
			<description>Verändert den Magiewert eines Objekts. Jedoch wird die gewünschte Veränderung vorgabemäßig nur als ganze ausgeführt und daher auch nur, wenn dadurch nicht die Ober- bzw. Untergrenze (physische Fähigkeit des Clonks bzw. 0) überschritten wird. Wenn die Veränderung iChange nicht als ganze ausgeführt werden kann, gibt die Funktion FALSE zurück. Hierdurch kann mit einem einzelnen Funktionsaufruf gleichzeitig überprüft werden, ob eine Transaktion überhaupt möglich ist.</description>
		</function>
		<function name="EnergyCheck" return="bool">
			<parameters>
				<parameter name="iEnergy" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt zurück, ob der Energiewert eines Objekts größer oder gleich iEnergy ist. Wenn die Spielregel "Energiebedarf" nicht aktiviert ist, gibt diese Funktion immer TRUE zurück. Außerdem werden Leitungen dazu motiviert, Energie hierhin zu transferieren.</description>
		</function>
		<function name="Extinguish" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Löscht das Feuer eines brennenden Objekts.</description>
		</function>
		<function name="FightWith" return="bool">
			<parameters>
				<parameter name="pTarget" type="object" />
				<parameter name="pFighter" type="object" />
			</parameters>
			<description>Beginnt einen Zweikampf. Mit diesem Befehl können auch Clonks nicht verfeindeter Spieler einen Kampf beginnen. Beide Teilnehmer müssen <a href="../../../sdk/script/fn/OCF_FightReady.html">OCF_FightReady</a> sein.</description>
		</function>
		<function name="GetCon" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die Fertigstellung eines Objekts in Prozent. Bei Baustellen ist dies die Fertigstellung, während es bei Tieren und Pflanzen die Größe angibt (Siehe StretchGrowth/OverSize in der <a href="../../../sdk/definition/defcore.html">DefCore</a>)</description>
		</function>
		<function name="GetContact" return="dword">
			<parameters>
				<parameter name="pObject" type="object" />
				<parameter name="iVertex" type="int" />
				<parameter name="dwCNAT" type="dword" />
			</parameters>
			<description>Ermittelt, in welche Richtungen einzelne oder alle Vertices eines Objekts feste Landschaft berühren. Die Richtungen werden als Bitmaske von <a href="../../../sdk/definition/cnat.html">CNAT-Werten</a> übergeben bzw. von der Funktion zurückgegeben.</description>
		</function>
		<function name="GetDamage" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Fragt den Schadenswert eines Objekts ab.</description>
		</function>
		<function name="GetDefBottom" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Fragt die Unterkante eines Objekts ab. Diese entspricht Y-Position + DefCore-OffsetY + DefCore-Height. Eine eventuelle Drehung wird hier nicht mit eingerechnet.</description>
		</function>
		<function name="GetDesc" return="string">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="idDef" type="id" />
			</parameters>
			<description>Gibt die Beschreibung eines Objekts oder einer Objektdefinition zurück. Die Beschreibung wird in Objektdefinitionen in der Desc**.txt angegeben.</description>
		</function>
		<function name="GetKiller" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert den Spieler, der zuletzt Energieabzug an einem Objekt verursacht hat.</description>
		</function>
		<function name="GetMass" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="idDef" type="id" />
			</parameters>
			<description>Liefert die Masse eines Objekts inklusive aller Inhaltsobjekte. Bei angegebenem idDef wird pObj ignoriert und stattdessen die Standardmasse der Objektdefinition zurückgegeben. Sind idDef und pObj 0, gilt das aufrufende Objekt als pObj.</description>
		</function>
		<function name="GetNeededMatStr" return="string">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die noch benötigten Baumaterialien des Objekts</description>
		</function>
		<function name="GetOwner" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Ermittelt den Besitzer eines Objekts.</description>
		</function>
		<function name="GetPhysical" return="int">
			<parameters>
				<parameter name="szPhysical" type="string" />
				<parameter name="iMode" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="idDef" type="id" />
			</parameters>
			<description>Liefert die physischen Eigenschaften eines Objekts.</description>
		</function>
		<function name="GetValue" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="idDef" type="id" />
				<parameter name="pBase" type="object" />
				<parameter name="iForPlayer" type="int" />
			</parameters>
			<description>Gibt einen Objekt- oder Definitionswert zurück. Bei angegebenem idDef wird der Definitionswert zurückgegeben, ansonsten der Objektwert von pObj oder dem aufrufenden Objekt bei pObj=0.<br/>Ein Objektwert berechnet sich folgendermaßen: Bei angegebenem pObj wird zunächst geprüft, ob eine CalcValue-Funktion im Script des Objekttyps von pObj vorhanden ist, und gegebenenfalls ausgewertet. Ansonsten wird der Definitionswert (siehe nächster Absatz) verwendet. Unabhängig davon wird der Wert des Objekts immer der Fertigstellung (GetCon()/100) multipliziert. Tote Lebewesen (GetCategory()&amp;OCF_Living() &amp;&amp; !GetAlive()) haben immer den Wert 0.<br/>Der Definitionswert wird folgendermaßen ermittelt: Ist eine CalcDefValue-Funktion im Script vorhanden, wird diese ausgewertet. Ansonsten wird eine Wertüberladung aus der Scenario.txt verwendet. Ist diese ebenfalls nicht vorhanden, wird der in der DefCore angegebene Wert benutzt.<br/>
</description>
		</function>
		<function name="OnFire" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt zurück, ob ein Objekt brennt.</description>
		</function>
		<function name="ResetPhysical" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="sPhys" type="string" />
			</parameters>
			<description>Setzt alle Physicals auf den Normalwert zurück. Für weitere Informationen siehe <a href="../../../sdk/script/fn/SetPhysical.html">SetPhysical</a>.</description>
		</function>
		<function name="SetContactDensity" return="bool">
			<parameters>
				<parameter name="iDensity" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Legt fest, welche Dichte ein Material haben muss, damit das Objekt mit diesem kollidiert. Standardmäßig liegt dieser Wert bei 50 (dichtes Material).</description>
		</function>
		<function name="SetController" return="bool">
			<parameters>
				<parameter name="iNewController" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Ändert den steuernden Spieler eines Objekts.</description>
		</function>
		<function name="SetMass" return="bool">
			<parameters>
				<parameter name="iNewMass" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Ändert die Eigenmasse eines Objekts. Die Eigenmasse entspricht dem in der <a href="../../../sdk/definition/DefCore.html">DefCore.txt</a> angegebenen Wert unter [DefCore], Mass. Die tatsächliche Objektmasse ergibt sich durch Hinzurechnen der Masse aller enthaltenen Objekte.</description>
		</function>
		<function name="SetName" return="bool">
			<parameters>
				<parameter name="szNewName" type="string" />
				<parameter name="pObj" type="object" />
				<parameter name="idDef" type="id" />
				<parameter name="fSetInInfo" type="bool" />
				<parameter name="fMakeValidIfExists" type="bool" />
			</parameters>
			<description>Ändert für eine Runde den Namen eines Objekts oder einer Definition.</description>
		</function>
		<function name="SetOwner" return="bool">
			<parameters>
				<parameter name="iNewOwner" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Ändert den Besitzer eines Objekts.</description>
		</function>
		<function name="SetPhysical" return="bool">
			<parameters>
				<parameter name="szPhysical" type="string" />
				<parameter name="iValue" type="int" />
				<parameter name="iMode" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Ändert die physischen Eigenschaften eines Objekts. Hiermit können die in der Physical-Sektion der <a href="../../../sdk/definition/DefCore.html">DefCore.txt</a> angegebenen Werte temporär oder permanent angepasst werden.</description>
		</function>
		<function name="SetSolidMask" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="iTx" type="int" />
				<parameter name="iTx" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt einen neuen, festen Bereich eines Objekts. Das Quellrechteck der Grafik gibt dabei an, welche Pixel im Rechteck fest werden sollen: Alle Pixel, die zu weniger als 50% transparent sind, werden fest. Siehe auch Eintrag SolidMask in der <a href="../../../sdk/definition/defcore.html">DefCore.txt</a>.</description>
		</function>
		<function name="SetTransferZone" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt einen neuen Transferbereich für ein Objekt. Führt die Suche der Wegfindung durch einen Transferbereich (dieser gilt für die Wegfindung immer als komplett durchlaufbar), werden für den Clonk ControlTransfer-Aufrufe an das Script des Objekts aufgerufen. In diesen sollte mit Hilfe von Befehlen dafür gesorgt werden, dass der Clonk an seine Zielposition kommt.</description>
		</function>
		<function name="Stuck" return="bool">
			<parameters>
				<parameter name="pObject" type="object" />
			</parameters>
			<description>Ermittelt, ob ein Objekt feststeckt, d.h., ob sich einer seiner Vertices in festem Material befindet.</description>
		</function>
		<function name="TrainPhysical" return="bool">
			<parameters>
				<parameter name="szPhysical" type="string" />
				<parameter name="iTrainBy" type="int" />
				<parameter name="iMaxTrain" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Erhöht den Wert der physischen Eigenschaft eines Objekts um den in iTrainBy angegebenen Wert. Mit diesem Aufruf werden sowohl die permanenten, als auch temporäre und temporär gestapelte Physicals trainiert. Dieser Befehl kann beispielsweise genutzt werden, um nach einem Zauber die Magiephysical zu trainieren.</description>
		</function>
		<function name="Value" return="int">
			<parameters>
				<parameter name="idDef" type="id" />
			</parameters>
			<description>Gibt einen Definitionswert zurück.</description>
		</function>
		<function name="AnyContainer" return="int">
			<parameters>
			</parameters>
			<description>Wird an <a href="../../../sdk/script/fn/FindObject.html">FindObject</a>/<a href="../../../sdk/script/fn/FindObjectOwner.html">FindObjectOwner</a> übergeben, damit nur Objekte gefunden werden, die in einem anderen Objekt enthalten sind</description>
		</function>
		<function name="FindBase" return="object">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="iIndex" type="int" />
			</parameters>
			<description>Sucht eine Heimatbasis eines Spielers. Die Heimatbasis ist zumeist das Gebäude, auf dem eine Flagge weht.</description>
		</function>
		<function name="FindContents" return="object">
			<parameters>
				<parameter name="idType" type="id" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert das erste in einem Behälter enthaltene Objekt vom Typ idType.</description>
		</function>
		<function name="FindObject" return="object">
			<parameters>
				<parameter name="idDef" type="id" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="dwOCF" type="int" />
				<parameter name="szAction" type="string" />
				<parameter name="pActionTarget" type="object" />
				<parameter name="pContainer" type="any" />
				<parameter name="pFindNext" type="object" />
			</parameters>
			<description>Liefert das erste gefundene Objekt, das den angegebenen Suchkriterien entspricht. Sind iWdt und iHgt beide -1, so wird das nächstliegende Objekt gefunden. Sind sie beide 0, wird nur am Punkt iX/iY gesucht. Sind iX, iY, iWdt und iHgt alle 0, gilt als Suchrechteck die gesamte Karte (auch bei lokalen Aufrufen). Es müssen stets die Bedingungen aller Parameter erfüllt sein, die angegeben und nicht 0 sind.</description>
		</function>
		<function name="FindObject2" return="object">
			<parameters>
				<parameter name="Criteria" type="array" />
			</parameters>
			<description>Gibt ein Objekt zurück, das die angegebenen Suchkriterien erfüllt. Die Suchkriterien werden mittels speziellen Kriteriums-Funktionen der Form "Find_*" angegeben.</description>
		</function>
		<function name="FindObjectOwner" return="object">
			<parameters>
				<parameter name="idDef" type="id" />
				<parameter name="iOwner" type="int" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="dwOCF" type="int" />
				<parameter name="szAction" type="string" />
				<parameter name="pActionTarget" type="object" />
				<parameter name="pFindNext" type="object" />
			</parameters>
			<description>Sucht Objekte nach ihrem Besitzer und anderen Kriterien, analog zu <a href="../../../sdk/script/fn/FindObject.html">FindObject</a>.</description>
		</function>
		<function name="FindObjects" return="array">
			<parameters>
				<parameter name="Criteria" type="array" />
			</parameters>
			<description>Erstellt eine Liste von Objekten, auf die alle angegeben Suchkriterien zutreffen. Die Suchkriterien werden mittels speziellen Kriteriums-Funktionen der Form "Find_*" angegeben.</description>
		</function>
		<function name="FindOtherContents" return="object">
			<parameters>
				<parameter name="idType" type="id" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert das erste Inhaltsobjekt eines Behälters, das nicht vom angegebenen Typ ist.</description>
		</function>
		<function name="NoContainer" return="int">
			<parameters>
			</parameters>
			<description>Konstante für FindObject: Suche außerhalb aller Objekte.</description>
		</function>
		<function name="ObjectCount" return="int">
			<parameters>
				<parameter name="idDef" type="id" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="dwOCF" type="int" />
				<parameter name="szAction" type="string" />
				<parameter name="pActionTarget" type="object" />
				<parameter name="pContainer" type="any" />
				<parameter name="iOwner" type="int" />
			</parameters>
			<description>Sucht Objekte, und gibt deren Anzahl zurück. Sind iWdt und iHgt beide -1, so wird das nächstliegende Objekt gefunden. Sind sie beide 0, wird nur am Punkt iX/iY gesucht. Sind iX, iY, iWdt und iHgt alle 0, gilt als Suchrechteck die gesamte Karte (auch bei lokalen Aufrufen). Es müssen stets die Bedingungen aller Parameter erfüllt sein, die angegeben und nicht 0 sind.</description>
		</function>
		<function name="ObjectCount2" return="int">
			<parameters>
				<parameter name="Criteria" type="array" />
			</parameters>
			<description>Gibt die Anzahl der Objekte zurück, die das angegebenen Suchkriterien erfüllen. Die Suchkriterien werden mittels speziellen Kriteriums-Funktionen der Form "Find_*" angegeben.</description>
		</function>
		<function name="AddVertex" return="int">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Fügt dem Objekt pObj einen neuen Vertex hinzu.</description>
		</function>
		<function name="GetVertex" return="int">
			<parameters>
				<parameter name="iIndex" type="int" />
				<parameter name="fY" type="bool" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert eine Koordinate des indizierten Vertex (siehe <a href="../../../sdk/definition/defcore.html">DefCore.txt</a>) eines Objekts. Koordinaten in Relation zur Objektmitte.</description>
		</function>
		<function name="GetVertexNum" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die Anzahl der Vertices eines Objekts.</description>
		</function>
		<function name="RemoveVertex" return="int">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Entfernt einen Vertex von einem Objekt.</description>
		</function>
		<function name="SetVertex" return="int">
			<parameters>
				<parameter name="iIndex" type="int" />
				<parameter name="iValueToSet" type="int" />
				<parameter name="iValue" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="iSetCustomPermanent" type="int" />
			</parameters>
			<description>Setzt eine Koordinate des indizierten Vertex (siehe <a href="../../../sdk/definition/defcore.html">DefCore.txt</a>) eines Objekts. Koordinaten in Relation zur Objektmitte.</description>
		</function>
		<function name="GetDefinition" return="id">
			<parameters>
				<parameter name="iIndex" type="int" />
				<parameter name="dwCategory" type="int" />
			</parameters>
			<description>Liefert das ID der indizierten von der Engine in dieser Runde geladenen Objektdefinition der angegebenen Kategorie (dwCategory 0 für alle Objektkategorien).</description>
		</function>
		<function name="GetEnergy" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert den aktuellen Energiewert eines Objekts in Prozent. 100% stellen hierbei den maximalen Physical-Wert von 100000 dar. Siehe auch DefCore.txt Sektion [Physical]. pObj Null bei lokalem Aufruf.</description>
		</function>
		<function name="GetEntrance" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert den aktuellen Eintrittsstatus eines Objekts. TRUE bei erlaubtem Eintritt, FALSE bei verbotenem Eintritt.</description>
		</function>
		<function name="GetID" return="id">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt die ID eines Objekts zurück.</description>
		</function>
		<function name="GetMagicEnergy" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert den aktuellen Zauberenergiewert eines Objekts. pObj Null bei lokalem Aufruf.</description>
		</function>
		<function name="GetName" return="string">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="idDef" type="id" />
			</parameters>
			<description>Gibt den Namen eines Objekts oder einer Objektdefinition zurück. Hat das Objekt keinen eigenen Namen, wird der Name der Definition zurückgegeben.</description>
		</function>
		<function name="GetRank" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die Rang-Nummer von pObj. 0 ist ein unbeförderter Clonk. *pObj ist Null bei lokalem Aufruf.</description>
		</function>
		<function name="Incinerate" return="bool">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Zündet das übergebene Objekt an. In dem jeweiligen Objekt wird ggf. Incineration() aufgerufen</description>
		</function>
		<function name="Object" return="object">
			<parameters>
				<parameter name="iObj" type="int" />
			</parameters>
			<description>Wandelt eine Objektnummer in einen Objektpointer um.</description>
		</function>
		<function name="ObjectDistance" return="int">
			<parameters>
				<parameter name="pObj2" type="object" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die Distanz zwischen zwei Objekten. Ist pObj 0, Wird die Distanz zwischen dem aufrufenden Objekt und pObj2 gemessen.</description>
		</function>
		<function name="ObjectNumber" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Bestimmt die Nummer eines Objekts. Diese Nummer ist eindeutig und kann mittels der Funktion <a href="../../../sdk/script/fn/Object.html">Object</a> in einen Objektpointer zurückverwandelt werden.</description>
		</function>
		<function name="SetEntrance" return="int">
			<parameters>
				<parameter name="iStatus" type="int" />
			</parameters>
			<description>Ermöglicht bzw. verhindert das Betreten eines Gebäudes. Nur lokale Aufrufe.</description>
		</function>
		<function name="SetShape" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Ändert das interne Objektrechteck eines Objekts. Das Objektrechteck wird beispielsweise für Kollisionsabfragen verwendet. Dies hat keine Auswirkung auf die Darstellung des Objekts.</description>
		</function>
		<function name="ShakeObjects" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iRadius" type="int" />
			</parameters>
			<description>Schüttelt innerhalb eines kreisförmigen Bereiches alle Lebewesen durch. Dieses Verhalten ist vergleichbar mit <a href="../../../sdk/script/fn/Fling.html">Fling</a>()-Aufrufen mit kleinen Zufallswerten auf alle Objekte im Zielbereich.</description>
		</function>
		<function name="this" return="object">
			<parameters>
			</parameters>
			<description>Liefert einen Zeiger auf das Objekt, in dem der Script ausgeführt gerade wird.</description>
		</function>
		<function name="CastParticles" return="bool">
			<parameters>
				<parameter name="szName" type="string" />
				<parameter name="iAmount" type="int" />
				<parameter name="iLevel" type="int" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="a0" type="int" />
				<parameter name="a1" type="int" />
				<parameter name="b0" type="dword" />
				<parameter name="b1" type="dword" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Verschleudert iAmount Partikel vom angegebenen Typ. Die Zusatzparameter werden zufällig zwischen a0/b0 und a1/b1 gesetzt.</description>
		</function>
		<function name="ClearParticles" return="bool">
			<parameters>
				<parameter name="szName" type="string" />
			</parameters>
			<description>Entfernt alle Partikel eines angegebenen Typs.</description>
		</function>
		<function name="CreateParticle" return="bool">
			<parameters>
				<parameter name="szName" type="string" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iXDir" type="int" />
				<parameter name="iYDir" type="int" />
				<parameter name="a" type="int" />
				<parameter name="b" type="dword" />
				<parameter name="pObj" type="object" />
				<parameter name="fBehind" type="bool" />
			</parameters>
			<description>Erzeugt ein Partikel. Das Partikel muss unter dem angegebenen Namen geladen sein. Für weitere Informationen siehe Partikeldokumentation.</description>
		</function>
		<function name="PushParticles" return="bool">
			<parameters>
				<parameter name="szName" type="string" />
				<parameter name="iAX" type="int" />
				<parameter name="iAY" type="int" />
			</parameters>
			<description>Beschleunigt alle Partikel eines angegebenen Typs in die angegebene Richtung.</description>
		</function>
		<function name="Call" return="any">
			<parameters>
				<parameter name="szFunction" type="string" />
			</parameters>
			<description>Ruft die lokale Funktion szFunction auf. Stattdessen sollte dieselbe Syntax wie bei engineinternen Funktionen genutzt werden.</description>
		</function>
		<function name="DefinitionCall" return="any">
			<parameters>
				<parameter name="idDef" type="id" />
				<parameter name="szFunction" type="string" />
			</parameters>
			<description>Ruft eine Funktion in einem Script ohne zugehöriges Objekt auf. Der <a href="../../../sdk/script/fn/this.html">this</a>()-Zeiger gibt in einem solchen Aufruf 0 zurück (Vergleichbar mit dem Szenarioscript).</description>
		</function>
		<function name="GameCall" return="any">
			<parameters>
				<parameter name="szFunction" type="string" />
			</parameters>
			<description>Ruft szFunction im Szenario-Script auf. Falls die Funktion nicht im Szenario-Script vorhanden ist, gibt die Funktion Null zurück und verursacht keine Fehlermeldung.</description>
		</function>
		<function name="ObjectCall" return="any">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="szFunction" type="string" />
			</parameters>
			<description>Ruft die öffentliche Funktion szFunction in pObj auf. Stattdessen sollte die neue Syntax [pObj]-&gt;[szFunction]() oder [pObj]-&gt;[idObj]::[szFunction]() genutzt werden.</description>
		</function>
		<function name="PrivateCall" return="any">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="szFunction" type="string" />
			</parameters>
			<description>Ruft die private, geschützte oder öffentliche Funktion szFunction in pObj auf. Es sollte überlegt werden, ob der Aufruf wirklich nötig ist.</description>
		</function>
		<function name="ProtectedCall" return="any">
			<parameters>
				<parameter name="pObj" type="object" />
				<parameter name="szFunction" type="string" />
			</parameters>
			<description>Ruft die geschützte oder öffentliche Funktion szFunction in pObj auf. Es sollte überlegt werden, ob der Aufruf wirklich nötig ist.</description>
		</function>
		<function name="C4Id" return="id">
			<parameters>
				<parameter name="szID" type="string" />
			</parameters>
			<description>Wandelt einen String in eine ID um.</description>
		</function>
		<function name="CreateArray" return="array">
			<parameters>
				<parameter name="Length" type="int" />
			</parameters>
			<description>Erzeugt ein neues, mit Nullen gefülltes Feld.</description>
		</function>
		<function name="Format" return="string">
			<parameters>
				<parameter name="szStr" type="string" />
			</parameters>
			<description>Setzt eine Zeichenkette aus verschiedenen Werten zusammen. Dabei wird szStr von vorne bis zum Ende nach mit '%' beginnenden Platzhaltern durchsucht, um diese dann durch die Parameter zu ersetzen.<br/>
      Das allgemeine Syntax für diese Platzhalter lautet:<br/>
      <code>%[Länge][.Präzision]Typ</code>
      Bis auf den Typ sind also alle Parameter optional. Der Typ gibt den Datentyp an, den der Parameter hat. Möglich sind folgende Werte:
      <table>
<tr>
<th>Typ</th>
<th>Bedeutung</th>
</tr>
<tr>
<td>d</td>
<td>Ganzzahl (int)</td>
</tr>
<tr class="dark">
<td>x</td>
<td>Ganzzahl (int), hexadezimale Ausgabe (0123456789abcdef)</td>
</tr>
<tr>
<td>X</td>
<td>Ganzzahl (int), hexadezimale Ausgabe (0123456789ABCDEF)</td>
</tr>
<tr class="dark">
<td>i</td>
<td>id (Bei IDs funktionieren die restlichen Parameter wie Länge und Präzision nicht!)</td>
</tr>
<tr>
<td>s</td>
<td>Zeichenkette</td>
</tr>
<tr class="dark">
<td>v</td>
<td>Beliebig. Vor allem nützlich zur Fehlersuche.</td>
</tr>
</table>
      Länge gibt eine Minimallänge an. Wenn der Wert kürzer ist, wird er rechtsbündig ausgerichtet und mit Leerzeichen aufgefüllt. Wird vor die Länge eine '0' gestellt, wird mit Nullen statt Leerzeichen aufgefüllt.<br/>
      <br/>
      Das Präzisionsfeld verhält sich je nach dem Parametertyp: Bei Ganzzahlen (d) gibt es die Minimalzahl der auszugebenden Zahlen an (der Rest wird mit Nullen aufgefüllt), während es bei Zeichenketten (s) die Maximalzahl der auszugebenden Zeichen angibt.<br/>
    </description>
		</function>
		<function name="GetChar" return="int">
			<parameters>
				<parameter name="szText" type="string" />
				<parameter name="iIndex" type="int" />
			</parameters>
			<description>Ermittelt den Ascii-Zeichencode eines indizierten Zeichens einer Zeichenkette.</description>
		</function>
		<function name="GetLength" return="int">
			<parameters>
				<parameter name="szText" type="any" />
			</parameters>
			<description>Ermittelt die Länge einer Zeichenkette oder eines Felds.</description>
		</function>
		<function name="SEqual" return="bool">
			<parameters>
				<parameter name="szStr1" type="string" />
				<parameter name="szStr2" type="string" />
			</parameters>
			<description>Vergleicht zwei Zeichenketten, und gibt zurück, ob sie gleich sind. Dieser Vergleich beachtet Groß-/Kleinschreibung, und entfernt keine vorangehenden oder nachfolgenden Leerzeichen.</description>
		</function>
		<function name="SetLength" return="int">
			<parameters>
				<parameter name="aResize" type="array" />
				<parameter name="iSize" type="int" />
			</parameters>
			<description>Verändert die Länge eines Felds auf den angegebenen Wert. Überzählige Elemente werden dabei gelöscht.</description>
		</function>
		<function name="WildcardMatch" return="string">
			<parameters>
				<parameter name="szStr" type="string" />
				<parameter name="szWildcard" type="string" />
			</parameters>
			<description>Prüft, ob zwei Strings gleich sind. Die Prüfung ist case-sensitiv, außerdem können Wildcards benutzt werden.
    </description>
		</function>
		<function name="Par" return="any">
			<parameters>
				<parameter name="iIndex" type="int" />
			</parameters>
			<description>Gibt einen der an die Funktion übergebenen Parameter zurück.</description>
		</function>
		<function name="ScriptCounter" return="int">
			<parameters>
			</parameters>
			<description>Gibt den derzeitigen Stand des Scriptzählers fürs Szenarioscript an.</description>
		</function>
		<function name="ScriptGo" return="bool">
			<parameters>
				<parameter name="fStart" type="bool" />
			</parameters>
			<description>Startet den Scriptzähler, bzw. hält ihn wieder an.</description>
		</function>
		<function name="eval" return="any">
			<parameters>
				<parameter name="strScript" type="string" />
			</parameters>
			<description>Führt einen als String übergebenen Script aus.</description>
		</function>
		<function name="goto" return="bool">
			<parameters>
				<parameter name="iCounter" type="int" />
			</parameters>
			<description>Setzt den Skriptzähler in Szenarioskripten auf den gewünschten Wert. Der Scriptzähler sorgt dafür, dass die ScriptXXX-Funktionen im Szenrienscript aufgerufen werden. Dies funktioniert nicht in Objektscripten, stattdessen sollten TimerCalls oder ActMaps mit StartCall/PhaseCall/EndCall verwendet werden.</description>
		</function>
		<function name="inherited" return="any">
			<parameters>
			</parameters>
			<description>Ruft die überladene Funktion auf. Funktionen überladen sich, wenn sie beide den gleichen Namen haben.</description>
		</function>
		<function name="GetPlrView" return="object">
			<parameters>
				<parameter name="iPlr" type="int" />
			</parameters>
			<description>Gibt das Objekt zurück, dem die Sicht eines Spielers folgt. Gibt 0 zurück, wenn kein
		      Spieler mit der angegebenen Nummer existiert oder die Spielersicht keinem per Script
		      gesetztem Objekt folgt (siehe <a href="../../../sdk/script/fn/GetPlrViewMode.html">GetPlrViewMode</a>).
    </description>
		</function>
		<function name="GetPlrViewMode" return="int">
			<parameters>
				<parameter name="iPlr" type="int" />
			</parameters>
			<description>Fragt den aktuellen Sichtmodus eines Spielers ab. Die Funktion gibt einen der folgenden Werte zurück:
          <ul>
            <li>0: Cursor - Die Sicht des Spielers folgt dem aktuell selektierten Clonk (siehe <a href="../../../sdk/script/fn/GetCursor.html">GetCursor</a>)</li>
            <li>1: Target - Die Sicht folgt einem anderen Objekt, welches durch den Befehl <a href="../../../sdk/script/fn/SetPlrView.html">SetPlrView</a> im Script gesetzt wurde. Siehe auch <a href="../../../sdk/script/fn/GetPlrView.html">GetPlrView</a>.</li>
            <li>2: Scroll - Der Spieler bewegt seine Sicht unabhängig von der Position eines Objekts. Dies geschieht, wenn der Spieler die Maus an den Rand seines Sichtbereichs zieht.</li>
          </ul>
    </description>
		</function>
		<function name="SetFilmView" return="int">
			<parameters>
				<parameter name="iToPlr" type="int" />
			</parameters>
			<description>Setzt die Sicht in Filmwiedergaben auf den angegebenen Spieler.</description>
		</function>
		<function name="SetFoW" return="bool">
			<parameters>
				<parameter name="fEnabled" type="bool" />
				<parameter name="iPlayer" type="int" />
			</parameters>
			<description>Schaltet den Nebel des Krieges für einen Spieler ein oder aus.</description>
		</function>
		<function name="SetPlrView" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Zentriert das Sichtfenster eines Spielers auf ein Objekt. Die Sicht folgt dem Objekt bis zum nächsten Spielerkommando.</description>
		</function>
		<function name="SetPlrViewRange" return="bool">
			<parameters>
				<parameter name="iRange" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt die Sichtweite eines Objekts.</description>
		</function>
		<function name="SetViewOffset" return="bool">
			<parameters>
				<parameter name="iPlayer" type="int" />
				<parameter name="iX" type="int" />
				<parameter name="iX" type="int" />
			</parameters>
			<description>Verschiebt die Sicht eines Spielers permanent um einen bestimmten Betrag. Ein erneuter Aufruf überschreibt die Verschiebung wieder, ein Aufruf mit 0-Koordinaten setzt die Sicht wieder in den Normalzustand zurück.</description>
		</function>
		<function name="CreateScriptPlayer" return="bool">
			<parameters>
				<parameter name="szName" type="string" />
				<parameter name="dwClr" type="int" />
				<parameter name="idTeam" type="int" />
				<parameter name="dwFlags" type="int" />
				<parameter name="idExtraData" type="id" />
			</parameters>
			<description>Initiiert den Beitritt eines Scriptspielers. Scriptspieler berhalten sich von der Scriptseite wie reguläre Spieler. Sie haben eine Stammcrew, ein Konto, Baupläne, Heimatbasismaterial, Verfeindungen, Teams, etc. Für diese Spieler wird jedoch regulär kein Sichtfenster geöffnet und sie lassen sich nicht von menschlichen Spielern steuern.<br/>Scriptspieler können zum Beispiel verwendet werden, um KI-Gegner wie z.B. Bots in Hazard zu realisieren.</description>
		</function>
		<function name="DoHomebaseMaterial" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="idID" type="id" />
				<parameter name="iChange" type="int" />
			</parameters>
			<description>Verändert die Kaufbarkeit von Objekten in der Heimatbasis.</description>
		</function>
		<function name="DoHomebaseProduction" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="idID" type="id" />
				<parameter name="iChange" type="int" />
			</parameters>
			<description>Verändert die Nachlieferung von kaufbaren Objekten in der Heimatbasis.</description>
		</function>
		<function name="DoScore" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="iChange" type="int" />
			</parameters>
			<description>Verändert den Punktewert eines Spielers. Dieser Wert ergibt zusammen mit dem Spielerwert (Wert aller Objekte im Besitz) die Gesamtpunktezahl des Spielers.</description>
		</function>
		<function name="EliminatePlayer" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
			</parameters>
			<description>Eliminiert einen Spieler. Die Runde gilt für diesen Spieler als verloren.</description>
		</function>
		<function name="GetBase" return="int">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Liefert die Nummer des Spielers, dessen Heimatbasis pObj ist. Rückgabewert -1 wenn pObj keine Heimatbasis ist.</description>
		</function>
		<function name="GetCrewExtraData" return="any">
			<parameters>
				<parameter name="pCrew" type="object" />
				<parameter name="strDataName" type="string" />
			</parameters>
			<description>Dieser Befehl fragt im Clonk in der Spielerdatei gespeicherten Extra-Daten ab, die per <a href="../../../sdk/script/fn/SetCrewExtraData.html">SetCrewExtraData</a> gesetzt wurden.</description>
		</function>
		<function name="GetHomebaseMaterial" return="int">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="id" type="id" />
				<parameter name="iIndex" type="int" />
				<parameter name="dwCategory" type="int" />
			</parameters>
			<description>Bei angegebenen id gibt die Funktion die Menge der Objekte zurück, die der Spieler in seiner Heimatbasis kaufen kann. iIndex und dwCategory werden hierbei ignoriert. Wird als id Null übergeben, liefert die Funktion den indizierten Objekttyp der entsprechenden Kategorie der kaufbaren Objekte des Spielers. Der Objekttyp (id) taucht in der Liste auf und wird zurückgeliefert, selbst wenn zur Zeit keine Objekte dieses Typs verfügbar sind.</description>
		</function>
		<function name="GetHomebaseProduction" return="int">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="id" type="id" />
				<parameter name="iIndex" type="int" />
				<parameter name="dwCategory" type="int" />
			</parameters>
			<description>Bei angegebenen id gibt die Funktion zurück, wie schnell die Menge der Objekte in der Heimatbasis des Spielers nachgeliefert wird. iIndex und dwCategory werden hierbei ignoriert. Wird als id Null übergeben, liefert die Funktion den indizierten Objekttyp der entsprechenden Kategorie der nachgelieferten Objekte des Spielers. Der Objekttyp (id) taucht in der Liste auf und wird zurückgeliefert, selbst wenn zur Zeit keine Objekte dieses Typs nachgeliefert werden.</description>
		</function>
		<function name="GetPlayerByIndex" return="int">
			<parameters>
				<parameter name="iIndex" type="int" />
				<parameter name="ePlayerType" type="int" />
			</parameters>
			<description>Gibt die indizierte Spielernummer zurück. Die Funktion garantiert für Werte zwischen 0 und GetPlayerCount()-1, dass eine gültige Spielernummer zurückgegeben wird (denn durch eliminierte Spieler und Neubeitritte kann es vorkommen, dass "Löcher" unbelegter Spielernummern in der Liste entstehen!). Damit ist es einfacher, eine Schleife zu schreiben, die alle Spielernummern durchgeht. Ab 4.9.6.0 CR.</description>
		</function>
		<function name="GetPlayerCount" return="int">
			<parameters>
				<parameter name="ePlayerType" type="int" />
			</parameters>
			<description>Liefert die Anzahl der Spieler, die momentan im Spiel sind.</description>
		</function>
		<function name="GetPlayerID" return="int">
			<parameters>
				<parameter name="iPlayerNumber" type="int" />
			</parameters>
			<description>Gibt die Spieler-ID eines beigetretenen Spielers zurück. Spieler-IDs werden von 1 hochgezählt, und - anders als Spielernummern - nicht wieder benutzt, nachdem ein Spieler eliminiert wurde. Jeder neu beigetetene Spieler hat also eine eigene ID.
    </description>
		</function>
		<function name="GetPlayerName" return="string">
			<parameters>
				<parameter name="iPlayer" type="int" />
			</parameters>
			<description>Liefert den Namen eines Spielers. Wenn die Spielernummer zu keinem gültigen Spieler gehört, wird 0 zurückgegeben. Dadurch kann diese Funktion auch benutzt werden, um zu ermitteln, ob eine Spielernummer gültig ist.</description>
		</function>
		<function name="GetPlayerTeam" return="int">
			<parameters>
				<parameter name="iPlr" type="int" />
			</parameters>
			<description>Liefert das Team eines Spielers. Hat der Spieler kein Team, wird 0 zurückgegeben.
    </description>
		</function>
		<function name="GetPlayerType" return="int">
			<parameters>
				<parameter name="iPlayer" type="int" />
			</parameters>
			<description>Liefert den Typ eines Spielers. Mögliche Typen sind:
                      <table>
<tr>
<th>Konstante</th>
<th>Wert</th>
<th>Beschreibung</th>
</tr>
<tr>
<td>C4PT_User</td>
<td>1</td>
<td>Vom Benutzer gesteuerter Spieler</td>
</tr>
<tr class="dark">
<td>C4PT_Script</td>
<td>2</td>
<td>Scriptgeesteuerter Spieler; zum Beispiel KI-Spieler.</td>
</tr>
</table>
                </description>
		</function>
		<function name="GetPlrColorDw" return="dword">
			<parameters>
				<parameter name="iPlr" type="int" />
			</parameters>
			<description>Fragt die Spielerfarbe ab. Die Spielerfarbe wird verwendet, um einige Besitzobjekte wie Clonks oder Flaggen, sowie Textnachrichten dieses Spielers einzufärben.</description>
		</function>
		<function name="GetPlrDownDouble" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
			</parameters>
			<description>Gibt zurück, ob der angegebene Spieler als letzte Aktion Doppel-Stopp
          gedrückt hatte. Mit dieser Funktion kann z.B. in ControlThrow überprüft werden,
          ob der Spieler das selektierte Objekt ablegen wollte, anstatt es zu werfen
          (Doppel-Stopp + Werfen).</description>
		</function>
		<function name="GetPlrExtraData" return="any">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="strDataName" type="string" />
			</parameters>
			<description>Dieser Befehl fragt im Spieler gespeicherten Extra-Daten ab, die per <a href="../../../sdk/script/fn/SetPlrExtraData.html">SetPlrExtraData</a> gesetzt wurden.</description>
		</function>
		<function name="GetPlrKnowledge" return="int">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="id" type="id" />
				<parameter name="iIndex" type="int" />
				<parameter name="dwCategory" type="int" />
			</parameters>
			<description>Bei angegebenen id gibt die Funktion TRUE zurück, wenn der Spieler den Bauplan des betreffenden herstellbaren Objekts besitzt. iIndex und dwCategory werden hierbei ignoriert. Wird als id Null übergeben, liefert die Funktion den indizierten Bauplan der entsprechenden Kategorie des Spielers.</description>
		</function>
		<function name="GetPlrMagic" return="int">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="id" type="id" />
				<parameter name="iIndex" type="int" />
			</parameters>
			<description>Stellt das Magiewissen eines bestimmten Spielers fest.</description>
		</function>
		<function name="GetScore" return="int">
			<parameters>
				<parameter name="iPlayer" type="int" />
			</parameters>
			<description>Liefert die Punkte die iPlayer hat.</description>
		</function>
		<function name="GetSelectCount" return="int">
			<parameters>
				<parameter name="iPlayer" type="int" />
			</parameters>
			<description>Liefert die Anzahl der ausgewählten Clonks von Spieler iPlayer.</description>
		</function>
		<function name="GetTaggedPlayerName" return="string">
			<parameters>
				<parameter name="iPlayer" type="int" />
			</parameters>
			<description>Liefert den Namen eines Spielers mit Markup in dessen Spielerfarbe. Wenn die Spielernummer zu keinem gültigen Spieler gehört, wird 0 zurückgegeben. Dadurch kann diese Funktion auch benutzt werden, um zu ermitteln, ob eine Spielernummer gültig ist.</description>
		</function>
		<function name="GetWealth" return="int">
			<parameters>
				<parameter name="iOwner" type="int" />
			</parameters>
			<description>Liefert das Vermögen von iOwner.</description>
		</function>
		<function name="Hostile" return="bool">
			<parameters>
				<parameter name="iPlr1" type="int" />
				<parameter name="iPlr2" type="int" />
				<parameter name="fCheckOneWayOnly" type="bool" />
			</parameters>
			<description>Prüft, ob zwei Spieler verfeindet sind. Dazu reicht es, wenn nur einer von beiden mit dem anderen Spieler verfeindet ist.</description>
		</function>
		<function name="SelectCrew" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="fSelect" type="bool" />
			</parameters>
			<description>Aktiviert bzw. deaktiviert ein Mannschaftsmitglied für die Steuerung.</description>
		</function>
		<function name="SetCrewExtraData" return="any">
			<parameters>
				<parameter name="pCrew" type="object" />
				<parameter name="strDataName" type="string" />
				<parameter name="Data" type="any" />
			</parameters>
			<description>Mithilfe dieses Befehls können beliebige, scriptdefinierte Werte unter einem gegebenen Namen im Clonk in der Spielerdatei gespeichert werden.
        Auf diese Weise kann man Daten über einen Clonk in einer Spielerdatei über Szenariogrenzen hinweg erhalten (z.B. für RPGs)
        Zurückgegeben wird (wenn erfolgreich) der gesetzte Wert.</description>
		</function>
		<function name="SetCursor" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="fNoSelectMark" type="bool" />
				<parameter name="fNoSelectArrow" type="bool" />
			</parameters>
			<description>Setzt die Auswahlmarkierung eines Spielers auf ein Zielobjekt und aktiviert dieses für die Steuerung.</description>
		</function>
		<function name="SetHostility" return="bool">
			<parameters>
				<parameter name="iPlr1" type="int" />
				<parameter name="iPlr2" type="int" />
				<parameter name="fHostile" type="bool" />
				<parameter name="fSilent" type="bool" />
				<parameter name="fNoCalls" type="bool" />
			</parameters>
			<description>Setzt das Bündnisverhältnis zwischen zwei Spielern einseitig.</description>
		</function>
		<function name="SetMaxPlayer" return="bool">
			<parameters>
				<parameter name="iNewCount" type="int" />
			</parameters>
			<description>Ändert die Maximalzahl der Spieler, die an der Runde teilnehmen können. Dieser Wert wirkt sich nur auf Neubeitritte aus; es werden keine vorhandenen Spieler eliminiert, um das Limit zu erfüllen.</description>
		</function>
		<function name="SetPlayerTeam" return="int">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="idNewTeam" type="int" />
				<parameter name="fDoNoCalls" type="bool" />
			</parameters>
			<description>Teilt einen Spieler einem neuen Team zu. Es wird geprüft, ob in dem neuen Team noch Platz ist (anhand des MaxPlayer-Werts).
    </description>
		</function>
		<function name="SetPlrExtraData" return="any">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="strDataName" type="string" />
				<parameter name="Data" type="any" />
			</parameters>
			<description>Mithilfe dieses Befehls können beliebige, scriptdefinierte Werte unter einem gegebenen Namen in der Spielerdatei gespeichert werden.
        Auf diese Weise kann man Daten über einen Spieler über Szenariogrenzen hinweg erhalten (z.B. für RPGs)
        Zurückgegeben wird (wenn erfolgreich) der gesetzte Wert.</description>
		</function>
		<function name="SetPlrKnowledge" return="int">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="idDef" type="id" />
				<parameter name="fRemove" type="bool" />
			</parameters>
			<description>Fügt einen Bauplan zum Wissen des Spielers hinzu (oder entfernt ihn bei angegebenem fRemove).</description>
		</function>
		<function name="SetPlrMagic" return="int">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="id" type="id" />
				<parameter name="Remove" type="bool" />
			</parameters>
			<description>Fügt einen Zauber der Liste der verfügbaren Zauber eines Spielers hinzu oder entfernt einen Zauber aus der Liste.</description>
		</function>
		<function name="SetPlrShowCommand" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="iCom" type="int" />
			</parameters>
			<description>Markiert für einen Spieler ein bestimmtes Kommando. Ist die Darstellung deaktiviert, so wird sie aktiviert.
		      Das markierte Kommando wird dann (so verfügbar) blinkend dargestellt.<br/><br/>
          Spielerkommandonummern:
          <table>
<tr>
<th>Nummer</th>
<th>Bedeutung</th>
</tr>
<tr>
<td>1</td>
<td>Links</td>
</tr>
<tr class="dark">
<td>2</td>
<td>Rechts</td>
</tr>
<tr>
<td>3</td>
<td>Springen</td>
</tr>
<tr class="dark">
<td>4</td>
<td>Stopp</td>
</tr>
<tr>
<td>5</td>
<td>Werfen</td>
</tr>
<tr class="dark">
<td>6</td>
<td>Graben</td>
</tr>
<tr>
<td>7</td>
<td>Special</td>
</tr>
<tr class="dark">
<td>8</td>
<td>Special 2</td>
</tr>
</table>
          Für Doppelkommandos (z.B. Doppel-Graben) muss jeweils 128 auf den Kommandowert aufaddiert werden.
	    </description>
		</function>
		<function name="SetPlrShowControl" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="szDefString" type="string" />
			</parameters>
			<description>Steuert die grafische Darstellung der Clonk-Steuerungstasten eines Spielers in seinem Sichtfenster.<br/><br/>
          Es können die folgenden Tasten angezeigt werden:
          <table>
<tr>
<th>Nummer</th>
<th>Bedeutung</th>
</tr>
<tr>
<td>0</td>
<td>Cursor Rechts</td>
</tr>
<tr class="dark">
<td>1</td>
<td>Cursor Umschalt</td>
</tr>
<tr>
<td>2</td>
<td>Cursor Links</td>
</tr>
<tr class="dark">
<td>3</td>
<td>Werfen</td>
</tr>
<tr>
<td>4</td>
<td>Springen</td>
</tr>
<tr class="dark">
<td>5</td>
<td>Graben</td>
</tr>
<tr>
<td>6</td>
<td>Links</td>
</tr>
<tr class="dark">
<td>7</td>
<td>Stopp</td>
</tr>
<tr>
<td>8</td>
<td>Rechts</td>
</tr>
<tr class="dark">
<td>9</td>
<td>Optionen</td>
</tr>
</table>
          Für jede Taste kann einzeln angegeben werden, ob und wie sie angezeigt werden soll. Dabei gibt es für jede Taste drei Optionen, die angegeben werden können:
          <ul>
          	<li>Ob sie angezeigt werden soll</li>
          	<li>Ob die Taste beschriftet sein soll</li>
          	<li>Ob die Beschriftung blinken soll</li>
          </ul>
          Entsprechend gibt es 3 Blocks von Optionen. Jeder dieser Blocks besteht dabei aus 10 Buchstaben, wobei "_" und " " für "Nein" und jeder andere Buchstabe für "Ja" steht (siehe Beispiel).
	    </description>
		</function>
		<function name="SetPlrShowControlPos" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="iPos" type="int" />
			</parameters>
			<description>Setzt die Position der grafischen Darstellung des Steuerungsblocks eines Spielers (siehe <a href="../../../sdk/script/fn/SetPlrShowControl.html">SetPlrShowControl</a>).</description>
		</function>
		<function name="SetWealth" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
				<parameter name="iValue" type="int" />
			</parameters>
			<description>Setzt das Vermögen eines Spielers.</description>
		</function>
		<function name="GainMissionAccess" return="bool">
			<parameters>
				<parameter name="szPassword" type="string" />
			</parameters>
			<description>Fügt ein Passwort in die Liste der Missionszugänge ein. Alle Spieler auf dem selben Computer können dann ein Szenario starten, welches in der Scenario.txt dieses Passwort als Voraussetzung enthält. Sinnvollerweise sollte jedes Szenario in einer Reihe von Missionen bei erfolgreichem Beenden der Runde das für die jeweils nächste Mission benötigte Passwort freigeben.</description>
		</function>
		<function name="GetMissionAccess" return="bool">
			<parameters>
				<parameter name="strMissionAccess" type="string" />
			</parameters>
			<description>Stellt fest und gibt zurück, ob der Spieler bereits das angegebene Missionszugangspasswort besitzt</description>
		</function>
		<function name="GetSystemTime" return="int">
			<parameters>
				<parameter name="iWhat" type="int" />
			</parameters>
			<description>Gibt die momentane Uhrzeit zurück.</description>
		</function>
		<function name="GetTime" return="int">
			<parameters>
			</parameters>
			<description>Gibt die Zeit seit Windowsstart in Millisekunden zurück. Kann zur genauen Zeitmessung
					verwendet werden.</description>
		</function>
		<function name="GetTeamByIndex" return="int">
			<parameters>
				<parameter name="iIndex" type="int" />
			</parameters>
			<description>Gibt die indizierte Teamnummer zurück. Die Funktion garantiert für Werte zwischen 0 und GetTeamCount()-1, dass eine gültige Teamnummer zurückgegeben wird (denn durch eliminierte Spieler und Neubeitritte kann es vorkommen, dass "Löcher" unbelegter Teamnummern in der Liste entstehen!). Damit ist es einfacher, eine Schleife zu schreiben, die alle Teamnummern durchgeht.
    </description>
		</function>
		<function name="GetTeamColor" return="dword">
			<parameters>
				<parameter name="iTeam" type="int" />
			</parameters>
			<description>Liefert die Farbe eines Teams.
    </description>
		</function>
		<function name="GetTeamCount" return="int">
			<parameters>
			</parameters>
			<description>Liefert die Anzahl der Teams, die momentan im Spiel sind.
    </description>
		</function>
		<function name="GetTeamName" return="string">
			<parameters>
				<parameter name="iTeam" type="int" />
			</parameters>
			<description>Liefert den Namen eines Teams.
    </description>
		</function>
		<function name="Bubble" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
			</parameters>
			<description>Erzeugt eine Luftblase.</description>
		</function>
		<function name="Smoke" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iLevel" type="int" />
			</parameters>
			<description>Erzeugt eine Rauchwolke an der angegebenen Position.</description>
		</function>
		<function name="GetClimate" return="int">
			<parameters>
			</parameters>
			<description>Liefert den aktuellen Klimawert. Dieser wird als Konstante zum durch TemperatureRange und Season entstehenden Wert hinzugezählt.</description>
		</function>
		<function name="GetSeason" return="int">
			<parameters>
			</parameters>
			<description>Liefert die aktuelle Jahreszeit. 0 ist Winter, 50 Sommer.</description>
		</function>
		<function name="GetTemperature" return="int">
			<parameters>
			</parameters>
			<description>Liefert die globale Temperatur. Werte abhängig von Klima und Jahreszeit zwischen +80 und -80.</description>
		</function>
		<function name="GetWind" return="int">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="fGlobal" type="bool" />
			</parameters>
			<description>Liefert die Windstärke und Richtung an der Position X, Y. Wird die Funktion aus einem Objekt heraus aufgerufen, so ist die Position relativ zur Objektposition. Wenn fGlobal=true, wird der globale Wind zurückgegeben.</description>
		</function>
		<function name="LaunchLightning" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iXAdvance" type="int" />
				<parameter name="iXRange" type="int" />
				<parameter name="iYAdvance" type="int" />
				<parameter name="iYRange" type="int" />
				<parameter name="fDoGamma" type="bool" />
			</parameters>
			<description>Erzeugt einen Blitz. Dieser bewegt sich von der Position (iX, iY) mit der angegebenen Geschwindigkeit fort. Dabei geben iXRange/iYRange an, wie sehr der Blitz von diesem vorgegegebenen Weg abweichen kann (mit iXRange = iYRange = 0 würde der Blitz schnurgerade verlaufen). iXRange/iYRange sind sozusagen ein Maß für die "Zackigkeit" eines Blitzes.<br/>
          Die Position muss auch bei lokalem Aufruf in globalen Koordinaten angegeben werden.</description>
		</function>
		<function name="SetSeason" return="bool">
			<parameters>
				<parameter name="iSeason" type="int" />
			</parameters>
			<description>Setzt die Jahreszeit.</description>
		</function>
		<function name="SetTemperature" return="bool">
			<parameters>
				<parameter name="iTemperature" type="int" />
			</parameters>
			<description>Setzt die globale Temperatur.</description>
		</function>
		<function name="SetWind" return="bool">
			<parameters>
				<parameter name="iWind" type="int" />
			</parameters>
			<description>Setzt die globale Windrichtung und -stärke.</description>
		</function>
		<function name="LaunchEarthquake" return="bool">
			<parameters>
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
			</parameters>
			<description>Erzeugt einen Erdbeben an angegebener Stelle. Koordinaten auch bei lokalem Aufruf global</description>
		</function>
		<function name="PlaceAnimal" return="object">
			<parameters>
				<parameter name="id" type="id" />
			</parameters>
			<description>Erzeugt ein Lebewesen vom angegebenen Typ in der Landschaft. Die Startposition bestimmt sich dabei aus dem Wert Placement im <a href="../../../sdk/definition/defcore.html">DefCore</a> des Lebewesens. Rückgabewert ist ein Zeiger auf das neu erzeugte Objekt.</description>
		</function>
		<function name="PlaceVegetation" return="object">
			<parameters>
				<parameter name="id" type="id" />
				<parameter name="iX" type="int" />
				<parameter name="iY" type="int" />
				<parameter name="iWdt" type="int" />
				<parameter name="iHgt" type="int" />
				<parameter name="iGrowth" type="int" />
			</parameters>
			<description>Platziert Vegetation im angegebenen Zielrechteck. Bei lokalen Aufrufen gelten die Koordinaten als Offset zur Mitte des aufrufenden Objekts. Rückgabewert ist ein Zeiger auf das neu erzeugte Objekt.</description>
		</function>
		<function name="AssignVar" return="int">
			<parameters>
				<parameter name="iVarIndex" type="int" />
				<parameter name="iValue" type="int" />
			</parameters>
			<description>Weist den Wert iValue einer beliebigen Thread-lokalen Variablen (ab 0) zu. Der Datentyp ist variabel. Thread-lokale Variablen gelten nur für die Dauer des aktuellen Funktionsaufrufes. AssignVar wurde durch <a href="../../../sdk/script/fn/SetVar.html">SetVar</a> abgelöst.</description>
		</function>
		<function name="Dec" return="int">
			<parameters>
				<parameter name="&amp; Var" type="int" />
			</parameters>
			<description>Erniedrigt die Variable Var um 1. Bitte den "--"-Operator verwenden.</description>
		</function>
		<function name="DecVar" return="int">
			<parameters>
				<parameter name="iVarNum" type="int" />
			</parameters>
			<description>Verringert die angegebene, threadlokale Variable. Neuere Scripte sollten den "--"-Operator und benannte Variablen benutzen.</description>
		</function>
		<function name="GetType" return="int">
			<parameters>
				<parameter name="Value" type="any" />
			</parameters>
			<description>Gibt den Typ des übergebenen Werts zurück.</description>
		</function>
		<function name="Global" return="int">
			<parameters>
				<parameter name="iVarIndex" type="int" />
			</parameters>
			<description>Liefert den Inhalt der globalen Variable iVarIndex.</description>
		</function>
		<function name="GlobalN" return="int">
			<parameters>
				<parameter name="szText" type="string" />
			</parameters>
			<description>Liefert den Inhalt der globalen Variable mit dem Namen szText. Per GlobalN("Name")=Wert; kann der Wert einer benannten globalen Variable gesetzt werden.</description>
		</function>
		<function name="Inc" return="int">
			<parameters>
				<parameter name="&amp; Var" type="int" />
			</parameters>
			<description>Erhöht die Variable Var um 1. Bitte den "++"-Operator verwenden.</description>
		</function>
		<function name="IncVar" return="int">
			<parameters>
				<parameter name="iVarNum" type="int" />
			</parameters>
			<description>Erhöht die angegebene, threadlokale Variable. Neuere Scripte sollten den "++"-Operator und benannte Variablen benutzen.</description>
		</function>
		<function name="IsRef" return="bool">
			<parameters>
				<parameter name="Value" type="any" />
			</parameters>
			<description>Prüft, ob Value eine Referenz ist.</description>
		</function>
		<function name="Local" return="reference">
			<parameters>
				<parameter name="iVarIndex" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt den Wert einer lokalen Variable (als Referenz) zurück. Jedes Objekt kann eine beliebige Anzahl lokaler Variablen besitzen. Diese werden für jedes Objekt dauerhaft gespeichert und gehen erst verloren, wenn das Objekt gelöscht wird. Eine lokale Variable hat bei Erstellung des Objekts immer den Wert 0.</description>
		</function>
		<function name="LocalN" return="reference">
			<parameters>
				<parameter name="szName" type="string" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Gibt eine Referenz auf eine Objektlokale Variable zurück. Diese Referenz kann zum Lesen und Schreiben benutzt werden.</description>
		</function>
		<function name="SetGlobal" return="int">
			<parameters>
				<parameter name="iVarIndex" type="int" />
				<parameter name="Value" type="any" />
			</parameters>
			<description>Setzt eine <a href="../../../sdk/script/fn/Global.html">Global</a>-Variable.</description>
		</function>
		<function name="SetLocal" return="int">
			<parameters>
				<parameter name="iVarIndex" type="int" />
				<parameter name="Value" type="any" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description>Setzt eine <a href="../../../sdk/script/fn/Local.html">Local</a>-Variable in einem Objekt (wenn nicht angegeben, wird die Variable in dem aufrufenden Objekt gesetzt).</description>
		</function>
		<function name="SetVar" return="int">
			<parameters>
				<parameter name="iVarIndex" type="int" />
				<parameter name="Value" type="any" />
			</parameters>
			<description>Weist den Wert iValue einer beliebigen Thread-lokalen Variablen (ab 0) zu. Der Datentyp ist variabel. Thread-lokale Variablen gelten nur für die Dauer des aktuellen Funktionsaufrufes. Numerierte Variablen wurden durch Variablen mit Namen abgelöst, sind aber für Arrays nützlich.</description>
		</function>
		<function name="Var" return="int">
			<parameters>
				<parameter name="iIndex" type="int" />
			</parameters>
			<description>Gibt eine Referenz auf eine funktionslokale Variable zurück. Diese Referenz kann zum Lesen und Schreiben benutzt werden.</description>
		</function>
		<function name="VarN" return="int">
			<parameters>
				<parameter name="szName" type="string" />
			</parameters>
			<description>Gibt eine Referenz auf eine funktionslokale Variable zurück. Diese Referenz kann zum Lesen und Schreiben benutzt werden.</description>
		</function>
		<function name="AbortMessageBoard" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="ActivateGameGoalMenu" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="AddEvaluationData" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="AddMessage" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="AdjustWalkRotation" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="AsyncRandom" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="BlastFree" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="BlastObject" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="CallMessageBoard" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="CastBackParticles" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="ClearLastPlrCom" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="DrawMatChunks" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="DrawModLandscape" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="DrawVolcanoBranch" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="ExecuteCommand" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="FatalError" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="FlameConsumeMaterial" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="GameCallEx" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="GetIndexOf" return="int">
			<parameters>
				<parameter name="iNeedle" type="int" />
				<parameter name="aHaystack" type="array" />
			</parameters>
			<description>Inoffizielle Dokumentation: Gibt -1 bei nicht finden zurück, ansonsten den Schlüssel.</description>
		</function>
		<function name="GetMatAdjust" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="GetObjectStatus" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="GetScoreboardData" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="GetTeamConfig" return="int">
			<parameters>
				<parameter name="iConfigValue" type="int" />
			</parameters>
			<description>Inoffizielle Dokumentation: Parameter ist eine TEAM_ Konstante</description>
		</function>
		<function name="IncinerateLandscape" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="InitScenarioPlayer" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="LoadScenarioSection" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="LocateFunc" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="ModulateColor" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="OnMessageBoardAnswer" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="PathFree2" return="bool">
			<parameters>
				<parameter name="iX1" type="int" />
				<parameter name="iY1" type="int" />
				<parameter name="iX2" type="int" />
				<parameter name="iY2" type="int" />
			</parameters>
			<description></description>
		</function>
		<function name="PauseGame" return="bool">
			<parameters>
				<parameter name="toggle" type="bool" />
			</parameters>
			<description></description>
		</function>
		<function name="PlayVideo" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="PlayerObjectCommand" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="RemoveUnusedTexMapEntries" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="Set" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="SetKiller" return="bool">
			<parameters>
				<parameter name="iNewKiller" type="int" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description></description>
		</function>
		<function name="SetMenuDecoration" return="bool">
			<parameters>
				<parameter name="idNewDeco" type="id" />
				<parameter name="pMenuObj" type="object" />
			</parameters>
			<description></description>
		</function>
		<function name="SetMenuTextProgress" return="bool">
			<parameters>
				<parameter name="iNewProgress" type="int" />
				<parameter name="pMenuObj" type="object" />
			</parameters>
			<description></description>
		</function>
		<function name="SetObjDrawTransform2" return="bool">
			<parameters>
				<parameter name="iA" type="int" />
				<parameter name="iB" type="int" />
				<parameter name="iC" type="int" />
				<parameter name="iD" type="int" />
				<parameter name="iE" type="id" />
				<parameter name="iF" type="int" />
				<parameter name="iG" type="int" />
				<parameter name="iH" type="int" />
				<parameter name="iI" type="int" />
				<parameter name="iOverlayID" type="int" />
			</parameters>
			<description></description>
		</function>
		<function name="SetObjectLayer" return="bool">
			<parameters>
				<parameter name="pNewLayer" type="object" />
				<parameter name="pObj" type="object" />
			</parameters>
			<description></description>
		</function>
		<function name="SetObjectStatus" return="bool">
			<parameters>
				<parameter name="iNewStatus" type="int" />
				<parameter name="pObj" type="object" />
				<parameter name="fClearPointers" type="bool" />
			</parameters>
			<description></description>
		</function>
		<function name="SetPreSend" return="bool">
			<parameters>
				<parameter name="iToVal" type="int" />
				<parameter name="pNewName" type="string" />
			</parameters>
			<description></description>
		</function>
		<function name="SetTextureIndex" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="SetViewCursor" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="StartCallTrace" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="SurrenderPlayer" return="bool">
			<parameters>
				<parameter name="iPlr" type="int" />
			</parameters>
			<description></description>
		</function>
		<function name="TestMessageBoard" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="GetLeague" return="string">
			<parameters>
				<parameter name="id" type="int" />
			</parameters>
			<description></description>
		</function>
		<function name="GetObjectLayer" return="object">
			<parameters>
				<parameter name="pObj" type="object" />
			</parameters>
			<description></description>
		</function>
		<function name="CastC4ID" return="id">
			<parameters>
				<parameter name="par1" type="any" />
			</parameters>
			<description></description>
		</function>
		<function name="_inherited" return="int">
			<parameters>
			</parameters>
		</function>
		<function name="CastInt" return="int">
			<parameters>
				<parameter name="par0" type="any" />
			</parameters>
		</function>
		<function name="GetPlrControlName" return="string">
			<parameters>
				<parameter name="player" type="int" />
				<parameter name="key" type="int" />
			</parameters>
			<description>One of those invisible functions...</description>
		</function>
		<function name="SetLeaguePerformance" return="bool">
			<parameters>
				<parameter name="par0" type="int" />
			</parameters>
		</function>
		<function name="GetViewCursor" return="object">
			<parameters>
				<parameter name="par0" type="int" />
			</parameters>
		</function>
		<function name="GetTexture" return="string">
			<parameters>
				<parameter name="par0" type="int" />
				<parameter name="par1" type="int" />
			</parameters>
		</function>
		<function name="FxFireStart" return="int">
			<parameters>
				<parameter name="par0" type="object" />
				<parameter name="par1" type="int" />
				<parameter name="par2" type="int" />
				<parameter name="par3" type="int" />
				<parameter name="par4" type="bool" />
				<parameter name="par5" type="object" />
			</parameters>
		</function>
		<function name="FxFireTimer" return="int">
			<parameters>
				<parameter name="par0" type="object" />
				<parameter name="par1" type="int" />
				<parameter name="par2" type="int" />
			</parameters>
		</function>
		<function name="FxFireStop" return="int">
			<parameters>
				<parameter name="par0" type="object" />
				<parameter name="par1" type="int" />
				<parameter name="par2" type="int" />
				<parameter name="par3" type="bool" />
			</parameters>
		</function>
		<function name="FxFireInfo" return="string">
			<parameters>
				<parameter name="par0" type="object" />
				<parameter name="par1" type="int" />
			</parameters>
		</function>
		<function name="~OnOwnerRemoved" return="bool">
			<parameters>
			</parameters>
		</function>
		<function name="GetScoreboardString" return="string">
			<parameters>
				<parameter name="par0" type="int" />
				<parameter name="par1" type="int" />
			</parameters>
		</function>
		<function name="SetNextMission" return="bool">
			<parameters>
				<parameter name="par0" type="string" />
				<parameter name="par1" type="string" />
				<parameter name="par2" type="string" />
			</parameters>
		</function>
		<function name="CastBool" return="any">
			<parameters>
				<parameter name="par0" type="any" />
				<parameter name="par1" type="any" />
				<parameter name="par2" type="any" />
				<parameter name="par3" type="any" />
				<parameter name="par4" type="any" />
				<parameter name="par5" type="any" />
				<parameter name="par6" type="any" />
				<parameter name="par7" type="any" />
				<parameter name="par8" type="any" />
				<parameter name="par9" type="any" />
			</parameters>
		</function>
		<function name="CastAny" return="any">
			<parameters>
				<parameter name="par0" type="any" />
				<parameter name="par1" type="any" />
				<parameter name="par2" type="any" />
				<parameter name="par3" type="any" />
				<parameter name="par4" type="any" />
				<parameter name="par5" type="any" />
				<parameter name="par6" type="any" />
				<parameter name="par7" type="any" />
				<parameter name="par8" type="any" />
				<parameter name="par9" type="any" />
			</parameters>
		</function>
	</functions>
	<variables>
		<variable name="C4D_All" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_StaticBack" type="any" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Structure" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Vehicle" type="any" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Living" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Object" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Goal" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Environment" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Knowledge" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Magic" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Rule" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Background" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Parallax" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_MouseSelect" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_Foreground" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_MouseIgnore" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_IgnoreFoW" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_GrabGet" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_GrabPut" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LinePower" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LineSource" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LineDrain" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LineLightning" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LineVolcano" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LineRope" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LineColored" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LineVertex" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_PowerInput" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_PowerOutput" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LiquidInput" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LiquidOutput" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_PowerGenerator" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_PowerConsumer" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_LiquidPump" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_ConnectRope" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4D_EnergyHolder" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4V_Any" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4V_Int" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4V_Bool" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4V_C4ID" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4V_C4Object" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4V_String" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4V_Array" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="COMD_None" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="COMD_Stop" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="COMD_Up" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="COMD_UpRight" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="COMD_Right" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="COMD_DownRight" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="COMD_Down" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="COMD_DownLeft" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="COMD_Left" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="COMD_UpLeft" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="DIR_Left" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="DIR_Right" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_CursorLeft" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_CursorToggle" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_CursorRight" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_Throw" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_Up" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_Dig" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_Left" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_Down" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_Right" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_Menu" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_Special" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CON_Special2" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Construct" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Grab" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Collectible" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_OnFire" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_HitSpeed1" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Fullcon" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Inflammable" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Chop" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Rotate" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Exclusive" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Entrance" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_HitSpeed2" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_HitSpeed3" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Collection" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Living" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_HitSpeed4" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_FightReady" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_LineConstruct" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Prey" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_AttractLightning" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_NotContained" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_CrewMember" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Edible" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_InLiquid" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_InSolid" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_InFree" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Available" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_PowerConsumer" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_PowerSupply" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Container" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="OCF_Alive" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VIS_All" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VIS_None" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VIS_Owner" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VIS_Allies" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VIS_Enemies" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VIS_Local" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VIS_God" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VIS_LayerToggle" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VIS_OverlayOnly" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4X_Ver1" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4X_Ver2" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4X_Ver3" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4X_Ver4" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4X_VerBuild" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="SkyPar_Keep" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Style_Normal" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Style_Context" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Style_Info" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Style_Dialog" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Style_EqualItemHeight" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Extra_None" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Extra_Components" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Extra_Value" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Extra_MagicValue" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Extra_Info" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Extra_ComponentsMagic" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Extra_LiveMagicValue" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Extra_ComponentsLiveMagic" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Add_ImgRank" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Add_ImgIndexed" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Add_ImgObjRank" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Add_ImgObject" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Add_ImgTextSpec" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Add_ImgColor" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Add_PassValue" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Add_ForceCount" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MN_Add_ForceNoDesc" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_OK" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Effect_Deny" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Effect_Annul" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Effect_AnnulDoCalls" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Execute_Kill" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Stop_Deny" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Start_Deny" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_Normal" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_Temp" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_TempAddForRemoval" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_RemoveClear" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_RemoveDeath" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CSPF_Invisible" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CSPF_NoEliminationCheck" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CSPF_NoScenarioInit" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CSPF_FixedAttributes" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4PT_Script" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4PT_User" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="MSG_Multiple" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="MSG_Bottom" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="MSG_NoLinebreak" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="TEAMID_New" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SECT_KeepEffects" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SECT_SaveObjects" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SECT_SaveLandscape" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4CMD_Enter_PushTarget" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4CMD_MoveTo_PushTarget" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4CMD_MoveTo_NoPosAdjust" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4CMD_SilentSub" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4CMD_Sub" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4CMD_SilentBase" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4CMD_Base" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="PHYS_StackTemporary" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="PHYS_Temporary" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="PHYS_Permanent" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="PHYS_Current" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SO_Func" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SO_Value" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SO_Mass" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SO_Speed" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SO_Random" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SO_Distance" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SO_Multiple" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4SO_Reverse" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_Layer" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_Func" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_Owner" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_AnyContainer" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_Container" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_ActionTarget" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_Action" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_Category" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_OCF" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_ID" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_Distance" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_OnLine" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_AtRect" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_AtPoint" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_InRect" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_Exclude" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_Or" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_And" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4FO_Not" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MSGCMDR_Identifier" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MSGCMDR_Plain" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4MSGCMDR_Escaped" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4OS_INACTIVE" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4OS_NORMAL" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4OS_DELETED" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="TEAM_TeamColors" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="TEAM_AutoGenerateTeams" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="TEAM_AllowTeamSwitch" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="TEAM_Dist" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="TEAM_AllowHostilityChange" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="TEAM_Active" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="TEAM_Custom" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="SBRD_Caption" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4M_Background" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4M_Liquid" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4M_SemiSolid" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4M_Solid" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="C4M_Vehicle" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VTX_SetPermanentUpd" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VTX_SetPermanent" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VTX_Friction" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VTX_CNAT" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VTX_Y" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="VTX_X" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFX_BLIT_Parent" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFX_BLIT_Custom" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFX_BLIT_ClrSfc_Mod2" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFX_BLIT_ClrSfc_OwnClr" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFX_BLIT_Mod2" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFX_BLIT_Additive" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_UI" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_Misc" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_ProcessTarget" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_Tools" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_Clothing" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFX_Overlay" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_MODE_ExtraGraphics" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_MODE_Object" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_MODE_IngamePicture" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_MODE_Picture" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_MODE_Action" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_MODE_Base" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="GFXOV_MODE_None" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_EngGetPunched" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_EngStruct" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_EngCorrosion" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_EngAsphyxiation" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_EngBaseRefresh" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_EngFire" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_EngObjHit" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_EngBlast" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_EngScript" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_Energy" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_DmgChop" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_DmgFire" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_DmgBlast" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="FX_Call_DmgScript" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CNAT_None" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CNAT_Left" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CNAT_Right" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CNAT_Top" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CNAT_Bottom" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CNAT_Center" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CNAT_MultiAttach" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="CNAT_NoCollision" type="int" const="true">
			<description>
				
			</description>
		</variable>
		<variable name="NO_OWNER" type="int" const="true">
			<description>
				Spielernummer: Kein Spieler. Diese Konstante kann als Besitzerangabe für diverse Funktionen wie <a href="../../../sdk/script/fn/CreateObject.html">CreateObject</a> oder <a href="../../../sdk/script/fn/FindObjectOwner.html">FindObjectOwner</a> verwendet werden, um einen neutralen Spieler anzugeben.
			</description>
		</variable>
		<variable name="C4D_SelectHomebase" type="int" const="true">
		</variable>
		<variable name="C4D_SelectVehicle" type="int" const="true">
		</variable>
		<variable name="C4D_SelectKnowledge" type="int" const="true">
		</variable>
		<variable name="C4D_SelectBuilding" type="int" const="true">
		</variable>
		<variable name="C4D_SelectAnimal" type="int" const="true">
		</variable>
		<variable name="C4D_SelectMaterial" type="int" const="true">
		</variable>
		<variable name="C4D_TradeLiving" type="int" const="true">
		</variable>
		<variable name="C4D_SelectInEarth" type="int" const="true">
		</variable>
		<variable name="C4D_SelectVegetation" type="int" const="true">
		</variable>
	</variables>
</script>
