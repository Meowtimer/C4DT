[Functions]
	[DebugLog]
		Description=


	[Abs]
		Description=Bildet den Absolutwert (Betrag), entfernt also das Vorzeichen des ersten Parameters.


	[Angle]
		Description=Liefert den Winkel, in dem sich der zweite Punkt vom ersten Punkt aus gesehen befindet. Der Winkel wird in Grad zurückgeliefert, 0∞ ist senkrecht oben. Alle Koordinaten sind global.


	[ArcCos]
		Description=Berechnet den Arcuscosinus von iVal/iRadius, also Result=arccos(iVal/iRadius). Dies entspricht cos(Result)=iVal/iRadius. Die Funktion wird benötigt, um Seitenverhältnisse zu einem Winkel umzurechnen. Für die meisten Fälle ist Angle() aber ausreichend und praktischer.


	[ArcSin]
		Description=Berechnet den Arcussinus von iVal/iRadius, also Result=arcsin(iVal/iRadius). Dies entspricht Sin(Result)=iVal/iRadius. Die Funktion wird benötigt, um Seitenverhältnisse zu einem Winkel umzurechnen. Für die meisten Fälle ist Angle() aber ausreichend und praktischer.


	[BitAnd]
		Description=Gibt (iVal1 & iVal2) zurück (Bitweises And). Sollte in neuen Scripts durch den Operator "&" ersetzt werden.


	[BoundBy]
		Description=Gibt iVal zurück, wenn der Wert innerhalb der Grenzen liegt (iVal >= iRange1 und iVal <= iRange2). Andernfalls wird die jeweils nächstliegende Grenze zurückgegeben.


	[Cos]
		Description=Liefert cos(iAngle) * iRadius.


	[Distance]
		Description=Berechnet den Abstand zwischen zwei Punkten. Die Funktion entspricht Sqrt((iX2-iX1)^2 + (iY2-iY1)^2;).


	[Div]
		Description=Führt eine Division durch, wobei eine Division durch 0 einfach 0 zurückgibt. Statt dieser Funktion sollte der Operator "/" verwendet werden.


	[Inside]
		Description=Gibt TRUE zurück, wenn iVal >= iRange1 und iVal <= iRange2 ist.


	[Max]
		Description=Gibt den gröﬂeren der beiden Werte zurück


	[Min]
		Description=Gibt den kleineren der beiden Werte zurück


	[Mod]
		Description=Gibt den Divisionsrest von iVal1 / iVal2 zurück.


	[Mul]
		Description=Multipliziert iVal1 mit iVal2 und gibt das Ergebnis zurück.


	[Pow]
		Description=Errechnet die Potenz von iVal1 und iVal2 ("X hoch Y")


	[Random]
		Description=Gibt eine Zufallszahl zwischen 0 und iMaxVal-1 zurück. Der zurückgegebene Wert kann jedoch nicht höher als 32767 sein.


	[Sin]
		Description=Liefert sin(iAngle) * iRadius.


	[Sqrt]
		Description=Zieht die Wurzel aus dem ersten Parameter. Ist der Parameter kleiner als 0, wird einfach 0 zurückgegeben.


	[Sub]
		Description=Subtrahiert die Summe von iVal2, 3 und 4 von iVal1 und gibt das Ergebnis zurück. Diese Funktion sollte in neuen Scripts durch den Operator "-" ersetzt werden.


	[Sum]
		Description=Bildet die Summe von iVal1, iVal2, iVal3 und iVal4 und gibt das Ergebnis zurück. Diese Funktion sollte in neuen Scripts durch den Operator "+" ersetzt werden.


	[AddEffect]
		Description=Erzeugt einen Effekt. Rückgabewert ist der Effektindex bei Erfolg, oder 0 bei Fehlschlag (weil der Effekt beispielsweise abgelehnt wurde). Wenn der Effekt von einem anderen Effekt aufgenommen wurde, der sich in demselben Aufruf entfernt, wird -2 zurückgegeben.


	[ChangeEffect]
		Description=Ändert den Namen eines Effektes, und damit auch die aufgerufenen Callback-Funktionen.


	[CheckEffect]
		Description=Führt Fx*Effect (und ggf. auch Fx*Add)-Callbacks in der entsprechenden Effektliste aus, ohne einen Effekt selber zu erstellen. Rückgabewert ist -1, wenn ein anderer Effekt den Effekt abgelehnt hat, und die Effektnummer des aufnehmenden Effektes, wenn der Effekt aufgenommen wurde.


	[EffectCall]
		Description=Führt einen Funktionsaufruf im angegebenen Effekt durch. Der Aufruf erhält den Befehlskontext des Effektes, und die ersten beiden Aufrufparameter sind immer Zielobjekt und Effektindex. Die weiteren Parameter können frei gewählt werden.


	[EffectVar]
		Description=Liefert eine Referenz auf eine effektlokale Variable. Diese kann zum Lesen und schreiben verwendet werden.


	[GetEffect]
		Description=Fragt Effektdaten ab, oder ermittelt, ob ein bstimmter Effekt vorhanden ist. Der Rückgabetyp richtet sich nach dem abgefragten Wert. Wurde der Effekt nicht gefunden, wird immer 0 zurückgegeben.


	[GetEffectCount]
		Description=Zählt die Effekte in einem Objekt oder globale Effekte.


	[RemoveEffect]
		Description=Löscht einen Effekt


	[Sound]
		Description=Spielt einen Sound ab. Die entsprechende Sounddatei muss in der Gruppendatei Sound.c4g, in der aktiven Szenariodatei oder in einer geladenen Objektdefinition vorhanden sein. Bei lokalen Aufrufen werden Geräusche abhängig von der aktuellen Position des aufrufenden Objekts abgespielt.


	[SoundLevel]
		Description=Spielt einen Soundeffekt permanent in einer Schleife ab, bis er wieder gestopp wird. Die Position ist global, solange pObj nicht angegeben ist; der Sound wird also überall auf der Karte gleichmäﬂig gehört.


	[EditCursor]
		Description=Liefert im Entwicklermodus der Engine das Objekt, welches sich im gerade unter dem Mauscursor befindet (Modus: Objekte auswählen und verschieben).


	[ReloadDef]
		Description=Aktualisiert eine Definition. Dieser Befehl kann im Entwicklermodus in der Konsole eingegeben werden, nachdem die Definition auf der Festplatte verändert wurde. Sie muss zuvor geladen gewesen sein.


	[ReloadParticle]
		Description=Aktualisiert eine Partikeldefinition. Dieser Befehl kann im Entwicklermodus in der Konsole eingegeben werden, nachdem die Definition auf der Festplatte verändert wurde. Sie muss zuvor geladen gewesen sein.


	[StartScriptProfiler]
		Description=Startet den Scriptprofiler.


	[StopScriptProfiler]
		Description=Stoppt den Scriptprofiler, und gibt das Ergebnis im Log aus.


	[GetActMapVal]
		Description=Fragt Aktionsdaten aus der ActMap.txt anhand deren dortigem Namen ab.


	[GetDefCoreVal]
		Description=Gibt einen Eigenschaftswert einer Objektdefinition nach seinem Namen in der DefCore.txt zurück.


	[GetMaterialVal]
		Description=Gibt einen Eigenschaftswert einer Materialdefinition nach seinem Namen in der Materialdatei zurück.


	[GetObjectInfoCoreVal]
		Description=Bei dem InfoCore handelt es sich um die Informationen eines CrewMembers, die in dem Spieler gespeichert werden (*.c4i). Dementsprechend gibt GetObjectInfoCoreVal einen Eigenschaftswert eines Crewmembers nach Namen in einer c4i-Datei zurück


	[GetObjectVal]
		Description=Gibt einen Eigenschaftswert eines Objekts nach seinem Namen in der Objects.txt zurück.


	[GetPlayerInfoCoreVal]
		Description=Gibt einen Eigenschaftswert aus der Player.txt eines Spielers zurück.


	[GetPlayerVal]
		Description=Fragt Eigenschaftswerte eines Spielers anhand dessen Namen ab, wie sie beim Speichern eines Spiels in die game.txt geschrieben werden


	[GetScenarioVal]
		Description=Fragt Eigenschaftswerte des Szenarios anhand dessen Namen/Sekion in der Scenario.txt ab


	[FrameCounter]
		Description=Gibt die Nummer des Frames zurück, in dem sich das Spiel befindet. Dieser Zähler beginnt beim Szenarienstart mit 0, und zählt dann mit ca. 37 Frames pro Sekunde hoch (abhängig von der Spielgeschwindigkeit)


	[GameOver]
		Description=Beendet die Runde. Die Runde wird für alle überlebenden Spieler als gewonnen gewertet.


	[GetGravity]
		Description=Liest die Schwerkraft (in Prozent) aus.


	[IsNetwork]
		Description=Prüft, ob das aktuelle Spiel ein Netzwerkspiel ist.


	[IsNewgfx]
		Description=Gibt zurück, ob das 32 Bit/16 Bit-Grafiksystem aktiviert ist. Bei Rückgabewert FALSE befindet sich die Engine im 8 Bit-Modus. Diese Funktion ist veraltet. Ab 4.9.5.0 CE läuft die Engine ausschlieﬂlich im 32 Bit/16 Bit-Modus.


	[ResetGamma]
		Description=Setzt eine Gammarampe auf den Normalwert zurück. Dies entspricht SetGamma(RGB(0,0,0), RGB(128,128,128), RGB(255,255,255), iRampIndex);. Für weitere Informationen siehe SetGamma.


	[SetGameSpeed]
		Description=Setzt die Spielgeschwindigkeit.


	[SetGamma]
		Description=Setzt eine Gammarampe. Mit Gammarampen kann global das Aussehen des gesamten Spieles gesteuert werden, indem jedem Farbkanal eine eigene Tabelle zugewiesen wird, aus der die neue Helligkeit abgelesen wird. Damit kann man zum Beispiel bestimmte Farben speziell hervorheben, alles abdunkeln oder erhellen oder sogar das Bild komplett invertieren.


	[SetGravity]
		Description=Setzt die Schwerkraft. Dabei entspricht die Standardgravitation (100%) einer Beschleunigung von 0.2 Pixeln pro Tick≤ (Zunahme der YDir um 2 pro Tick bei iPrecision=10)


	[GetSkyAdjust]
		Description=Gibt die mit SetSkyAdjust gesetzte Himmelsmodulation zurück. Für weitere Informationen siehe SetSkyAdjust


	[GetSkyColor]
		Description=Liefert den Farbwert des Himmels. Mit iRGB kann angegeben werden ob entweder Rot (iRGB ist 0), Grün (iRGB ist 1) oder Blau (iRGB ist 2) zurück gegeben werden soll. Mit iIndex wird festgelegt von welchem Palettenindex (0 - 19) der Wert zurück gegeben werden soll.


	[SetSkyAdjust]
		Description=Setzt die Himmelsmodulation. Die Himmelsfarben werden mit der angegebenen Farbe so verrechnet wie auch ColorByOwner-Grafiken.


	[SetSkyColor]
		Description=Verändert eine Himmelsfarben. Dabei wird im 8Bit-Modus der entsprechende Paletteneintrag geändert.


	[SetSkyFade]
		Description=Verändert die Himmelsfarben. Dabei werden im 8Bit-Modus die Palettenfarben 0 (Anfangsfarbe) bis 19 (Endfartbe) auf einen Verlauf zwischen den angegebenen Farbwerten gesetzt. Das macht natürlich nur dann Sinn, wenn der Himmel aus einem Farbverlauf besteht.


	[SetSkyParallax]
		Description=Verändert Parallaxität und Scrollgeschwindigkeit des Himmels.


	[SkyPar_Keep]
		Description=Konstante für SetSkyParallax.


	[AddMsgBoardCmd]
		Description=Erzeugt ein neues selbstdefiniertes Messageboard-Kommando. Dieses Kommando kann von jedem Spieler im Spiel durch Eingabe von "/[Kommandoname]" aufgerufen werden. In dem Fall wird der angegebene Script ausgeführt. Im Script kann "%s" dafür verwendet werden, eventuell angegebene Parameter einzubinden.


	[DoScoreboardShow]
		Description=Ändert den Sichtbarkeitszähler für das Scoreboard. Der intern verwaltete Zähler beginnt bei 0. Ist er gröﬂer als 0, wird das Scoreboard gezeigt. Ist er kleiner als 0, wird es verborgen. Ist er gleich 0, wird das Scoreboard nur dann gezeigt, wenn der Spieler die entsprechende Taste (normalweise Tab) drückt.    


	[ScoreboardCol]
		Description=Wandelt eine Objektdefinitions-ID in eine Zahl um, die als Spaltenidentifikator für SetScoreboardData verwendet werden kann. Diese Funktion ist dann interessant, wenn ein Objekt auf das Scoreboard zugreifen will, aber dabei sicher stellen muss, dass es nicht dieselbe ID wie ein anderes Objekt verwendet.    


	[SetScoreboardData]
		Description=Setzt Daten im Scoreboard. Das Scoreboard ist eine globale Tabelle, die Szenarien nutzen können um zum Beispiel den aktuellen Punktestand aller Spieler oder sonstige Rundendaten darzustellen. Es wird vom Spieler standardgemäﬂ mit der Taste Tab aufgerufen, kann aber auch per Script mit DoScoreboardShow forciert gezeigt oder verborgen werden. Das Scoreboard wird automatisch erstellt, sobald Daten darin gesetzt werden. Es wird automatisch gelöscht, wenn es auﬂer ‹berschriften keine Daten mehr enthält. Daten werden über einen Zeilen- und Spaltenindex adressiert. Werte mit gleichem Zeilenindex landen in der gleichen Zeile; Werte mit gleichem Spaltenindex in der gleichen Spalte. Existieren noch keine Daten für einen Zeilen- bzw. Spaltenindex, so wird die Zeile bzw. Spalte neu angelegt und unten bzw. rechts angehängt. Es ist also nicht entscheidend, welche Indizes verwendet werden, solange sie eindeutig sind. Es können z.B. Spielernummern, Spieler-IDs (siehe GetPlayerID) oder Team-IDs (siehe GetPlayerTeam) angegeben werden. Damit mehrere Objektdefinitionen wie zum Beispiel ein Todeszähler nicht dieselben IDs für Spalten verwenden, gibt es die Funktion ScoreboardCol, die aus einer ID einen eindeutige Spaltenindex generiert. Dabei ist natürlich trotzdem darauf zu achten, dass mehrere solcher Objekte die gleichen Zeilenadressierungen verwenden. Indizes müssen nicht fortlaufend sein; Zeilen und Spalten werden nach Reihenfolge des Hinzufügens und nicht nach Indizes sortiert. Für benutzerdefinierte Sortierungen (zum Beispiel absteigend nach Punkten für eine Bestenliste) dient die Funktion SortScoreboard.    


	[SortScoreboard]
		Description=Sortiert die Zeilen des Scoreboards nach den Extradaten einer Spalte. Wenn zwei Einträge in dieser Spalte die gleichen Werte besitzen, wird nicht umsortiert. So kann durch sukzessive Aufrufe dieser Funktion nach mehreren Spalten sortiert werden.    


	[ExtractLiquid]
		Description=Saugt ein Pixel Flüssigkeit an der angegebenen Position ab. Zurückgegeben wird die Materialnummer des abgesogenen Materials; bei Misserfolg -1.


	[ExtractMaterialAmount]
		Description=Extrahiert eine bestimmte Menge des gleichen Materials an einer Stelle. Zurückgegeben wird die tatsächlich erfolgreich extrahierte Materialmenge.


	[GBackLiquid]
		Description=Überprüft ob sich an angegebener Position in der Landschaft Flüssigkeit befindet.


	[GBackSemiSolid]
		Description=Überprüft ob sich an angegebener Position in der Landschaft feste Materie oder Flüssigkeit befindet. Also alles auﬂer Himmel und Tunnel.


	[GBackSky]
		Description=Überprüft ob sich an angegebener Position in der Landschaft Himmel befindet.


	[GBackSolid]
		Description=Überprüft ob sich an angegebener Position in der Landschaft feste Materie befindet. Also alles wo Objekte nicht durchkönnen.


	[GetMaterial]
		Description=Fragt das Material an einer bestimmten Stelle der Landschaft ab. Der zurückgegebene Wert ist ein Materialindex, der mit anderen Indizes zum Beispiel über die Funktion Material() verglichen werden kann. Für Himmel gibt die Funktion -1 zurück.


	[GetMaterialColor]
		Description=Ermittelt die Farbe eines Materials.


	[GetMaterialCount]
		Description=Liefert die in der Landschaft vorhandene Menge des angegebenen Materials.


	[InsertMaterial]
		Description=Fügt ein Materialpixel an der angegebenen Position in der angegebenen Geschwindigkeit ein.


	[Material]
		Description=Gibt den Index eines Materials anhand seines Namens zurück. Dieser Index wird in den meisten materialbezogenen Funktionen verwendet.


	[MaterialName]
		Description=Gibt den (internen, englischen) Namen eines Materials zurück.


	[SetMaterialColor]
		Description=Setzt die Farben eines Materials in der Palette. Dadurch werden alle Vorkommen dieses Materials auf der Karte in der neuen Farbe dargestellt.


	[CastPXS]
		Description=Verschleudert namentlich angegebene Materialpixel an angegebener Position. Bei einem lokalen Aufruf gelten die Koordinaten als Offset zum aufrufenden Objekt.


	[DigFree]
		Description=Gräbt ein kreisrundes Loch in halbfesten Materialien.


	[DigFreeRect]
		Description=Gräbt ein rechteckiges Loch in halbfesten Materialien.


	[DrawDefMap]
		Description=Zeichnet eine dynamische Zufallskarte innerhalb eines Bereichs. Dazu wird die angegebene Karte in der Landscape.txt gesucht.


	[DrawMap]
		Description=Zeichnet eine dynamische Zufallskarte innerhalb eines Bereichs. Dazu wird derselbe Generator benutzt, der auch die Karten der Landscape.txt zeichnet.


	[DrawMaterialQuad]
		Description=Zeichnet ein viereckiges Polygon im angegebenen Material mit der angegebenen Textur. Wenn keine Textur angegeben ist, wird Smooth angenommen.


	[FindConstructionSite]
		Description=Sucht einen Bauplatz für ein Gebäude, ausgehend von Var(iVarNumX)/Var(iVarNumY). Wenn ein Bauplatz gefunden wird, wird er in den entsprechenden Variablen abgelegt, und es wird TRUE zurückgegeben. Ansonsten ist der Rückgabewert FALSE.


	[FreeRect]
		Description=Entfernt alle Materialien innerhalb des angegebenen Rechtecks. Die Koordinaten sind immer global, und der untere und rechte Rand des Rechtecks zählen nicht mit dazu.


	[GetPathLength]
		Description=Sucht mittels des auch für die Clonk-Wegfindung benutzten Algorithmus einen Weg zwischen zwei Punkten der Landschaft und gibt dessen Länge zurück. Wurde kein Weg gefunden, gibt die Funktion 0 zurück.


	[InLiquid]
		Description=Gibt TRUE zurück, wenn sich das Objekt in einer Flüssigkeit befindet.


	[LandscapeHeight]
		Description=Gibt die Höhe der Landschaft in Pixel zurück.


	[LandscapeWidth]
		Description=Gibt die Breite der Landschaft in Pixel zurück.


	[PathFree]
		Description=Gibt zurück, ob der Weg zwischen den beiden angegebenen Punkten in der Landschaft frei ist, d.h., ob sich keine festen Materialien auf der Verbindungslinie zwischen den Punkten befinden.


	[SetClimate]
		Description=Setzt das Klima (Durchschnittstemperatur).


	[SetLandscapePixel]
		Description=Färbt ein Pixel in der Landschaft ein. Diese Funktion ist nicht im 8Bit-Grafiksystem verfügbar.


	[SetMatAdjust]
		Description=Setzt die Materialmodulation. Die Materialfarben werden mit der angegebenen Farbe so verrechnet wie auch ColorByOwner-Grafiken.


	[ShakeFree]
		Description=Löst innerhalb eines kreisförmigen Bereiches halbfestes Material in der Landschaft. Für gelöstes Material wird neu geprüft, ob es in darunterliegendes Material fallen kann. Dadurch kann man zum Beispiel Höhlendecken einstürzen lassen.


	[And]
		Description=Gibt TRUE zurück, wenn beide Parameter ungleich Null sind (Logisches And). Sollte in neueren Scripts durch den Operator "&&" ersetzt werden.


	[Equal]
		Description=Gibt true zurück, wenn iVal1 == iVal2, false, wenn nicht.


	[GreaterThan]
		Description=Gibt True zurück wenn iVal1 gröﬂer als iVal2 ist.


	[LessThan]
		Description=Gibt TRUE zurück, wenn der erste übergebene Wert kleiner ist als der zweite (iValue1 < iValue2)


	[Not]
		Description=Gibt true zurück, wenn Value false ist, false, wenn Value true ist.


	[Or]
		Description=Gibt TRUE zurück, wenn einer der Parameter ungleich Null ist (Logisches Oder). Sollte in neueren Scripts durch den Operator "||" ersetzt werden.


	[Music]
		Description=Spielt ein Musikstück ab. Die entsprechende Datei muss in einer der aktiven Musikdateien vorhanden sein. Sind im ausgewählten Szenario Musikdateien vorhanden, gilt die Szenariodatei als aktive Musikdatei, andernfalls wird die globale Musikdatei Music.c4g genutzt. Bei erfolgreichem Aufruf dieser Funktion wird die Musikwiedergabe aktiviert, auch wenn sie in den Optionen des Menüsystems deaktiviert wurde.


	[MusicLevel]
		Description=Setzt die Lautstärke, mit der die Hintergrundmusik abgespielt wird (siehe Music).


	[SetPlayList]
		Description=Setzt die Liste der Musikstücke, die in zufälliger Reihenfolge abgespielt werden sollen (wenn die Musik aktiviert ist). Zurückgegeben wird die Anzahl der aktivierten Musikstücke (Im Netzwerk wird allerdings immer 0 zurückgegeben).


	[CustomMessage]
		Description=Gibt eine Nachricht aus.


	[Log]
		Description=Gibt einen Text im Messageboard am unteren Bildschirmrand aus. Die Parameter können über den C-Formatierungsstil in den Text eingebunden werden. Siehe dazu auch Format.


	[Message]
		Description=Zeigt eine Nachricht an. Diese kann nach dem C-Formatierungsstil formatiert werden (siehe Format)


	[PlayerMessage]
		Description=Gibt eine Nachricht nur im Viewport eines Spielers aus. Die Nachrichtenformatierung erfolgt analog zu Message.


	[PlrMessage]
		Description=Gibt eine Nachricht nur im Viewport eines Spielers aus. Die Nachrichtenformatierung erfolgt analog zu Message.


	[ActIdle]
		Description=Prüft, ob das Objekt eine Aktivität ausführt. Bei lokalem Aufruf kann pObj == 0 sein.


	[GetActTime]
		Description=Liefert den Zeitraum in Frames, die das angegebene Objekt bereits die aktuelle Aktivität ausgeführt hat.


	[GetAction]
		Description=Liefert den Namen der momentanen Aktivität eines Objekts zurück, "Idle", wenn das Objekt keine Aktivität ausführt.


	[GetActionTarget]
		Description=Liefert die aktuellen Aktivitätszielobjekte eines Objekts.


	[GetDir]
		Description=Liefert die aktuelle Richtung eines Objekts als DIR_x()-Wert.


	[GetPhase]
		Description=Liefert die Aktivitätsphase von *pObj. *pObj ist Null bei lokalem Aufruf.


	[GetProcedure]
		Description=Gibt die Prozedur der gegenwärtigen Aktivität eines Objekts zurück (z.B. FLOAT, ATTACH, etc.). Bei einer NONE-Prozedur oder keiner Aktivität wird 0 zurückgegeben.


	[ObjectSetAction]
		Description=Setzt die Aktivität des angegebenen Objekts. Siehe auch ActMap.txt.


	[SetAction]
		Description=Setzt die Aktivität des aufrufenden Objekts. Siehe auch ActMap.txt.


	[SetActionData]
		Description=Setzt den Zusatzparameter für die aktuell ausgeführte Aktivitäts-Prozedur. Die Auswirkung dieses Parameters hängt von der gesetzten Prozedur ab. Siehe dazu auch ActMap-Prozeduren.


	[SetActionTargets]
		Description=Setzt die aktuellen Aktivitätszielobjekte eines Objekts. Die Auswirkung der Zielobjekte richtet sich nach der Prozedur der aktuell gesetzten Aktivität.


	[SetBridgeActionData]
		Description=Setzt Zusatzparameter für eine aktuell ausgeführte BRIDGE-Prozedur.


	[SetDir]
		Description=Setzt die Richtung eines Objekts.


	[SetPhase]
		Description=Setzt die Aktivitätsphase eines Objekts.


	[Fling]
		Description=Verschleudert pObj in die angegebene Richtung. Diese Funktion ist für Lebewesen konzipiert, da sie die entsprechenden Aktivitäten setzt.


	[GetComDir]
		Description=Liefert die aktuelle Befehlsrichtung eines Objekts. Diese gibt die momentane, beabsichtigte Bewegungsrichtung an. Die Auswirkung dieser Richtung hängt von der Prozedur der aktuellen Aktivität ab.


	[GetR]
		Description=Liefert die Rotation in Grad von *pObj. Der Rückgabewert liegt zwischen -180∞ und 180∞. 0∞ ist der Normalzustand.


	[GetRDir]
		Description=Liefert die Rotations-Geschwindigkeit von pObj.


	[GetXDir]
		Description=Liefert die Geschwindigkeit in X-Richtung von pObj.


	[GetYDir]
		Description=Liefert die Geschwindigkeit in Y-Richtung von pObj.


	[Jump]
		Description=Veranlasst das Objekt dazu, zu springen. Dabei gelten sämtliche Beschränkungen, die auch bei Ansteuerung über die Tastatur gelten: Das Objekt kann nur springen, wenn es gerade steht (seine Action die Procedure "WALK" hat). Im Wasser wird die Action "Dive" aktiviert. Die Funktion gibt zurück, ob die Aktion erfolgreich durchgeführt wurde.          


	[SetComDir]
		Description=Setzt die Befehlsrichtung eines Objekts (siehe GetComDir)


	[SetR]
		Description=Setzt die Drehung eines Objekts.


	[SetRDir]
		Description=Setzt die Drehungsgeschwindigkeit eines Objekts.


	[SetXDir]
		Description=Setzt die horizontale Geschwindigkeit eines Objekts.


	[SetYDir]
		Description=Setzt die vertikale Geschwindigkeit eines Objekts.


	[SimFlight]
		Description=Simuliert die Bewegung eines freien Falles mit Anfangsgeschwindigkeit in die angegebene Richtung. Wenn die simulierte Bewegung ein Material mit der gewünschten Dichte durchläuft, gibt diese Funktion true zurück, ansonsten false. Bei true wird die X- und Y-Position des Aufpralls in den angegebenen Variablen für iX und iY gespeichert, die Aufprallgeschwindigkeit in den angegebenen Variablen fü iXDir und iYDir. Siehe dazu Referenzen.


	[AddCommand]
		Description=Fügt ein Kommado in die Kommandoliste eines Objekts hinzu (an den Anfang, siehe auch AppendCommand). D.h. es wird ein Kommando hinzugefügt, welches das Objekt vor anderen vorher gegebenen Kommandos auszuführen hat (war vorher kein Kommando gesetzt, so entspricht AddCommand SetCommand) Für Kommando-Beschreibungen siehe SetCommand


	[AppendCommand]
		Description=Fügt ein Kommando der Kommandoliste eines Objekts am Ende hinzu. Das Objekt wird also das zuerst gegebene Kommando ausführen und sich danach automatisch dem mit AppendCommand hinzugefügten widmen. Für Kommando-Beschreibungen siehe SetCommand Bemerkung: Mit AppendCommand hinzugefügte Befehle werden nicht an gesteuerte Fahrzeuge weitergeleitet (siehe VehicleControl)


	[FinishCommand]
		Description=Beendet ein Kommado in der Kommandoliste eines Objekts.


	[GetCommand]
		Description=Gibt Informationen über ein Kommando eines Objekts zurück. Führt das Objekt momentan keine Aktion aus, so wird (bei jedem Wert von iElement) 0 zurückgegeben.


	[SetCommand]
		Description=Gibt einem Objekt ein Kommando, welches dieses selbstständig (ggf. durch automatische Wegfindung) auszuführen versucht.    


	[GetClrModulation]
		Description=Fragt die Farbmodulation eines Objekts ab. Diese ist ein Farbwert, der multiplikativ (oder auch additiv, bei entsprechend aktiviertem  BlitMode in der DefCore) aufgerechnet wird. Für weitere Hinweise siehe auch SetClrModulation().


	[GetColor]
		Description=Fragt den indizierten Farbwert eines Objekts ab, nach dem die ColorByOwner-Flächern eingefärbt sind. Dieser konnte beispielsweise durch SetOwner oder SetColor gesetzt worden sein.


	[GetColorDw]
		Description=Fragt den RGB-Farbwert der Färbung der ColorByOwner-Flächen eines Objekts ab. Diese werden beispielsweise durch SetOwner, SetColor oder SetColorDw gesetzt.


	[GetObjectBlitMode]
		Description=Liefert den aktuellen Zeichenmodus eines Objekts.


	[GetPortrait]
		Description=Frägt Name oder ID des Portraits eines Crew-Mitglieds ab.


	[GetUnusedOverlayID]
		Description=Gibt eine ungenutzte Overlay-ID zurück. Es wird der erste freie Overlay nach iBaseIndex zurückgegeben.


	[SetClrModulation]
		Description=Ändert die Farbmodulation eines Objekts. Diese ist ein Farbwert, der multiplikativ aufgerechnet wird. Bei RGB(255,0,0) würden also nur die Rotanteile der Grafik gezeichnet werden. RGBa(255,255,255,128) würde die Grafik halbtransparent machen (sofern Alphaaddition nicht in den Grafikoptionen deaktiviert ist).


	[SetColor]
		Description=Setzt die ColorByOwner-Färbung eines Objekts. Dieser Aufruf entspricht dem Setzen eines neuen Besitzers mit SetOwner bei einem Spieler mit der Spielerfarbe iColor.


	[SetColorDw]
		Description=Setzt die ColorByOwner-Färbung eines Objekts. Dieser Aufruf entspricht dem Setzen eines neuen Besitzers mit SetOwner bei einem Spieler mit der Spielerfarbe dwNewColor.


	[SetGraphics]
		Description=Ändert die Grafik eines Objekts. Diese beeinflusst die Darstellung des betreffenden Objekts überall im Spiel: In der Landschaft, im Menü oder auf Maussteuerungssymbolen.


	[SetObjDrawTransform]
		Description=Transformiert die Grafik des angegebenen Objektes.


	[SetObjectBlitMode]
		Description=Ändert den Zeichenmodus für eine Objekts. Die möglichen Werte entsprechen denen des DefCore-Flags BlitMode (siehe Anmerkung). Die Funktion gibt jeweils den vorher gesetzten Blitmodus zurück.


	[SetPicture]
		Description=Ändert die Repräsentativgrafik eines Objekts auf ein neues Zielrechteck der aktuell benutzten Grafik. Die Repräsentativgrafik wird beispielsweise im Menü oder der Inventarliste des ausgewählten Clonks verwendet. Siehe auch Eintrag Picture in der DefCore.txt.


	[SetPortrait]
		Description=Ändert das Portrait eines Crew-Mitglieds während des Spiels.


	[Buy]
		Description=Kauft ein Objekt für iForPlr, und zieht iPayPlr Geld ab. Wenn dieser nicht genug Geld oder das Objekt nicht im Heimatbasismaterial hat, wird der Vorgang nicht ausgeführt.


	[CastObjects]
		Description=Verschleudert iNumber Objekte an angegebener Position mit einer Geschwindigkeit von iLevel. Bei einem lokalen Aufruf haben die erzeugten Objekte den selben Besitzer wie das aufrufende Objekt.


	[ComposeContents]
		Description=Erzeugt ein Objekt vom Typ id als Inhalt von pObj. Das Objekt wird aus seinen Komponenten zusammen gesetzt, die in pObj enthalten sein müssen. Andernfalls wird eine Meldung ausgegeben, welche Objekte noch benötigt werden. Auch ComposeContents produziert den Engine Objekt-Call BuildNeedsMaterial, durch den die Meldung über noch benötigtes Material ausgewertet und abgefangen werden kann.


	[CreateConstruction]
		Description=Sollte statt CreateObject benutzt werden, wenn ein Gebäude oder eine Baustelle erzeugt werden soll. Bei lokalen Aufrufen dieser Funktion wird die angegebene Position zu Offset-Koordinaten zum aufrufenden Objekt. Wenn fCheckSite 1 ist, wird die Baustelle vorher auf ihre Eignung überprüft. Ist die Position ungeeignet (z.B. durch unebenen Untergrund oder andere Gebäude), wird beim aufrufenden Objekt eine entsprechende Meldung ausgegeben und die Funktion gibt 0 zurück.


	[CreateContents]
		Description=Erzeugt ein Objekt vom Typ id als Inhalt von pObj.


	[CreateObject]
		Description=Erzeugt ein Objekt des angegebenen Typs an der angegebenen Position. iXOffset und iYOffset bestimmen die Position in absoluten Pixel-Koordinaten der Landschaft (Mitte Unterkante des Objekts). Bei lokalen Aufrufen dieser Funktion wird die angegebene Position zu Offset-Koordinaten zum aufrufenden Objekt.


	[Explode]
		Description=Lässt ein Objekt explodieren. Die Explosion beschädigt Landschaft und Objekte, und das Objekt wird mitsamt Inhalt vor der Explosion entfernt. Wenn sich das Objekt in einen anderen Objekt befindet, werden alle anderen Inhaltsobjekte und das enthaltende Objekt beschädigt. Als Verursacher des Schadens gilt der Besitzer des explodierenden Objekts.


	[RemoveObject]
		Description=Entfernt ein Objekt.


	[Sell]
		Description=Verkauft ein Objekt mitsamt Inhalt.


	[Split2Components]
		Description=Zerlegt ein Objekt in seine Bestandteile. Die Bestandteile werden in zufälliger Drehung und mit geringer Geschwindigkeit in zufälliger Richtung an der Stelle erzeugt, an der sich das Objekt befand. Das Objekt wird anschlieﬂend vernichtet. Wenn sich das Objekt in einem Behälter befand, werden auch die Komponenten nach der Erschaffung in den Behälter versetzt.


	[Collect]
		Description=Sammelt ein Objekt auf. Der Befehl führt dieselben Funktionen aus, als wäre das Objekt durch den normalen Collection-Bereich des Objekts eingesammelt worden (z.B. RejectCollect, Prüfung auf Flagge/Flagge abnehmbar, Hit-Aufruf bei OCF_HitSpeed2, usw.). Die einzigen Unterschiede sind, dass keine Prüfung der Position von pItem auf den Entrance-Bereich von pTarget/this() gemacht wird, und dass pItem nicht auf OCF_Carryable geprüft wird.Mit diesem Befehl lässt sich beispielsweise das Aufnehmen von Objekten aus Containern heraus realisieren. Wenn die Aufnahme fehlschlug (Beispielsweise durch den RejectCollect-Aufruf oder weil der Container voll war), gibt die Funktion 0 zurück. Ansonsten 1.


	[Contained]
		Description=Liefert das Objekt, in dem sich pObj befindet. Rückgabewert Null, wenn pObj sich im Freien befindet.


	[Contents]
		Description=Liefert das indizierte Objekt, das in pObj enthalten ist.


	[ContentsCount]
		Description=Liefert die Anzahl der Objekte vom Typ id, die in pObj enthalten sind.


	[GrabContents]
		Description=Entfernt sämtlichen Inhalt von *pObj, und gibt diesen dem aufrufenden Objekt.


	[ScrollContents]
		Description=Rotiert den Inhalt eines Objekts. Dabei wird immer genau ein Objekt weiter gescrollt (im Gegensatz zu ShiftContents). Es wird auﬂerdem kein ControlContents aufgerufen. Zurückgegeben wird ein Pointer auf das Objekt, das sich nach der Rotation am Anfang der Inhaltsliste befindet.


	[ShiftContents]
		Description=Sortiert die Inhaltsobjekte so um, dass das nächste Objekt mit anderer ID vorne liegt. Die häufigste Anwendung für diesen Befehl ist ein Inventarwechsel.


	[GetCategory]
		Description=Fragt die Objektkategorie eines Objekts ab. Die Objektkategorie wird normalerweise über die DefCore gesetzt, und danach höchstens in seltenen Fällen mit SetCategory geändert. Sie bestimmt das allgemeine Verhalten eines Objekts und dessen Platzierung. Eine mit GetCategory abgefragt Kategorie kann mit dem &-Operator gegen eine C4D_-Konstante geprüft werden.


	[SetCategory]
		Description=Ändert die Kategorie eines Objekts.


	[ComponentAll]
		Description=Prüft, ob ein Objekt nur aus einem Objekttyp besteht.


	[GetComponent]
		Description=Liefert Objektkomponenten.


	[SetComponent]
		Description=Setzt die Anzahl einer Komponente eines Objekts.


	[DeathAnnounce]
		Description=Gibt eine Botschaft a la "[name] ist von uns gegangen"  über dem aufrufenden Objekt aus.


	[DoBreath]
		Description=Verändert den Atemwert eines Objekts.


	[GetAlive]
		Description=Gibt zurück, ob das Objekt noch am Leben ist.


	[GetBreath]
		Description=Liefert den aktuellen Atemwert eines Objekts in Prozent. 100% stellen hierbei den maximalen Physical-Wert von 100000 dar. Siehe auch DefCore.txt Sektion [Physical]. pObj Null bei lokalem Aufruf.


	[Kill]
		Description=Tötet ein Objekt. Nur Lebewesen.


	[Punch]
		Description=Schlägt pObj.


	[SetAlive]
		Description=Legt fest, ob ein Objekt lebt.


	[CrewMember]
		Description=Liefert den Wert von "CrewMember" aus der DefCore von id.


	[DoCrewExp]
		Description=Gibt einem Clonk Erfahrungspunkte.


	[GetCaptain]
		Description=Liefert den Captain von iPlayer. Nur bei der Spielregel "Verlust Captain".


	[GetController]
		Description=Fragt ab, welcher Spieler ein Objekt zur Zeit kontrolliert bzw. zuletzt kontrolliert hat. Bei Mannschaftsmitgliedern ist dies normalerweise immer der Besitzer; bei Fahrzeugen der Controller des Clonks, der es zuletzt bedient (angefasst und geschoben/gezogen) hat. Objekte, die von Lebewesen aufgenommen werden, nehmen automatisch den Controller ihres Containers an. Beim Besitzerwechsel (siehe SetOwner())wird automatisch auch der Controller auf den neuen Besitzer geändert.


	[GetCrew]
		Description=Gibt ein Mannschaftsmitglied eines Spielers zurück.


	[GetCrewCount]
		Description=Liefert die Anzahl der Mannschaftsmitglieder eines Spielers zurück.


	[GetCrewEnabled]
		Description=Fragt ab, ob ein Mannschaftsmitglied gegenwärtig angewählt werden kann.


	[GetCursor]
		Description=Gibt den momentan kontrollierten Clonk eines Spielers zurück. Werden mehrere Clonks gelenkt, ist es bei iIndex=0 (oder weggelassen) immer das primär ausgewählte Mannschaftsmitglied. Also das, dem beispielsweise auch die Sicht folgt.


	[GetHiRank]
		Description=Liefert den höchstrangigen aktiven Clonk von iPlayer.


	[GrabObjectInfo]
		Description=‹berträgt die Infosektion von einem anderen Objekt zu pFrom bzw. dem aufrufenden Objekt. Die Infosektion enthält Namen, Rang, permantente Physicals, usw. Mit diesem Befehl lassen sich beispielsweise Wiederbelebungen realisieren, indem einfach beim Tod eines Clonks ein neuer erstellt und die Infosektion übertragen wird.


	[MakeCrewMember]
		Description=Fügt ein Objekt (z.B. einen Clonk) der Crew eines Spielers hinzu. Das Objekt muss die CrewMember-Eigenschaft in der DefCore gesetzt haben. Gibt 1 zurück, wenn das Objekt erfolgreich der Crew hinzugefügt wurde.


	[SetCrewEnabled]
		Description=Aktiviert oder deaktiviert Mannschaftsmitglieder. Deaktivierte Mannschaftsmitglieder können nicht mehr vom Spieler angewählt werden. So kann es auch passieren, dass ein Spieler zwar 0 Mannschaftsmitglieder zur Auswahl hat, aber trotzdem nicht eliminiert ist. Nur für Objekte, die auch wirklich zu einer Mannschaft gehören. Deaktivierte Mannschaftsmitglieder sind automatisch nicht mehr ausgewählt.


	[SetCrewStatus]
		Description=Fügt ein Objekt (z.B. einen Clonk) der Crew eines Spielers hinzu oder entfernt dieses aus der Crew. Das Objekt muss die CrewMember-Eigenschaft in der DefCore gesetzt haben.


	[UnselectCrew]
		Description=Wählt die gesamte Mannschaft eines Spieler ab. Nach dem Aufruf dieses Befehls sollte mit SelectCrew wieder ein Clonk angewählt werden.


	[AddMenuItem]
		Description=Fügt einen Menüeintrag hinzu.


	[ClearMenuItems]
		Description=Entfernt alle Einträge aus einem Menü.


	[CloseMenu]
		Description=Schlieﬂt das Menü eines Objekts.


	[CreateMenu]
		Description=Erzeugt ein benutzerdefiniertes Menü in pMenuObject. Menüeinträge müssen mit AddMenuItem hinzugefügt werden.


	[GetMenu]
		Description=Liefert die ID des Menüs, falls das Objekt ein Menü geöffnet hat. Normalerweise ist das die ID des Menüsymbols (idSymbol), wenn nicht bei CreateMenu explizit eine andere Menü-ID als idMenuID angegeben wurde. 0 bei keinem Menü oder bei keinem Symbol.


	[GetMenuSelection]
		Description=Ermittelt den gerade ausgewählten Menüeintrag des geöffneten Menüs eines Objekts.


	[SelectMenuItem]
		Description=Setzt die Auswahl in einem Menu.


	[SetMenuSize]
		Description=Ändert die Gröﬂe eines Objektmenüs, so dass die vorgegebene Anzahl an Menüeinträgen in Breite und Höhe hineinpassen.


	[ShowInfo]
		Description=Zeigt die Beschreibung eines Objekts in einem kleinen Informationsfenster (intern ein Menü) beim aufrufenden Objekt an.


	[GetOCF]
		Description=Liefert das Object-Character-Flag eines Objekts. Dieser Wert beschreibt den aktuellen Zustand des Objekts. Der Rückgabewert ist eine Bitmaske und kann mit BitAnd() mit einem OCF_x()-Wert verglichen werden.


	[Enter]
		Description=Versetzt ein Objekt in ein anderes hinein. Bei diesem Vorgang wird weder RejectCollect, noch Collection oder ActivateEntrance im Zielobjekt aufgerufen. Dafür aber RejectEntrance und Entrance im Objekt, das hineinversetzt werden soll.


	[Exit]
		Description=Versetzt ein Objekt aus seinem Behälter heraus, und setzt optional seine Geschwindigkeit.


	[GetX]
		Description=Liefert die X-Position von *pObj.


	[GetY]
		Description=Liefert die Y-Position von *pObj.


	[Resort]
		Description=Sortiert ein Objekt neu in die Objektliste ein.


	[ResortObject]
		Description=Sortiert ein Objekt neu in die Objektliste ein. Die Platzierung ergibt sich nach einer Platzierungsfunktion, die die Objektposition relativ zu jedem anderen Objekt in der Objektliste definieren sollte. Wenn das erste Objekt vor dem zweiten stehen sollte, muss die Funktion einen Wert kleiner Null zurückgeben. Ansonsten einen Wert gröﬂer oder gleich Null.


	[ResortObjects]
		Description=Sortiert die Objektliste teilweise oder komplett neu. Dafür wird ein einfacher Sortierungsalgorithmus angewandt, der immer wieder die angegebene Funktion aufruft, welche dann die Relation zweier Objekte zueinander zurückgeben muss. Die beiden Objekte werden als Par(0) und Par(1) übergeben. Wenn das erste Objekt vor dem zweiten stehen sollte, muss die Funktion einen Wert kleiner Null zurückgeben. Ansonsten einen Wert gröﬂer oder gleich Null.


	[SetObjectOrder]
		Description=Sorgt dafür, dass ein Objekt mit Sicherheit vor oder hinter einem anderen Objekt angeordnet ist. Dadurch lässt sich beispielsweise sicherstellen, dass sich ein Fahrstuhlkorb immer vor dem zugehörigen Fahrstuhl befindet.


	[SetPosition]
		Description=Verschiebt ein Objekt an die angegebene Position. Dabei wird das Objekt an die exakte Pixelposition gesetzt, und eventuelle, interne Verschiebungen um Pixelbruchteile werden verworfen.


	[GetVisibility]
		Description=Fragt die Sichtbarkeit eines Objekts ab. Siehe dazu auch SetVisibility.


	[SetVisibility]
		Description=Verändert die Sichtbarkeit eines Objekts. Objekte können für beliebige Gruppen sichtbar gemacht werden, indem für dwVisibility eine Bitmaske angegeben wird.		


	[ChangeDef]
		Description=Weist einem Objekt eine neue Definition zu.


	[CheckEnergyNeedChain]
		Description=Überprüft, ob ein an das angegebene Objekt angeschlossener Verbraucher Energie benötigt. Dabei werden auch indirekt (also über mehrere Leitungen über einen weiteren Verbraucher) angeschlossene Verbraucher überprüft.


	[DoCon]
		Description=Verändert die Fertigstellung eines Objekts. Die meisten Lebewesen und Bäume können dadurch vergröﬂert oder verkleinert werden. Gebäude können zu Baustellen zurückgesetzt und Baustellen vorwärts oder rückwärts gebaut werden. Sinkt die Fertigstellung eines Objekts auf oder unter 0, wird dieses gelöscht.    


	[DoDamage]
		Description=Verändert den Schadenswert eines Objekts. Bei iChange ungleich Null wird im Zielobjekt auﬂerdem die Funktion Damage aufgerufen. Bei lokalem Aufruf gilt der Besitzer des aufrufenden Objekts als Verursacher des Schadens.


	[DoEnergy]
		Description=Verändert die Energie eines Objekts. Die Energie entspricht bei Gebäuden der elektrischen Energie, und bei Lebewesen der Lebensenergie.


	[DoMagicEnergy]
		Description=Verändert den Magiewert eines Objekts. Jedoch wird die gewünschte Veränderung vorgabemäﬂig nur als ganze ausgeführt und daher auch nur, wenn dadurch nicht die Ober- bzw. Untergrenze (physische Fähigkeit des Clonks bzw. 0) überschritten wird. Wenn die Veränderung iChange nicht als ganze ausgeführt werden kann, gibt die Funktion FALSE zurück. Hierdurch kann mit einem einzelnen Funktionsaufruf gleichzeitig überprüft werden, ob eine Transaktion überhaupt möglich ist.


	[EnergyCheck]
		Description=Gibt zurück, ob der Energiewert eines Objekts gröﬂer oder gleich iEnergy ist. Wenn die Spielregel "Energiebedarf" nicht aktiviert ist, gibt diese Funktion immer TRUE zurück. Auﬂerdem werden Leitungen dazu motiviert, Energie hierhin zu transferieren.


	[Extinguish]
		Description=Löscht das Feuer eines brennenden Objekts.


	[FightWith]
		Description=Beginnt einen Zweikampf. Mit diesem Befehl können auch Clonks nicht verfeindeter Spieler einen Kampf beginnen. Beide Teilnehmer müssen OCF_FightReady sein.


	[GetCon]
		Description=Liefert die Fertigstellung eines Objekts in Prozent. Bei Baustellen ist dies die Fertigstellung, während es bei Tieren und Pflanzen die Gröﬂe angibt (Siehe StretchGrowth/OverSize in der DefCore)


	[GetContact]
		Description=Ermittelt, in welche Richtungen einzelne oder alle Vertices eines Objekts feste Landschaft berühren. Die Richtungen werden als Bitmaske von CNAT-Werten übergeben bzw. von der Funktion zurückgegeben.


	[GetDamage]
		Description=Fragt den Schadenswert eines Objekts ab.


	[GetDefBottom]
		Description=Fragt die Unterkante eines Objekts ab. Diese entspricht Y-Position + DefCore-OffsetY + DefCore-Height. Eine eventuelle Drehung wird hier nicht mit eingerechnet.


	[GetDesc]
		Description=Gibt die Beschreibung eines Objekts oder einer Objektdefinition zurück. Die Beschreibung wird in Objektdefinitionen in der Desc**.txt angegeben.


	[GetKiller]
		Description=Liefert den Spieler, der zuletzt Energieabzug an einem Objekt verursacht hat.


	[GetMass]
		Description=Liefert die Masse eines Objekts inklusive aller Inhaltsobjekte. Bei angegebenem idDef wird pObj ignoriert und stattdessen die Standardmasse der Objektdefinition zurückgegeben. Sind idDef und pObj 0, gilt das aufrufende Objekt als pObj.


	[GetNeededMatStr]
		Description=Liefert die noch benötigten Baumaterialien des Objekts


	[GetOwner]
		Description=Ermittelt den Besitzer eines Objekts.


	[GetPhysical]
		Description=Liefert die physischen Eigenschaften eines Objekts.


	[GetValue]
		Description=Gibt einen Objekt- oder Definitionswert zurück. Bei angegebenem idDef wird der Definitionswert zurückgegeben, ansonsten der Objektwert von pObj oder dem aufrufenden Objekt bei pObj=0.Ein Objektwert berechnet sich folgendermaﬂen: Bei angegebenem pObj wird zunächst geprüft, ob eine CalcValue-Funktion im Script des Objekttyps von pObj vorhanden ist, und gegebenenfalls ausgewertet. Ansonsten wird der Definitionswert (siehe nächster Absatz) verwendet. Unabhängig davon wird der Wert des Objekts immer der Fertigstellung (GetCon()/100) multipliziert. Tote Lebewesen (GetCategory()&OCF_Living() && !GetAlive()) haben immer den Wert 0.Der Definitionswert wird folgendermaﬂen ermittelt: Ist eine CalcDefValue-Funktion im Script vorhanden, wird diese ausgewertet. Ansonsten wird eine Wertüberladung aus der Scenario.txt verwendet. Ist diese ebenfalls nicht vorhanden, wird der in der DefCore angegebene Wert benutzt.


	[OnFire]
		Description=Gibt zurück, ob ein Objekt brennt.


	[ResetPhysical]
		Description=Setzt alle Physicals auf den Normalwert zurück. Für weitere Informationen siehe SetPhysical.


	[SetContactDensity]
		Description=Legt fest, welche Dichte ein Material haben muss, damit das Objekt mit diesem kollidiert. Standardmäﬂig liegt dieser Wert bei 50 (dichtes Material).


	[SetController]
		Description=Ändert den steuernden Spieler eines Objekts.


	[SetMass]
		Description=Ändert die Eigenmasse eines Objekts. Die Eigenmasse entspricht dem in der DefCore.txt angegebenen Wert unter [DefCore], Mass. Die tatsächliche Objektmasse ergibt sich durch Hinzurechnen der Masse aller enthaltenen Objekte.


	[SetName]
		Description=Ändert für eine Runde den Namen eines Objekts oder einer Definition.


	[SetOwner]
		Description=Ändert den Besitzer eines Objekts.


	[SetPhysical]
		Description=Ändert die physischen Eigenschaften eines Objekts. Hiermit können die in der Physical-Sektion der DefCore.txt angegebenen Werte temporär oder permanent angepasst werden.


	[SetSolidMask]
		Description=Setzt einen neuen, festen Bereich eines Objekts. Das Quellrechteck der Grafik gibt dabei an, welche Pixel im Rechteck fest werden sollen: Alle Pixel, die zu weniger als 50% transparent sind, werden fest. Siehe auch Eintrag SolidMask in der DefCore.txt.


	[SetTransferZone]
		Description=Setzt einen neuen Transferbereich für ein Objekt. Führt die Suche der Wegfindung durch einen Transferbereich (dieser gilt für die Wegfindung immer als komplett durchlaufbar), werden für den Clonk ControlTransfer-Aufrufe an das Script des Objekts aufgerufen. In diesen sollte mit Hilfe von Befehlen dafür gesorgt werden, dass der Clonk an seine Zielposition kommt.


	[Stuck]
		Description=Ermittelt, ob ein Objekt feststeckt, d.h., ob sich einer seiner Vertices in festem Material befindet.


	[TrainPhysical]
		Description=Erhöht den Wert der physischen Eigenschaft eines Objekts um den in iTrainBy angegebenen Wert. Mit diesem Aufruf werden sowohl die permanenten, als auch temporäre und temporär gestapelte Physicals trainiert. Dieser Befehl kann beispielsweise genutzt werden, um nach einem Zauber die Magiephysical zu trainieren.


	[Value]
		Description=Gibt einen Definitionswert zurück.


	[AnyContainer]
		Description=Wird an FindObject/FindObjectOwner übergeben, damit nur Objekte gefunden werden, die in einem anderen Objekt enthalten sind


	[FindBase]
		Description=Sucht eine Heimatbasis eines Spielers. Die Heimatbasis ist zumeist das Gebäude, auf dem eine Flagge weht.


	[FindContents]
		Description=Liefert das erste in einem Behälter enthaltene Objekt vom Typ idType.


	[FindObject]
		Description=Liefert das erste gefundene Objekt, das den angegebenen Suchkriterien entspricht. Sind iWdt und iHgt beide -1, so wird das nächstliegende Objekt gefunden. Sind sie beide 0, wird nur am Punkt iX/iY gesucht. Sind iX, iY, iWdt und iHgt alle 0, gilt als Suchrechteck die gesamte Karte (auch bei lokalen Aufrufen). Es müssen stets die Bedingungen aller Parameter erfüllt sein, die angegeben und nicht 0 sind.


	[FindObject2]
		Description=Gibt ein Objekt zurück, das die angegebenen Suchkriterien erfüllt. Die Suchkriterien werden mittels speziellen Kriteriums-Funktionen der Form "Find_*" angegeben.


	[FindObjectOwner]
		Description=Sucht Objekte nach ihrem Besitzer und anderen Kriterien, analog zu FindObject.


	[FindObjects]
		Description=Erstellt eine Liste von Objekten, auf die alle angegeben Suchkriterien zutreffen. Die Suchkriterien werden mittels speziellen Kriteriums-Funktionen der Form "Find_*" angegeben.


	[FindOtherContents]
		Description=Liefert das erste Inhaltsobjekt eines Behälters, das nicht vom angegebenen Typ ist.


	[NoContainer]
		Description=Konstante für FindObject: Suche auﬂerhalb aller Objekte.


	[ObjectCount]
		Description=Sucht Objekte, und gibt deren Anzahl zurück. Sind iWdt und iHgt beide -1, so wird das nächstliegende Objekt gefunden. Sind sie beide 0, wird nur am Punkt iX/iY gesucht. Sind iX, iY, iWdt und iHgt alle 0, gilt als Suchrechteck die gesamte Karte (auch bei lokalen Aufrufen). Es müssen stets die Bedingungen aller Parameter erfüllt sein, die angegeben und nicht 0 sind.


	[ObjectCount2]
		Description=Gibt die Anzahl der Objekte zurück, die das angegebenen Suchkriterien erfüllen. Die Suchkriterien werden mittels speziellen Kriteriums-Funktionen der Form "Find_*" angegeben.


	[AddVertex]
		Description=Fügt dem Objekt pObj einen neuen Vertex hinzu.


	[GetVertex]
		Description=Liefert eine Koordinate des indizierten Vertex (siehe DefCore.txt) eines Objekts. Koordinaten in Relation zur Objektmitte.


	[GetVertexNum]
		Description=Liefert die Anzahl der Vertices eines Objekts.


	[RemoveVertex]
		Description=Entfernt einen Vertex von einem Objekt.


	[SetVertex]
		Description=Setzt eine Koordinate des indizierten Vertex (siehe DefCore.txt) eines Objekts. Koordinaten in Relation zur Objektmitte.


	[GetDefinition]
		Description=Liefert das ID der indizierten von der Engine in dieser Runde geladenen Objektdefinition der angegebenen Kategorie (dwCategory 0 für alle Objektkategorien).


	[GetEnergy]
		Description=Liefert den aktuellen Energiewert eines Objekts in Prozent. 100% stellen hierbei den maximalen Physical-Wert von 100000 dar. Siehe auch DefCore.txt Sektion [Physical]. pObj Null bei lokalem Aufruf.


	[GetEntrance]
		Description=Liefert den aktuellen Eintrittsstatus eines Objekts. TRUE bei erlaubtem Eintritt, FALSE bei verbotenem Eintritt.


	[GetID]
		Description=Gibt die ID eines Objekts zurück.


	[GetMagicEnergy]
		Description=Liefert den aktuellen Zauberenergiewert eines Objekts. pObj Null bei lokalem Aufruf.


	[GetName]
		Description=Gibt den Namen eines Objekts oder einer Objektdefinition zurück. Hat das Objekt keinen eigenen Namen, wird der Name der Definition zurückgegeben.


	[GetRank]
		Description=Liefert die Rang-Nummer von pObj. 0 ist ein unbeförderter Clonk. *pObj ist Null bei lokalem Aufruf.


	[Incinerate]
		Description=Zündet das übergebene Objekt an. In dem jeweiligen Objekt wird ggf. Incineration() aufgerufen


	[Object]
		Description=Wandelt eine Objektnummer in einen Objektpointer um.


	[ObjectDistance]
		Description=Liefert die Distanz zwischen zwei Objekten. Ist pObj 0, Wird die Distanz zwischen dem aufrufenden Objekt und pObj2 gemessen.


	[ObjectNumber]
		Description=Bestimmt die Nummer eines Objekts. Diese Nummer ist eindeutig und kann mittels der Funktion Object in einen Objektpointer zurückverwandelt werden.


	[SetEntrance]
		Description=Ermöglicht bzw. verhindert das Betreten eines Gebäudes. Nur lokale Aufrufe.


	[SetShape]
		Description=Ändert das interne Objektrechteck eines Objekts. Das Objektrechteck wird beispielsweise für Kollisionsabfragen verwendet. Dies hat keine Auswirkung auf die Darstellung des Objekts.


	[ShakeObjects]
		Description=Schüttelt innerhalb eines kreisförmigen Bereiches alle Lebewesen durch. Dieses Verhalten ist vergleichbar mit Fling()-Aufrufen mit kleinen Zufallswerten auf alle Objekte im Zielbereich.


	[this]
		Description=Liefert einen Zeiger auf das Objekt, in dem der Script ausgeführt gerade wird.


	[CastParticles]
		Description=Verschleudert iAmount Partikel vom angegebenen Typ. Die Zusatzparameter werden zufällig zwischen a0/b0 und a1/b1 gesetzt.


	[ClearParticles]
		Description=Entfernt alle Partikel eines angegebenen Typs.


	[CreateParticle]
		Description=Erzeugt ein Partikel. Das Partikel muss unter dem angegebenen Namen geladen sein. Für weitere Informationen siehe Partikeldokumentation.


	[PushParticles]
		Description=Beschleunigt alle Partikel eines angegebenen Typs in die angegebene Richtung.


	[Call]
		Description=Ruft die lokale Funktion szFunction auf. Stattdessen sollte dieselbe Syntax wie bei engineinternen Funktionen genutzt werden.


	[DefinitionCall]
		Description=Ruft eine Funktion in einem Script ohne zugehöriges Objekt auf. Der this()-Zeiger gibt in einem solchen Aufruf 0 zurück (Vergleichbar mit dem Szenarioscript).


	[GameCall]
		Description=Ruft szFunction im Szenario-Script auf. Falls die Funktion nicht im Szenario-Script vorhanden ist, gibt die Funktion Null zurück und verursacht keine Fehlermeldung.


	[ObjectCall]
		Description=Ruft die öffentliche Funktion szFunction in pObj auf. Stattdessen sollte die neue Syntax [pObj]->[szFunction]() oder [pObj]->[idObj]::[szFunction]() genutzt werden.


	[PrivateCall]
		Description=Ruft die private, geschützte oder öffentliche Funktion szFunction in pObj auf. Es sollte überlegt werden, ob der Aufruf wirklich nötig ist.


	[ProtectedCall]
		Description=Ruft die geschützte oder öffentliche Funktion szFunction in pObj auf. Es sollte überlegt werden, ob der Aufruf wirklich nötig ist.


	[C4Id]
		Description=Wandelt einen String in eine ID um.


	[CreateArray]
		Description=Erzeugt ein neues, mit Nullen gefülltes Feld.


	[Format]
		Description=Setzt eine Zeichenkette aus verschiedenen Werten zusammen. Dabei wird szStr von vorne bis zum Ende nach mit '%' beginnenden Platzhaltern durchsucht, um diese dann durch die Parameter zu ersetzen. Das allgemeine Syntax für diese Platzhalter lautet: %[Länge][.Präzision]Typ Bis auf den Typ sind also alle Parameter optional. Der Typ gibt den Datentyp an, den der Parameter hat. Möglich sind folgende Werte:||||||Typ|||Bedeutung|||||||||d|||Ganzzahl (int)|||||||||x|||Ganzzahl (int), hexadezimale Ausgabe (0123456789abcdef)|||||||||X|||Ganzzahl (int), hexadezimale Ausgabe (0123456789ABCDEF)|||||||||i|||id (Bei IDs funktionieren die restlichen Parameter wie Länge und Präzision nicht!)|||||||||s|||Zeichenkette|||||||||v|||Beliebig. Vor allem nützlich zur Fehlersuche.|||||||||      Länge gibt eine Minimallänge an. Wenn der Wert kürzer ist, wird er rechtsbündig ausgerichtet und mit Leerzeichen aufgefüllt. Wird vor die Länge eine '0' gestellt, wird mit Nullen statt Leerzeichen aufgefüllt.|||      |||      Das Präzisionsfeld verhält sich je nach dem Parametertyp: Bei Ganzzahlen (d) gibt es die Minimalzahl der auszugebenden Zahlen an (der Rest wird mit Nullen aufgefüllt), während es bei Zeichenketten (s) die Maximalzahl der auszugebenden Zeichen angibt.|||    


	[GetChar]
		Description=Ermittelt den Ascii-Zeichencode eines indizierten Zeichens einer Zeichenkette.


	[GetLength]
		Description=Ermittelt die Länge einer Zeichenkette oder eines Felds.


	[SEqual]
		Description=Vergleicht zwei Zeichenketten, und gibt zurück, ob sie gleich sind. Dieser Vergleich beachtet Groﬂ-/Kleinschreibung, und entfernt keine vorangehenden oder nachfolgenden Leerzeichen.


	[SetLength]
		Description=Verändert die Länge eines Felds auf den angegebenen Wert. ‹berzählige Elemente werden dabei gelöscht.


	[WildcardMatch]
		Description=Prüft, ob zwei Strings gleich sind. Die Prüfung ist case-sensitiv, auﬂerdem können Wildcards benutzt werden.    


	[Par]
		Description=Gibt einen der an die Funktion übergebenen Parameter zurück.


	[ScriptCounter]
		Description=Gibt den derzeitigen Stand des Scriptzählers fürs Szenarioscript an.


	[ScriptGo]
		Description=Startet den Scriptzähler, bzw. hält ihn wieder an.


	[eval]
		Description=Führt einen als String übergebenen Script aus.


	[goto]
		Description=Setzt den Skriptzähler in Szenarioskripten auf den gewünschten Wert. Der Scriptzähler sorgt dafür, dass die ScriptXXX-Funktionen im Szenrienscript aufgerufen werden. Dies funktioniert nicht in Objektscripten, stattdessen sollten TimerCalls oder ActMaps mit StartCall/PhaseCall/EndCall verwendet werden.


	[inherited]
		Description=Ruft die überladene Funktion auf. Funktionen überladen sich, wenn sie beide den gleichen Namen haben.


	[GetPlrView]
		Description=Gibt das Objekt zurück, dem die Sicht eines Spielers folgt. Gibt 0 zurück, wenn kein Spieler mit der angegebenen Nummer existiert oder die Spielersicht keinem per Script gesetztem Objekt folgt (siehe GetPlrViewMode).    


	[GetPlrViewMode]
		Description=Fragt den aktuellen Sichtmodus eines Spielers ab. Die Funktion gibt einen der folgenden Werte zurück:|||0: Cursor - Die Sicht des Spielers folgt dem aktuell selektierten Clonk (siehe GetCursor) 1: Target - Die Sicht folgt einem anderen Objekt, welches durch den Befehl SetPlrView im Script gesetzt wurde. Siehe auch GetPlrView. 2: Scroll - Der Spieler bewegt seine Sicht unabhängig von der Position eines Objekts. Dies geschieht, wenn der Spieler die Maus an den Rand seines Sichtbereichs zieht.


	[SetFilmView]
		Description=Setzt die Sicht in Filmwiedergaben auf den angegebenen Spieler.


	[SetFoW]
		Description=Schaltet den Nebel des Krieges für einen Spieler ein oder aus.


	[SetPlrView]
		Description=Zentriert das Sichtfenster eines Spielers auf ein Objekt. Die Sicht folgt dem Objekt bis zum nächsten Spielerkommando.


	[SetPlrViewRange]
		Description=Setzt die Sichtweite eines Objekts.


	[SetViewOffset]
		Description=Verschiebt die Sicht eines Spielers permanent um einen bestimmten Betrag. Ein erneuter Aufruf überschreibt die Verschiebung wieder, ein Aufruf mit 0-Koordinaten setzt die Sicht wieder in den Normalzustand zurück.


	[CreateScriptPlayer]
		Description=Initiiert den Beitritt eines Scriptspielers. Scriptspieler berhalten sich von der Scriptseite wie reguläre Spieler. Sie haben eine Stammcrew, ein Konto, Baupläne, Heimatbasismaterial, Verfeindungen, Teams, etc. Für diese Spieler wird jedoch regulär kein Sichtfenster geöffnet und sie lassen sich nicht von menschlichen Spielern steuern.Scriptspieler können zum Beispiel verwendet werden, um KI-Gegner wie z.B. Bots in Hazard zu realisieren.


	[DoHomebaseMaterial]
		Description=Verändert die Kaufbarkeit von Objekten in der Heimatbasis.


	[DoHomebaseProduction]
		Description=Verändert die Nachlieferung von kaufbaren Objekten in der Heimatbasis.


	[DoScore]
		Description=Verändert den Punktewert eines Spielers. Dieser Wert ergibt zusammen mit dem Spielerwert (Wert aller Objekte im Besitz) die Gesamtpunktezahl des Spielers.


	[EliminatePlayer]
		Description=Eliminiert einen Spieler. Die Runde gilt für diesen Spieler als verloren.


	[GetBase]
		Description=Liefert die Nummer des Spielers, dessen Heimatbasis pObj ist. Rückgabewert -1 wenn pObj keine Heimatbasis ist.


	[GetCrewExtraData]
		Description=Dieser Befehl fragt im Clonk in der Spielerdatei gespeicherten Extra-Daten ab, die per SetCrewExtraData gesetzt wurden.


	[GetHomebaseMaterial]
		Description=Bei angegebenen id gibt die Funktion die Menge der Objekte zurück, die der Spieler in seiner Heimatbasis kaufen kann. iIndex und dwCategory werden hierbei ignoriert. Wird als id Null übergeben, liefert die Funktion den indizierten Objekttyp der entsprechenden Kategorie der kaufbaren Objekte des Spielers. Der Objekttyp (id) taucht in der Liste auf und wird zurückgeliefert, selbst wenn zur Zeit keine Objekte dieses Typs verfügbar sind.


	[GetHomebaseProduction]
		Description=Bei angegebenen id gibt die Funktion zurück, wie schnell die Menge der Objekte in der Heimatbasis des Spielers nachgeliefert wird. iIndex und dwCategory werden hierbei ignoriert. Wird als id Null übergeben, liefert die Funktion den indizierten Objekttyp der entsprechenden Kategorie der nachgelieferten Objekte des Spielers. Der Objekttyp (id) taucht in der Liste auf und wird zurückgeliefert, selbst wenn zur Zeit keine Objekte dieses Typs nachgeliefert werden.


	[GetPlayerByIndex]
		Description=Gibt die indizierte Spielernummer zurück. Die Funktion garantiert für Werte zwischen 0 und GetPlayerCount()-1, dass eine gültige Spielernummer zurückgegeben wird (denn durch eliminierte Spieler und Neubeitritte kann es vorkommen, dass "Löcher" unbelegter Spielernummern in der Liste entstehen!). Damit ist es einfacher, eine Schleife zu schreiben, die alle Spielernummern durchgeht. Ab 4.9.6.0 CR.


	[GetPlayerCount]
		Description=Liefert die Anzahl der Spieler, die momentan im Spiel sind.


	[GetPlayerID]
		Description=Gibt die Spieler-ID eines beigetretenen Spielers zurück. Spieler-IDs werden von 1 hochgezählt, und - anders als Spielernummern - nicht wieder benutzt, nachdem ein Spieler eliminiert wurde. Jeder neu beigetetene Spieler hat also eine eigene ID.    


	[GetPlayerName]
		Description=Liefert den Namen eines Spielers. Wenn die Spielernummer zu keinem gültigen Spieler gehört, wird 0 zurückgegeben. Dadurch kann diese Funktion auch benutzt werden, um zu ermitteln, ob eine Spielernummer gültig ist.


	[GetPlayerTeam]
		Description=Liefert das Team eines Spielers. Hat der Spieler kein Team, wird 0 zurückgegeben.    


	[GetPlayerType]
		Description=Liefert den Typ eines Spielers. Mögliche Typen sind:|||                      ||||||Konstante|||Wert|||Beschreibung|||||||||C4PT_User|||1|||Vom Benutzer gesteuerter Spieler|||||||||C4PT_Script|||2|||Scriptgeesteuerter Spieler; zum Beispiel KI-Spieler.|||||||||                


	[GetPlrColorDw]
		Description=Fragt die Spielerfarbe ab. Die Spielerfarbe wird verwendet, um einige Besitzobjekte wie Clonks oder Flaggen, sowie Textnachrichten dieses Spielers einzufärben.


	[GetPlrDownDouble]
		Description=Gibt zurück, ob der angegebene Spieler als letzte Aktion Doppel-Stopp gedrückt hatte. Mit dieser Funktion kann z.B. in ControlThrow überprüft werden, ob der Spieler das selektierte Objekt ablegen wollte, anstatt es zu werfen (Doppel-Stopp + Werfen).


	[GetPlrExtraData]
		Description=Dieser Befehl fragt im Spieler gespeicherten Extra-Daten ab, die per SetPlrExtraData gesetzt wurden.


	[GetPlrKnowledge]
		Description=Bei angegebenen id gibt die Funktion TRUE zurück, wenn der Spieler den Bauplan des betreffenden herstellbaren Objekts besitzt. iIndex und dwCategory werden hierbei ignoriert. Wird als id Null übergeben, liefert die Funktion den indizierten Bauplan der entsprechenden Kategorie des Spielers.


	[GetPlrMagic]
		Description=Stellt das Magiewissen eines bestimmten Spielers fest.


	[GetScore]
		Description=Liefert die Punkte die iPlayer hat.


	[GetSelectCount]
		Description=Liefert die Anzahl der ausgewählten Clonks von Spieler iPlayer.


	[GetTaggedPlayerName]
		Description=Liefert den Namen eines Spielers mit Markup in dessen Spielerfarbe. Wenn die Spielernummer zu keinem gültigen Spieler gehört, wird 0 zurückgegeben. Dadurch kann diese Funktion auch benutzt werden, um zu ermitteln, ob eine Spielernummer gültig ist.


	[GetWealth]
		Description=Liefert das Vermögen von iOwner.


	[Hostile]
		Description=Prüft, ob zwei Spieler verfeindet sind. Dazu reicht es, wenn nur einer von beiden mit dem anderen Spieler verfeindet ist.


	[SelectCrew]
		Description=Aktiviert bzw. deaktiviert ein Mannschaftsmitglied für die Steuerung.


	[SetCrewExtraData]
		Description=Mithilfe dieses Befehls können beliebige, scriptdefinierte Werte unter einem gegebenen Namen im Clonk in der Spielerdatei gespeichert werden. Auf diese Weise kann man Daten über einen Clonk in einer Spielerdatei über Szenariogrenzen hinweg erhalten (z.B. für RPGs) Zurückgegeben wird (wenn erfolgreich) der gesetzte Wert.


	[SetCursor]
		Description=Setzt die Auswahlmarkierung eines Spielers auf ein Zielobjekt und aktiviert dieses für die Steuerung.


	[SetHostility]
		Description=Setzt das Bündnisverhältnis zwischen zwei Spielern einseitig.


	[SetMaxPlayer]
		Description=Ändert die Maximalzahl der Spieler, die an der Runde teilnehmen können. Dieser Wert wirkt sich nur auf Neubeitritte aus; es werden keine vorhandenen Spieler eliminiert, um das Limit zu erfüllen.


	[SetPlayerTeam]
		Description=Teilt einen Spieler einem neuen Team zu. Es wird geprüft, ob in dem neuen Team noch Platz ist (anhand des MaxPlayer-Werts).


	[SetPlrExtraData]
		Description=Mithilfe dieses Befehls können beliebige, scriptdefinierte Werte unter einem gegebenen Namen in der Spielerdatei gespeichert werden. Auf diese Weise kann man Daten über einen Spieler über Szenariogrenzen hinweg erhalten (z.B. für RPGs) Zurückgegeben wird (wenn erfolgreich) der gesetzte Wert.


	[SetPlrKnowledge]
		Description=Fügt einen Bauplan zum Wissen des Spielers hinzu (oder entfernt ihn bei angegebenem fRemove).


	[SetPlrMagic]
		Description=Fügt einen Zauber der Liste der verfügbaren Zauber eines Spielers hinzu oder entfernt einen Zauber aus der Liste.


	[SetPlrShowCommand]
		Description=Markiert für einen Spieler ein bestimmtes Kommando. Ist die Darstellung deaktiviert, so wird sie aktiviert. Das markierte Kommando wird dann (so verfügbar) blinkend dargestellt.|||          Spielerkommandonummern:|||          ||||||Nummer|||Bedeutung|||||||||1|||Links|||||||||2|||Rechts|||||||||3|||Springen|||||||||4|||Stopp|||||||||5|||Werfen|||||||||6|||Graben|||||||||7|||Special|||||||||8|||Special 2|||||||||          Für Doppelkommandos (z.B. Doppel-Graben) muss jeweils 128 auf den Kommandowert aufaddiert werden.|||	    


	[SetPlrShowControl]
		Description=Steuert die grafische Darstellung der Clonk-Steuerungstasten eines Spielers in seinem Sichtfenster. Es können die folgenden Tasten angezeigt werden:|||          ||||||Nummer|||Bedeutung|||||||||0|||Cursor Rechts|||||||||1|||Cursor Umschalt|||||||||2|||Cursor Links|||||||||3|||Werfen|||||||||4|||Springen|||||||||5|||Graben|||||||||6|||Links|||||||||7|||Stopp|||||||||8|||Rechts|||||||||9|||Optionen|||||||||          Für jede Taste kann einzeln angegeben werden, ob und wie sie angezeigt werden soll. Dabei gibt es für jede Taste drei Optionen, die angegeben werden können:|||          |||          	Ob sie angezeigt werden soll|||          	Ob die Taste beschriftet sein soll|||          	Ob die Beschriftung blinken soll|||          |||          Entsprechend gibt es 3 Blocks von Optionen. Jeder dieser Blocks besteht dabei aus 10 Buchstaben, wobei "_" und " " für "Nein" und jeder andere Buchstabe für "Ja" steht (siehe Beispiel).|||	    


	[SetPlrShowControlPos]
		Description=Setzt die Position der grafischen Darstellung des Steuerungsblocks eines Spielers (siehe SetPlrShowControl).


	[SetWealth]
		Description=Setzt das Vermögen eines Spielers.


	[GainMissionAccess]
		Description=Fügt ein Passwort in die Liste der Missionszugänge ein. Alle Spieler auf dem selben Computer können dann ein Szenario starten, welches in der Scenario.txt dieses Passwort als Voraussetzung enthält. Sinnvollerweise sollte jedes Szenario in einer Reihe von Missionen bei erfolgreichem Beenden der Runde das für die jeweils nächste Mission benötigte Passwort freigeben.


	[GetMissionAccess]
		Description=Stellt fest und gibt zurück, ob der Spieler bereits das angegebene Missionszugangspasswort besitzt


	[GetSystemTime]
		Description=Gibt die momentane Uhrzeit zurück.


	[GetTime]
		Description=Gibt die Zeit seit Windowsstart in Millisekunden zurück. Kann zur genauen Zeitmessung verwendet werden.


	[GetTeamByIndex]
		Description=Gibt die indizierte Teamnummer zurück. Die Funktion garantiert für Werte zwischen 0 und GetTeamCount()-1, dass eine gültige Teamnummer zurückgegeben wird (denn durch eliminierte Spieler und Neubeitritte kann es vorkommen, dass "Löcher" unbelegter Teamnummern in der Liste entstehen!). Damit ist es einfacher, eine Schleife zu schreiben, die alle Teamnummern durchgeht.    


	[GetTeamColor]
		Description=Liefert die Farbe eines Teams.    


	[GetTeamCount]
		Description=Liefert die Anzahl der Teams, die momentan im Spiel sind.    


	[GetTeamName]
		Description=Liefert den Namen eines Teams.    


	[Bubble]
		Description=Erzeugt eine Luftblase.


	[Smoke]
		Description=Erzeugt eine Rauchwolke an der angegebenen Position.


	[GetClimate]
		Description=Liefert den aktuellen Klimawert. Dieser wird als Konstante zum durch TemperatureRange und Season entstehenden Wert hinzugezählt.


	[GetSeason]
		Description=Liefert die aktuelle Jahreszeit. 0 ist Winter, 50 Sommer.


	[GetTemperature]
		Description=Liefert die globale Temperatur. Werte abhängig von Klima und Jahreszeit zwischen +80 und -80.


	[GetWind]
		Description=Liefert die Windstärke und Richtung an der Position X, Y. Wird die Funktion aus einem Objekt heraus aufgerufen, so ist die Position relativ zur Objektposition. Wenn fGlobal=true, wird der globale Wind zurückgegeben.


	[LaunchLightning]
		Description=Erzeugt einen Blitz. Dieser bewegt sich von der Position (iX, iY) mit der angegebenen Geschwindigkeit fort. Dabei geben iXRange/iYRange an, wie sehr der Blitz von diesem vorgegegebenen Weg abweichen kann (mit iXRange = iYRange = 0 würde der Blitz schnurgerade verlaufen). iXRange/iYRange sind sozusagen ein Maﬂ für die "Zackigkeit" eines Blitzes. Die Position muss auch bei lokalem Aufruf in globalen Koordinaten angegeben werden.


	[SetSeason]
		Description=Setzt die Jahreszeit.


	[SetTemperature]
		Description=Setzt die globale Temperatur.


	[SetWind]
		Description=Setzt die globale Windrichtung und -stärke.


	[LaunchEarthquake]
		Description=Erzeugt einen Erdbeben an angegebener Stelle. Koordinaten auch bei lokalem Aufruf global


	[PlaceAnimal]
		Description=Erzeugt ein Lebewesen vom angegebenen Typ in der Landschaft. Die Startposition bestimmt sich dabei aus dem Wert Placement im DefCore des Lebewesens. Rückgabewert ist ein Zeiger auf das neu erzeugte Objekt.


	[PlaceVegetation]
		Description=Platziert Vegetation im angegebenen Zielrechteck. Bei lokalen Aufrufen gelten die Koordinaten als Offset zur Mitte des aufrufenden Objekts. Rückgabewert ist ein Zeiger auf das neu erzeugte Objekt.


	[AssignVar]
		Description=Weist den Wert iValue einer beliebigen Thread-lokalen Variablen (ab 0) zu. Der Datentyp ist variabel. Thread-lokale Variablen gelten nur für die Dauer des aktuellen Funktionsaufrufes. AssignVar wurde durch SetVar abgelöst.


	[Dec]
		Description=Erniedrigt die Variable Var um 1. Bitte den "--"-Operator verwenden.


	[DecVar]
		Description=Verringert die angegebene, threadlokale Variable. Neuere Scripte sollten den "--"-Operator und benannte Variablen benutzen.


	[GetType]
		Description=Gibt den Typ des übergebenen Werts zurück.


	[Global]
		Description=Liefert den Inhalt der globalen Variable iVarIndex.


	[GlobalN]
		Description=Liefert den Inhalt der globalen Variable mit dem Namen szText. Per GlobalN("Name")=Wert; kann der Wert einer benannten globalen Variable gesetzt werden.


	[Inc]
		Description=Erhöht die Variable Var um 1. Bitte den "++"-Operator verwenden.


	[IncVar]
		Description=Erhöht die angegebene, threadlokale Variable. Neuere Scripte sollten den "++"-Operator und benannte Variablen benutzen.


	[IsRef]
		Description=Prüft, ob Value eine Referenz ist.


	[Local]
		Description=Gibt den Wert einer lokalen Variable (als Referenz) zurück. Jedes Objekt kann eine beliebige Anzahl lokaler Variablen besitzen. Diese werden für jedes Objekt dauerhaft gespeichert und gehen erst verloren, wenn das Objekt gelöscht wird. Eine lokale Variable hat bei Erstellung des Objekts immer den Wert 0.


	[LocalN]
		Description=Gibt eine Referenz auf eine Objektlokale Variable zurück. Diese Referenz kann zum Lesen und Schreiben benutzt werden.


	[SetGlobal]
		Description=Setzt eine Global-Variable.


	[SetLocal]
		Description=Setzt eine Local-Variable in einem Objekt (wenn nicht angegeben, wird die Variable in dem aufrufenden Objekt gesetzt).


	[SetVar]
		Description=Weist den Wert iValue einer beliebigen Thread-lokalen Variablen (ab 0) zu. Der Datentyp ist variabel. Thread-lokale Variablen gelten nur für die Dauer des aktuellen Funktionsaufrufes. Numerierte Variablen wurden durch Variablen mit Namen abgelöst, sind aber für Arrays nützlich.


	[Var]
		Description=Gibt eine Referenz auf eine funktionslokale Variable zurück. Diese Referenz kann zum Lesen und Schreiben benutzt werden.


	[VarN]
		Description=Gibt eine Referenz auf eine funktionslokale Variable zurück. Diese Referenz kann zum Lesen und Schreiben benutzt werden.


	[AbortMessageBoard]
		Description=


	[ActivateGameGoalMenu]
		Description=


	[AddEvaluationData]
		Description=


	[AddMessage]
		Description=


	[AdjustWalkRotation]
		Description=


	[AsyncRandom]
		Description=


	[BlastFree]
		Description=


	[BlastObject]
		Description=


	[CallMessageBoard]
		Description=


	[CastBackParticles]
		Description=


	[ClearLastPlrCom]
		Description=


	[DrawMatChunks]
		Description=


	[DrawModLandscape]
		Description=


	[DrawVolcanoBranch]
		Description=


	[ExecuteCommand]
		Description=


	[FatalError]
		Description=


	[FlameConsumeMaterial]
		Description=


	[GameCallEx]
		Description=


	[GetIndexOf]
		Description=Inoffizielle Dokumentation: Gibt -1 bei nicht finden zurück, ansonsten den Schlüssel.


	[GetMatAdjust]
		Description=


	[GetObjectStatus]
		Description=


	[GetScoreboardData]
		Description=


	[GetTeamConfig]
		Description=Inoffizielle Dokumentation: Parameter ist eine TEAM_ Konstante


	[IncinerateLandscape]
		Description=


	[InitScenarioPlayer]
		Description=


	[LoadScenarioSection]
		Description=


	[LocateFunc]
		Description=


	[ModulateColor]
		Description=


	[OnMessageBoardAnswer]
		Description=


	[PathFree2]
		Description=


	[PauseGame]
		Description=


	[PlayVideo]
		Description=


	[PlayerObjectCommand]
		Description=


	[RemoveUnusedTexMapEntries]
		Description=


	[Set]
		Description=


	[SetKiller]
		Description=


	[SetMenuDecoration]
		Description=


	[SetMenuTextProgress]
		Description=


	[SetObjDrawTransform2]
		Description=


	[SetObjectLayer]
		Description=


	[SetObjectStatus]
		Description=


	[SetPreSend]
		Description=


	[SetTextureIndex]
		Description=


	[SetViewCursor]
		Description=


	[StartCallTrace]
		Description=


	[SurrenderPlayer]
		Description=


	[TestMessageBoard]
		Description=


	[GetLeague]
		Description=


	[GetObjectLayer]
		Description=


	[CastC4ID]
		Description=


	[_inherited]
		Description=


	[CastInt]
		Description=


	[GetPlrControlName]
		Description=One of those invisible functions...


	[SetLeaguePerformance]
		Description=


	[GetViewCursor]
		Description=


	[GetTexture]
		Description=


	[FxFireStart]
		Description=


	[FxFireTimer]
		Description=


	[FxFireStop]
		Description=


	[FxFireInfo]
		Description=

	[GetScoreboardString]
		Description=


	[SetNextMission]
		Description=


	[CastBool]
		Description=


	[CastAny]
		Description=


