[Descriptions]
AttachMesh=Befestigt ein Mesh an einem anderen. Wenn für mesh eine ID angegeben wird, so wird das Mesh der entsprechenden Definition verwendet. Wenn für mesh ein Objekt angegeben wird, so wird dessen aktuelles Mesh verwendet, inklusive aller Animationen oder weiterer angehängter Meshes. Dabei wird jedoch nur die Grafik angehangen, das Objekt selbst bleibt weiter an seiner gegenwärtigen Position. Der Rückgabewert ist eine Nummer mit Hilfe derer das Mesh mit DetachMesh wieder gelöst werden kann.
GetAnimationLength=Gibt die Länge der Animation mit dem angegebenen Namen zurück, oder nil wenn keine solche Animation existiert. Gültige Positionen (für PlayAnimation und SetAnimationPosition) liegen zwischen 0 und der Länge der Animation. Die zurückgegebene Zahl entspricht der Animationslänge (wie sie im Modellierungstool eingestellt wurde) in Millisekunden.
GetAnimationName=Gibt den Namen der Animation mit der angegebenen Nummer zurück. Falls keine Animation mit der angegebenen Nummer existiert, oder falls es sich dabei um einen Kombinationsknoten handelt gibt die Funktion nil zurück.
PlayAnimation=Spielt eine neue neue Animation ab. Der Rückgabewert der Funktion ist die Animationsnummer des eingefügten Animationsknotens, mit der die Animation später manipuliert oder wieder entfernt werden kann. Falls im angegebenen Slot bereits Animationen vorhanden sind, so wird auch ein Kombinationsknoten erstellt. Dieser erhält die zurückgegebene Nummer plus 1.
GetAnimationPosition=Gibt die Stelle zurück an der die Animation mit der angegebenen Nummer gerade ist. Die Zahl liegt zwischen 0 und GetAnimationLength(GetAnimationName(animation_number)). Falls es keine Animation mit der angegebenen Nummer gibt oder es sich dabei um einen Kombinationsknoten handelt gibt die Funktion nil zurück.
GetAnimationWeight=Gibt die Gewichtung eines Kombinationsknotens zurück. Die Gewichtung bestimmt, zu welchem Anteil die beiden kombinierten Animationen in die Gesamtanimation einfließen. Die Zahl liegt immer zwischen 0 (erste Animation geht voll ein) und 1000 (zweite Animation geht voll ein). Gibt nil zurück falls es keine Animation mit der angegebenen Nummer gibt, oder falls es sich dabei um einen Animationsknoten handelt.
GetPlayerControlState=
GetRootAnimation=Gibt die Nummer der obersten Animation im angegebenen Slot zurück. Diese Animation wird mit der Animation der nächstkleineren Slotnummer kombiniert um dann mit der obersten Animation der nächsthöheren Slotnummer kombiniert zu werden, oder, falls es keinen nächsthöheren Slot gibt, auf dem Bildschirm angezeigt zu werden. Enthält der Slot mehr als eine Animation, so ist die oberste Animation immer ein Kombinationsknoten, der die Einzelanimationen oder Kombinationen derselben zu dem Gesamtergebnis des Slots kombiniert. Gibt nil zurück wenn der angegebene Slot gar keine Animation enthält.
SetAnimationPosition=Setzt die Position der angegebenen Animation neu. Rückgabewert true falls der neue AVP gesetzt wurde oder false wenn es keine Animation mit der angegebenen Nummer gibt oder es sich bei ihr um einen Kombinationsknoten handelt.
SetAnimationWeight=Setzt die Gewichtung der angegebenen Animation neu. Rückgabewert true falls der neue AVP gesetzt wurde oder false wenn es keine Animation mit der angegebenen Nummer gibt oder es sich bei ihr um einen Animationsknoten handelt.
SetPlayerControlEnabled=
StopAnimation=Stoppt die Animation mit der angegeben Nummer (wie sie von PlayAnimation zurückgegeben wird) und entfernt die Animation aus dem zugehörigen Slot im Animations-Stack. Gehört ein Kombinationsknoten zur Nummer, so werden beide Animationen entfernt die kombiniert werden; wenn eine oder beide davon wieder Kombinationen sind werden auch deren Animationen entfernt, und so weiter. Wird die gestoppte Animation mit einer anderen kombiniert, so wird auch der zugehörige Kombinationsknoten entfernt, da es nun nichts mehr zu kombinieren gibt. Gibt true zurück wenn die Animation entfernt wurde, oder 0 wenn dies nicht möglich war (zum Beispiel wenn es keine Animation zur gegebenen Nummer gibt, oder die Animation zu Slot 0 gehört).
DetachMesh=Wurde zuvor mit AttachMesh ein Mesh an einem anderen befestigt, so kann es mit dieser Funktion wieder gelöst werden.
SetMeshMaterial=Ändert das Material des Meshes des aufrufenden Objekts zur Laufzeit.
ResetCursorView=
Translate=Schlägt einen Text in der StringTbl??.txt des aufrufenden Skripts nach, und gibt die Übersetzung zurück.    
Abs=Bildet den Absolutwert (Betrag), entfernt also das Vorzeichen des ersten Parameters.
AbsX=Liefert das relative X in Bezug auf Objektmitte wenn von einem Objekt aufgerufen. Sonst liefert diese Funktion das übergebene X zurück
AbsY=Liefert das relative Y in Bezug auf Objektmitte wenn von einem Objekt aufgerufen. Sonst liefert diese Funktion das übergebene Y zurück
ActIdle=Prüft, ob das aufrufende Objekt eine Aktivität ausführt.
Activate=Wenn ein Spieler Doppelgraben drückt, wird zunächst "ControlDigDouble" im Clonk aufgerufen. Gibt dieses false zurück oder existiert nicht, und der Clonk läuft, schwimmt oder gräbt, wird im ersten Inhaltsobjekt Activate aufgerufen. Wenn dieses nicht existiert oder false zurückgibt, wird zuerst versucht, einen Baum zu fällen oder eine Leitung abzunehmen. Danach wird Activate im Clonk selbst aufgerufen.
AddCommand=Fügt ein Kommado in die Kommandoliste des aufrufenden Objekts hinzu (an den Anfang, siehe auch AppendCommand). D.h. es wird ein Kommando hinzugefügt, welches das Objekt vor anderen vorher gegebenen Kommandos auszuführen hat (war vorher kein Kommando gesetzt, so entspricht AddCommand SetCommand)|||Für Kommando-Beschreibungen siehe SetCommand	
AddEffect=Erzeugt einen Effekt. Rückgabewert ist der Effektindex bei Erfolg, oder 0 bei Fehlschlag (weil der Effekt beispielsweise abgelehnt wurde). Wenn der Effekt von einem anderen Effekt aufgenommen wurde, der sich in demselben Aufruf entfernt, wird -2 zurückgegeben.
AddMenuItem=Fügt einen Menüeintrag hinzu.
AddMsgBoardCmd=Erzeugt ein neues selbstdefiniertes Messageboard-Kommando. Dieses Kommando kann von jedem Spieler im Spiel durch Eingabe von "/[Kommandoname]" aufgerufen werden. In dem Fall wird der angegebene Script ausgeführt. Im Script kann "%s" dafür verwendet werden, eventuell angegebene Parameter einzubinden.
AddVertex=Fügt dem aufrufenden Objekt einen neuen Vertex hinzu.
Angle=Liefert den Winkel, in dem sich der zweite Punkt vom ersten Punkt aus gesehen befindet. Der Winkel wird in Grad zurückgeliefert, 0° ist senkrecht oben. Alle Koordinaten sind global.
AnyContainer=Wird an FindObject/FindObjectOwner übergeben, damit nur Objekte gefunden werden, die in einem anderen Objekt enthalten sind
AppendCommand=Fügt ein Kommando der Kommandoliste des aufrufenden Objekts am Ende hinzu. Das Objekt wird also das zuerst gegebene Kommando ausführen und sich danach automatisch dem mit AppendCommand hinzugefügten widmen. Für Kommando-Beschreibungen siehe SetCommand|||Bemerkung: Mit AppendCommand hinzugefügte Befehle werden nicht an gesteuerte Fahrzeuge weitergeleitet (siehe VehicleControl)
ArcCos=Berechnet den Arcuscosinus von value/radius, also Result=arccos(value/radius). Dies entspricht cos(Result)=value/radius. Die Funktion wird benötigt, um Seitenverhältnisse zu einem Winkel umzurechnen. Für die meisten Fälle ist Angle() aber ausreichend und praktischer.
ArcSin=Berechnet den Arcussinus von value/radius, also Result=arcsin(value/radius). Dies entspricht Sin(Result)=value/radius. Die Funktion wird benötigt, um Seitenverhältnisse zu einem Winkel umzurechnen. Für die meisten Fälle ist Angle() aber ausreichend und praktischer.
BlastObjects=Fügt allen Objekten an angegebener Position Explosionsschaden zu. x und y sind immer globale Koordinaten. Wenn ein container angegeben ist, wird der Schaden nur den Objekten zugefügt, die in container enthalten sind. Explosionsschaden kann zur Entzündung führen oder auch Lebewesen wegschleudern. Bei lokalen Aufrufen gilt der Schaden als vom Controller des aufrufenden Objekts verursacht.
BoundBy=Gibt value zurück, wenn der Wert innerhalb der Grenzen liegt (value >= lower_bound und value <= upper_bound). Andernfalls wird die jeweils nächstliegende Grenze zurückgegeben.
Bubble=Erzeugt eine Luftblase.
Buy=Kauft ein Objekt für for_player, und zieht pay_player Geld ab. Wenn dieser nicht genug Geld oder das Objekt nicht im Heimatbasismaterial hat, wird der Vorgang nicht ausgeführt.
C4Id=Wandelt einen String in eine ID um.
Call=Ruft die lokale Funktion function auf. Wird "~" vor den Funktionsnamen gesetzt, wird der Aufruf failsafe durchgeführt.
CanConcatPictureWith=Tested ob die Bilder zweier Objekte gleich sind und sie somit in Inhaltsanzeigen gestapelt werden können.
CastObjects=Verschleudert number Objekte an angegebener Position mit einer Geschwindigkeit von level. Bei einem lokalen Aufruf haben die erzeugten Objekte den selben Besitzer wie das aufrufende Objekt.
CastParticles=Verschleudert amount Partikel vom angegebenen Typ. Die Zusatzparameter werden zufällig zwischen a0/b0 und a1/b1 gesetzt.
CastPXS=Verschleudert namentlich angegebene Materialpixel an angegebener Position. Bei einem lokalen Aufruf gelten die Koordinaten als Offset zum aufrufenden Objekt.
ChangeDef=Weist einem Objekt eine neue Definition zu.
ChangeEffect=Ändert den Namen eines Effektes, und damit auch die aufgerufenen Callback-Funktionen.
CheckEffect=Führt Fx*Effect (und ggf. auch Fx*Add)-Callbacks in der entsprechenden Effektliste aus, ohne einen Effekt selber zu erstellen. Rückgabewert ist -1, wenn ein anderer Effekt den Effekt abgelehnt hat, und die Effektnummer des aufnehmenden Effektes, wenn der Effekt aufgenommen wurde.
CheckEnergyNeedChain=Überprüft, ob ein an das aufrufende Objekt angeschlossener Verbraucher Energie benötigt. Dabei werden auch indirekt (also über mehrere Leitungen über einen weiteren Verbraucher) angeschlossene Verbraucher überprüft.
CheckVisibility=Fragt die Sichtbarkeit eines Objekts ab. Siehe dazu auch SetVisibility.
ClearMenuItems=Entfernt alle Einträge aus einem Menü.
ClearParticles=Entfernt alle Partikel eines angegebenen Typs.
ClearScheduleCall=Bricht durch ScheduleCall erzeugte verzögerte Funktionsaufrufe ab. Alle momentan wartenden Funktionsaufrufe an die angegebene Funktion und das angegebene Objekt werden abgebrochen.
CloseMenu=Schließt das Menü des aufrufenden Objekts.
Collect=Sammelt ein Objekt auf. Der Befehl führt dieselben Funktionen aus, als wäre das Objekt durch den normalen Collection-Bereich des Objekts eingesammelt worden (z.B. RejectCollect, Prüfung auf Flagge/Flagge abnehmbar, Hit-Aufruf bei OCF_HitSpeed2, usw.). Die einzigen Unterschiede sind, dass keine Prüfung der Position von item auf den Entrance-Bereich von target/this() gemacht wird, und dass item nicht auf OCF_Carryable geprüft wird.Mit diesem Befehl lässt sich beispielsweise das Aufnehmen von Objekten aus Containern heraus realisieren. Wenn die Aufnahme fehlschlug (Beispielsweise durch den RejectCollect-Aufruf oder weil der Container voll war), gibt die Funktion 0 zurück. Ansonsten 1.
ComponentAll=Prüft, ob das aufrufende Objekt nur aus Objekten vom Typ id besteht.
ComposeContents=Erzeugt ein Objekt vom Typ id als Inhalt des aufrufenden Objekts. Das Objekt wird aus seinen Komponenten zusammen gesetzt, die im aufrufenden Objekt enthalten sein müssen. Andernfalls wird eine Meldung ausgegeben, welche Objekte noch benötigt werden. Auch ComposeContents produziert den Engine Objekt-Call BuildNeedsMaterial, durch den die Meldung über noch benötigtes Material ausgewertet und abgefangen werden kann.
Construction=Wird bei der Erzeugung eines Objekts aufgerufen.
Contained=Liefert das Objekt, in dem sich das aufrufende Objekt befindet, oder nil, wenn es in keinem anderen Objekt enthalten ist.
Contents=Liefert das indizierte Objekt, das im aufrufenden Objekt enthalten ist.
ContentsCount=Liefert die Anzahl der Objekte vom Typ id, die im aufrufenden Objekt enthalten sind.
Cos=Liefert cos(angle) * radius.
CreateArray=Erzeugt ein neues, mit Nullen gefülltes Feld.
CreateConstruction=Sollte statt CreateObject benutzt werden, wenn ein Gebäude oder eine Baustelle erzeugt werden soll. Bei lokalen Aufrufen dieser Funktion wird die angegebene Position zu Offset-Koordinaten zum aufrufenden Objekt. Wenn check_site 1 ist, wird die Baustelle vorher auf ihre Eignung überprüft. Ist die Position ungeeignet (z.B. durch unebenen Untergrund oder andere Gebäude), wird beim aufrufenden Objekt eine entsprechende Meldung ausgegeben und die Funktion gibt 0 zurück.
CreateContents=Erzeugt ein Objekt vom Typ id als Inhalt des aufrufenden Objekts.
CreateMenu=Erzeugt ein benutzerdefiniertes Menü im aufrufenden Objekt. Menüeinträge müssen mit AddMenuItem hinzugefügt werden.
CreateObject=Erzeugt ein Objekt des angegebenen Typs an der angegebenen Position. xoffset und yoffset bestimmen die Position in absoluten Pixel-Koordinaten der Landschaft (Mitte Unterkante des Objekts). Bei lokalen Aufrufen dieser Funktion wird die angegebene Position zu Offset-Koordinaten zum aufrufenden Objekt.
CreateParticle=Erzeugt ein Partikel. Das Partikel muss unter dem angegebenen Namen geladen sein. Für weitere Informationen siehe Partikeldokumentation.
CreateScriptPlayer=Initiiert den Beitritt eines Scriptspielers. Scriptspieler berhalten sich von der Scriptseite wie reguläre Spieler. Sie haben eine Stammcrew, ein Konto, Baupläne, Heimatbasismaterial, Verfeindungen, Teams, etc. Für diese Spieler wird jedoch regulär kein Sichtfenster geöffnet und sie lassen sich nicht von menschlichen Spielern steuern.Scriptspieler können zum Beispiel verwendet werden, um KI-Gegner wie z.B. Bots in Hazard zu realisieren.
CustomMessage=Gibt eine Nachricht aus.
DeathAnnounce=Gibt eine Botschaft a la "[name] ist von uns gegangen"  über dem aufrufenden Objekt aus.
Definition=Wird nach dem Laden der Definitionen aufgerufen. Sollte nur die aktuelle Definiton Ã¤ndern.
DefinitionCall=Ruft eine Funktion in einem Script ohne zugehöriges Objekt auf. Der this()-Zeiger gibt in einem solchen Aufruf 0 zurück (Vergleichbar mit dem Szenarioscript).
DigFree=Gräbt ein kreisrundes Loch in halbfesten Materialien.
DigFreeRect=Gräbt ein rechteckiges Loch in halbfesten Materialien.
Distance=Berechnet den Abstand zwischen zwei Punkten. Die Funktion entspricht Sqrt((x2-x1)^2 + (y2-y1)^2;).
DoBreath=Verändert den Atemwert eines Objekts.
DoCon=Verändert die Fertigstellung des aufrufenden Objekts. Die meisten Lebewesen und Bäume können dadurch vergrößert oder verkleinert werden. Gebäude können zu Baustellen zurückgesetzt und Baustellen vorwärts oder rückwärts gebaut werden. Sinkt die Fertigstellung eines Objekts auf oder unter 0, wird dieses gelöscht.    
DoCrewExp=Gibt dem aufrufenden Clonk Erfahrungspunkte.
DoDamage=Verändert den Schadenswert des aufrufenden Objekts. Bei change ungleich Null wird im Zielobjekt außerdem die Funktion Damage aufgerufen.
DoEnergy=Verändert die Energie des aufrufenden Objekts. Die Energie entspricht bei Gebäuden der elektrischen Energie, und bei Lebewesen der Lebensenergie.
DoHomebaseMaterial=Verändert die Kaufbarkeit von Objekten in der Heimatbasis.
DoHomebaseProduction=Verändert die Nachlieferung von kaufbaren Objekten in der Heimatbasis.
DoMagicEnergy=Verändert den Magiewert des aufrufenden Objekts. Jedoch wird die gewünschte Veränderung vorgabemäßig nur als ganze ausgeführt und daher auch nur, wenn dadurch nicht die Ober- bzw. Untergrenze (physische Fähigkeit des Clonks bzw. 0) überschritten wird. Wenn die Veränderung change nicht als ganze ausgeführt werden kann, gibt die Funktion FALSE zurück. Hierdurch kann mit einem einzelnen Funktionsaufruf gleichzeitig überprüft werden, ob eine Transaktion überhaupt möglich ist.
DoRGBaValue=Addiert den angegeben Farbwert zum bestehenden des angegebenen 32bit-Farbewerts hinzu.		
DoScore=Verändert den Punktewert eines Spielers. Dieser Wert ergibt zusammen mit dem Spielerwert (Wert aller Objekte im Besitz) die Gesamtpunktezahl des Spielers.
DoScoreboardShow=Ändert den Sichtbarkeitszähler für das Scoreboard. Der intern verwaltete Zähler beginnt bei 0. Ist er größer als 0, wird das Scoreboard gezeigt. Ist er kleiner als 0, wird es verborgen. Ist er gleich 0, wird das Scoreboard nur dann gezeigt, wenn der Spieler die entsprechende Taste (normalweise Tab) drückt.    
DoWealth=Verändert das Vermögen eines Spielers.
DrawDefMap=Zeichnet eine dynamische Zufallskarte innerhalb eines Bereichs. Dazu wird die angegebene Karte in der Landscape.txt gesucht.
DrawMap=Zeichnet eine dynamische Zufallskarte innerhalb eines Bereichs. Dazu wird derselbe Generator benutzt, der auch die Karten der Landscape.txt zeichnet.
DrawMaterialQuad=Zeichnet ein viereckiges Polygon im angegebenen Material mit der angegebenen Textur. Wenn keine Textur angegeben ist, wird Smooth angenommen.
DrawParticleLine=Erzeugt ein Linie zwischen zwei Punkten aus Partikeln. Rückgabewert ist die Anzahl der erzeugten Partikel.
EditCursor=Liefert im Entwicklermodus der Engine das Objekt, welches sich im gerade unter dem Mauscursor befindet (Modus: Objekte auswählen und verschieben).
EffectCall=Führt einen Funktionsaufruf im angegebenen Effekt durch. Der Aufruf erhält den Befehlskontext des Effektes, und die ersten beiden Aufrufparameter sind immer Zielobjekt und Effektindex. Die weiteren Parameter können frei gewählt werden.
EffectVar=Liefert eine Referenz auf eine effektlokale Variable. Diese kann zum Lesen und schreiben verwendet werden.
EliminatePlayer=Eliminiert einen Spieler. Die Runde gilt für diesen Spieler als verloren.
EnergyCheck=Gibt zurück, ob der Energiewert des aufrufenden Objekts größer oder gleich energy ist. Wenn die Spielregel "Energiebedarf" nicht aktiviert ist, gibt diese Funktion immer TRUE zurück. Außerdem werden Leitungen dazu motiviert, Energie hierhin zu transferieren.
Enter=Versetzt das aufrufende Objekt in ein anderes hinein. Bei diesem Vorgang wird weder RejectCollect, noch Collection oder ActivateEntrance im Zielobjekt aufgerufen. Dafür aber RejectEntrance und Entrance im Objekt, das hineinversetzt werden soll.
eval=Führt einen als String übergebenen Script aus.
Exit=Versetzt das aufrufende Objekt aus seinem Behälter heraus, und setzt optional seine Geschwindigkeit.
Explode=Lässt ein Objekt explodieren. Die Explosion beschädigt Landschaft und Objekte, und das Objekt wird mitsamt Inhalt vor der Explosion entfernt. Wenn sich das Objekt in einen anderen Objekt befindet, werden alle anderen Inhaltsobjekte und das enthaltende Objekt beschädigt. Als Verursacher des Schadens gilt der Besitzer des explodierenden Objekts.
Extinguish=Löscht das Feuer eines brennenden Objekts.
ExtractMaterialAmount=Extrahiert eine bestimmte Menge des gleichen Materials an einer Stelle. Zurückgegeben wird die tatsächlich erfolgreich extrahierte Materialmenge.
FightWith=Beginnt einen Zweikampf. Mit diesem Befehl können auch Clonks nicht verfeindeter Spieler einen Kampf beginnen. Beide Teilnehmer müssen OCF_FightReady sein.
FindBase=Sucht eine Heimatbasis eines Spielers. Die Heimatbasis ist zumeist das Gebäude, auf dem eine Flagge weht.
FindConstructionSite=Sucht einen Bauplatz für ein Gebäude, ausgehend von Var(var_num_x)/Var(var_num_y). Wenn ein Bauplatz gefunden wird, wird er in den entsprechenden Variablen abgelegt, und es wird TRUE zurückgegeben. Ansonsten ist der Rückgabewert FALSE.
FindContents=Liefert das erste in einem Behälter enthaltene Objekt vom Typ type.
FindDefinition=
FindObject=Gibt ein Objekt zurück, das die angegebenen Suchkriterien erfüllt. Die Suchkriterien werden mittels speziellen Kriteriums-Funktionen der Form "Find_*" angegeben.
FindObjects=Erstellt eine Liste von Objekten, auf die alle angegeben Suchkriterien zutreffen. Die Suchkriterien werden mittels speziellen Kriteriums-Funktionen der Form "Find_*" angegeben.
FindOtherContents=Liefert das erste Inhaltsobjekt eines Behälters, das nicht vom angegebenen Typ ist.
FinishCommand=Beendet ein Kommado in der Kommandoliste eines Objekts.
Fling=Verschleudert das aufrufende Objekt in die angegebene Richtung. Diese Funktion ist für Lebewesen konzipiert, da sie die entsprechenden Aktivitäten setzt.
Format=Setzt eine Zeichenkette aus verschiedenen Werten zusammen. Dabei wird text von vorne bis zum Ende nach mit '%' beginnenden Platzhaltern durchsucht, um diese dann durch die Parameter zu ersetzen.    
FrameCounter=Gibt die Nummer des Frames zurück, in dem sich das Spiel befindet. Dieser Zähler beginnt beim Szenarienstart mit 0, und zählt dann mit ca. 37 Frames pro Sekunde hoch (abhängig von der Spielgeschwindigkeit)
FreeRect=Entfernt alle Materialien innerhalb des angegebenen Rechtecks. Die Koordinaten sind immer global, und der untere und rechte Rand des Rechtecks zählen nicht mit dazu.
GainMissionAccess=Fügt ein Passwort in die Liste der Missionszugänge ein. Alle Spieler auf dem selben Computer können dann ein Szenario starten, welches in der Scenario.txt dieses Passwort als Voraussetzung enthält. Sinnvollerweise sollte jedes Szenario in einer Reihe von Missionen bei erfolgreichem Beenden der Runde das für die jeweils nächste Mission benötigte Passwort freigeben.
GameCall=Ruft function im Szenario-Script auf. Falls die Funktion nicht im Szenario-Script vorhanden ist, gibt die Funktion Null zurück und verursacht keine Fehlermeldung.
GameOver=Beendet die Runde. Die Runde wird für alle überlebenden Spieler als gewonnen gewertet.
GBackLiquid=Überprüft ob sich an angegebener Position in der Landschaft Flüssigkeit befindet.
GBackSemiSolid=Überprüft ob sich an angegebener Position in der Landschaft feste Materie oder Flüssigkeit befindet. Also alles außer Himmel und Tunnel.
GBackSky=Überprüft ob sich an angegebener Position in der Landschaft Himmel befindet.
GBackSolid=Überprüft ob sich an angegebener Position in der Landschaft feste Materie befindet. Also alles wo Objekte nicht durchkönnen.
GetAction=Liefert den Namen der momentanen Aktivität eines Objekts zurück, "Idle", wenn das Objekt keine Aktivität ausführt.
GetActionTarget=Liefert die aktuellen Aktivitätszielobjekte des aufrufenden Objekts.
GetActTime=Liefert den Zeitraum in Frames, die das aufrufende Objekt bereits die aktuelle Aktivität ausgeführt hat.
GetAlive=Gibt zurück, ob das aufrufende Objekt noch am Leben ist.
GetBase=Liefert die Nummer des Spielers, dessen Heimatbasis das aufrufende Objekt ist. Rückgabewert NO_OWNER wenn es keine Heimatbasis ist.
GetBit=Gibt den Wert des bit_number'nten Bits zurück.
GetBreath=Liefert den aktuellen Atemwert des aufrufenden Objekts in Prozent. 100% stellen hierbei den maximalen Physical-Wert von 100000 dar. Siehe auch DefCore.txt Sektion [Physical].
GetCaptain=
GetCategory=Fragt die Objektkategorie des aufrufenden Objekts oder der aufrufenden Definition ab. Die Objektkategorie wird normalerweise über die DefCore gesetzt, und danach höchstens in seltenen Fällen mit SetCategory geändert. Sie bestimmt das allgemeine Verhalten eines Objekts und dessen Platzierung. Eine mit GetCategory abgefragt Kategorie kann mit dem &-Operator gegen eine C4D_-Konstante geprüft werden.
GetChar=Ermittelt den Zeichencode eines indizierten Zeichens einer Zeichenkette.
GetClimate=Liefert den aktuellen Klimawert. Dieser wird als Konstante zum durch TemperatureRange und Season entstehenden Wert hinzugezählt.
GetClrModulation=Fragt die Farbmodulation des aufrufenden Objekts ab. Diese ist ein Farbwert, der multiplikativ (oder auch additiv, bei entsprechend aktiviertem  BlitMode in der DefCore) aufgerechnet wird. Für weitere Hinweise siehe auch SetClrModulation().
GetColor=Fragt den RGB-Farbwert der Färbung der ColorByOwner-Flächen des aufrufenden Objekts ab. Diese werden beispielsweise durch SetOwner oder SetColor gesetzt.
GetComDir=Liefert die aktuelle Befehlsrichtung des aufrufenden Objekts. Diese gibt die momentane, beabsichtigte Bewegungsrichtung an. Die Auswirkung dieser Richtung hängt von der Prozedur der aktuellen Aktivität ab.
GetCommand=Gibt Informationen über ein Kommando des aufrufenden Objekts zurück. Führt das Objekt momentan keine Aktion aus, so wird (bei jedem Wert von element) 0 zurückgegeben.
GetComponent=Liefert Objektkomponenten.
GetCon=Liefert die Fertigstellung des aufrufenden Objekts in Prozent. Bei Baustellen ist dies die Fertigstellung, während es bei Tieren und Pflanzen die Größe angibt (Siehe StretchGrowth/OverSize in der DefCore)
GetContact=Ermittelt, in welche Richtungen einzelne oder alle Vertices des aufrufenden Objekts feste Landschaft berühren. Die Richtungen werden als Bitmaske von CNAT-Werten übergeben bzw. von der Funktion zurückgegeben.
GetController=Fragt ab, welcher Spieler das aufrufende Objekt zur Zeit kontrolliert bzw. zuletzt kontrolliert hat. Bei Mannschaftsmitgliedern ist dies normalerweise immer der Besitzer; bei Fahrzeugen der Controller des Clonks, der es zuletzt bedient (angefasst und geschoben/gezogen) hat. Objekte, die von Lebewesen aufgenommen werden, nehmen automatisch den Controller ihres Containers an. Beim Besitzerwechsel (siehe SetOwner())wird automatisch auch der Controller auf den neuen Besitzer geändert.
GetCrew=Gibt ein Mannschaftsmitglied eines Spielers zurück. Wird ein ungültiger Index angegeben, gibt die Funktion nil zurück.
GetCrewCount=Liefert die Anzahl der Mannschaftsmitglieder eines Spielers zurück.
GetCrewEnabled=Fragt ab, ob ein Mannschaftsmitglied gegenwärtig angewählt werden kann.
GetCrewExtraData=Dieser Befehl fragt im Clonk in der Spielerdatei gespeicherten Extra-Daten ab, die per SetCrewExtraData gesetzt wurden.
GetCursor=Gibt den momentan kontrollierten Clonk eines Spielers zurück. Werden mehrere Clonks gelenkt, ist es bei index=0 (oder weggelassen) immer das primär ausgewählte Mannschaftsmitglied. Also das, dem beispielsweise auch die Sicht folgt.
GetDamage=Fragt den Schadenswert des aufrufenden Objekts ab.
GetDefBottom=Fragt die Unterkante des aufrufenden Objekts ab. Diese entspricht Y-Position + DefCore-OffsetY + DefCore-Height. Eine eventuelle Drehung wird hier nicht mit eingerechnet.
GetDefCoreVal=Gibt einen Eigenschaftswert der aufrufenden Objektdefinition nach seinem Namen in der DefCore.txt zurück.
GetDefinition=Liefert das ID der indizierten von der Engine in dieser Runde geladenen Objektdefinition der angegebenen Kategorie (category 0 für alle Objektkategorien).
GetDesc=Gibt die Beschreibung eines Objekts oder einer Objektdefinition zurück. Die Beschreibung wird in Objektdefinitionen in der Desc**.txt angegeben.
GetDir=Liefert die aktuelle Richtung des aufrufenden Objekts als DIR_x-Wert.
GetEffect=Fragt Effektdaten ab, oder ermittelt, ob ein bstimmter Effekt vorhanden ist. Der Rückgabetyp richtet sich nach dem abgefragten Wert. Wurde der Effekt nicht gefunden, wird immer 0 zurückgegeben.
GetEffectCount=Zählt die Effekte in einem Objekt oder globale Effekte.
GetEnergy=Liefert den aktuellen Energiewert des aufrufenden Objekts in Prozent. 100% stellen hierbei den maximalen Physical-Wert von 100000 dar. Siehe auch DefCore.txt Sektion [Physical].
GetEntrance=Liefert den aktuellen Eintrittsstatus des aufrufenden Objekts. TRUE bei erlaubtem Eintritt, FALSE bei verbotenem Eintritt.
GetGravity=Liest die Schwerkraft (in Prozent) aus.
GetHiRank=Liefert den höchstrangigen aktiven Clonk von player.
GetHomebaseMaterial=Bei angegebenen id gibt die Funktion die Menge der Objekte zurück, die der Spieler in seiner Heimatbasis kaufen kann. index und category werden hierbei ignoriert. Wird als id Null übergeben, liefert die Funktion den indizierten Objekttyp der entsprechenden Kategorie der kaufbaren Objekte des Spielers. Der Objekttyp (id) taucht in der Liste auf und wird zurückgeliefert, selbst wenn zur Zeit keine Objekte dieses Typs verfügbar sind.
GetHomebaseProduction=Bei angegebenen id gibt die Funktion zurück, wie schnell die Menge der Objekte in der Heimatbasis des Spielers nachgeliefert wird. index und category werden hierbei ignoriert. Wird als id Null übergeben, liefert die Funktion den indizierten Objekttyp der entsprechenden Kategorie der nachgelieferten Objekte des Spielers. Der Objekttyp (id) taucht in der Liste auf und wird zurückgeliefert, selbst wenn zur Zeit keine Objekte dieses Typs nachgeliefert werden.
GetID=Gibt die ID des aufrufenden Objekts zurück.
GetKiller=Liefert den Spieler, der zuletzt Energieabzug am aufrufenden Objekt verursacht hat.
GetLength=Ermittelt die Länge einer Zeichenkette oder eines Arrays.
GetMagicEnergy=Liefert den aktuellen Zauberenergiewert des aufrufenden Objekts.
GetMass=Liefert die Masse des aufrufenden Objekts (inklusive aller Inhaltsobjekte) oder der aufrufenden Definition.
GetMaterial=Fragt das Material an einer bestimmten Stelle der Landschaft ab. Der zurückgegebene Wert ist ein Materialindex, der mit anderen Indizes zum Beispiel über die Funktion Material() verglichen werden kann. Für Himmel gibt die Funktion -1 zurück.
GetMaterialCount=Liefert die in der Landschaft vorhandene Menge des angegebenen Materials.
GetMaterialVal=Gibt einen Eigenschaftswert einer Materialdefinition nach seinem Namen in der Materialdatei zurück.
GetMenu=Liefert die ID des Menüs, falls das Objekt ein Menü geöffnet hat. Normalerweise ist das die ID des Menüsymbols (symbol), wenn nicht bei CreateMenu explizit eine andere Menü-ID als idMenuID angegeben wurde. NONE bei keinem Symbol.
GetMenuSelection=Ermittelt den gerade ausgewählten Menüeintrag des geöffneten Menüs des aufrufenden Objekts, oder nil, wenn kein Menü geöffnet ist.
GetMissionAccess=Stellt fest und gibt zurück, ob der Spieler bereits das angegebene Missionszugangspasswort besitzt
GetName=Gibt den Namen eines Objekts oder einer Objektdefinition zurück. Hat das Objekt keinen eigenen Namen, wird der Name der Definition zurückgegeben.
GetNeededMatStr=Liefert die noch benötigten Baumaterialien des Objekts
GetObjectBlitMode=Liefert den aktuellen Zeichenmodus des aufrufenden Objekts.
GetObjectInfoCoreVal=Bei dem InfoCore handelt es sich um die Informationen eines CrewMembers, die in dem Spieler gespeichert werden (*.c4i). Dementsprechend gibt GetObjectInfoCoreVal einen Eigenschaftswert eines Crewmembers nach Namen in einer c4i-Datei zurück
GetObjectVal=Gibt einen Eigenschaftswert des aufrufenden Objekts nach seinem Namen in der Objects.txt zurück.
GetOCF=Liefert das Object-Character-Flag des aufrufenden Objekts. Dieser Wert beschreibt den aktuellen Zustand des Objekts. Der Rückgabewert ist eine Bitmaske und kann mit & mit einem OCF_x-Wert verglichen werden.
GetOwner=Ermittelt den Besitzer des aufrufenden Objekts.
GetPathLength=Sucht mittels des auch für die Clonk-Wegfindung benutzten Algorithmus einen Weg zwischen zwei Punkten der Landschaft und gibt dessen Länge zurück. Wurde kein Weg gefunden, gibt die Funktion 0 zurück.
GetPhase=Liefert die Aktivitätsphase des aufrufenden Objekts.
GetPhysical=Liefert die physischen Eigenschaften des Objekts oder der Definition im Aufrufkontext.
GetPlayerByIndex=Gibt die indizierte Spielernummer zurück. Die Funktion garantiert für Werte zwischen 0 und GetPlayerCount()-1, dass eine gültige Spielernummer zurückgegeben wird (denn durch eliminierte Spieler und Neubeitritte kann es vorkommen, dass "Löcher" unbelegter Spielernummern in der Liste entstehen!). Damit ist es einfacher, eine Schleife zu schreiben, die alle Spielernummern durchgeht. Ab 4.9.6.0 CR.
GetPlayerByName=Gibt die Spielernummer des angegebenen Spielers oder -1 wenn kein solcher Spieler gefunden wurde zurück.
GetPlayerCount=Liefert die Anzahl der Spieler, die momentan im Spiel sind.
GetPlayerID=Gibt die Spieler-ID eines beigetretenen Spielers zurück. Spieler-IDs werden von 1 hochgezählt, und - anders als Spielernummern - nicht wieder benutzt, nachdem ein Spieler eliminiert wurde. Jeder neu beigetetene Spieler hat also eine eigene ID.    
GetPlayerInfoCoreVal=Gibt einen Eigenschaftswert aus der Player.txt eines Spielers zurück.
GetPlayerName=Liefert den Namen eines Spielers. Wenn die Spielernummer zu keinem gültigen Spieler gehört, wird 0 zurückgegeben. Dadurch kann diese Funktion auch benutzt werden, um zu ermitteln, ob eine Spielernummer gültig ist.
GetPlayerTeam=Liefert das Team eines Spielers. Hat der Spieler kein Team, wird 0 zurückgegeben.    
GetPlayerType=Liefert den Typ eines Spielers.                
GetPlayerVal=Fragt Eigenschaftswerte eines Spielers anhand dessen Namen ab, wie sie beim Speichern eines Spiels in die game.txt geschrieben werden
GetPlrColor=Fragt die Spielerfarbe ab. Die Spielerfarbe wird verwendet, um einige Besitzobjekte wie Clonks oder Flaggen, sowie Textnachrichten dieses Spielers einzufärben.
GetPlrDownDouble=Gibt zurück, ob der angegebene Spieler als letzte Aktion Doppel-Stopp gedrückt hatte. Mit dieser Funktion kann z.B. in ControlThrow überprüft werden, ob der Spieler das selektierte Objekt ablegen wollte, anstatt es zu werfen          (Doppel-Stopp + Werfen).
GetPlrExtraData=Dieser Befehl fragt im Spieler gespeicherten Extra-Daten ab, die per SetPlrExtraData gesetzt wurden.
GetPlrKnowledge=Bei angegebenen id gibt die Funktion TRUE zurück, wenn der Spieler den Bauplan des betreffenden herstellbaren Objekts besitzt. index und category werden hierbei ignoriert. Wird als id Null übergeben, liefert die Funktion den indizierten Bauplan der entsprechenden Kategorie des Spielers.
GetPlrMagic=Stellt das Magiewissen eines bestimmten Spielers fest.
GetPlrValue=Liefert den Spielerwert (Wert aller Objekte im Besitz) eines Spielers.
GetPlrValueGain=Liefert die Änderung des Spielerwerts seit Beginn der Runde.
GetPlrView=Gibt das Objekt zurück, dem die Sicht eines Spielers folgt. Gibt 0 zurück, wenn kein Spieler mit der angegebenen Nummer existiert oder die Spielersicht keinem per Script gesetztem Objekt folgt (siehe GetPlrViewMode).    
GetPlrViewMode=Fragt den aktuellen Sichtmodus eines Spielers ab. Die Funktion gibt einen der folgenden Werte zurück: 0: Cursor - Die Sicht des Spielers folgt dem aktuell selektierten Clonk (siehe GetCursor) 1: Target - Die Sicht folgt einem anderen Objekt, welches durch den Befehl SetPlrView im Script gesetzt wurde. Siehe auch GetPlrView.            2: Scroll - Der Spieler bewegt seine Sicht unabhängig von der Position eines Objekts. Dies geschieht, wenn der Spieler die Maus an den Rand seines Sichtbereichs zieht.
GetPortrait=Fragt Name oder ID des Portraits des aufrufenden Crew-Mitglieds ab.
GetProcedure=Gibt die Prozedur der gegenwärtigen Aktivität des aufrufenden Objekts zurück (z.B. FLOAT, ATTACH, etc.). Bei einer NONE-Prozedur oder keiner Aktivität wird nil zurückgegeben.
GetProperty=Liefert die Eigenschaft key von object.
GetR=Liefert die Rotation des aufrufenden Objekts in Grad. Der Rückgabewert liegt zwischen -180° und 180°. 0° ist der Normalzustand.
GetRank=Liefert die Rang-Nummer des aufrufenden Objekts. 0 ist ein unbeförderter Clonk.
GetRDir=Liefert die Rotations-Geschwindigkeit des aufrufenden Objekts.		
GetScenarioVal=Fragt Eigenschaftswerte des Szenarios anhand dessen Namen/Sekion in der Scenario.txt ab
GetScore=Liefert die Punkte die player hat.
GetSeason=Liefert die aktuelle Jahreszeit. 0 ist Winter, 50 Sommer.
GetSelectCount=Liefert die Anzahl der ausgewählten Clonks von Spieler player.
GetSkyAdjust=Gibt die mit SetSkyAdjust gesetzte Himmelsmodulation zurück. Für weitere Informationen siehe SetSkyAdjust
GetSkyColor=Liefert den Farbwert des Himmels. Mit rgb_index kann angegeben werden ob entweder Rot (rgb_index ist 0), Grün (rgb_index ist 1) oder Blau (rgb_index ist 2) zurück gegeben werden soll. Mit index wird festgelegt von welchem Palettenindex (0 - 19) der Wert zurück gegeben werden soll.
GetSystemTime=Gibt die momentane Uhrzeit zurück.
GetTaggedPlayerName=Liefert den Namen eines Spielers mit Markup in dessen Spielerfarbe. Wenn die Spielernummer zu keinem gültigen Spieler gehört, wird 0 zurückgegeben. Dadurch kann diese Funktion auch benutzt werden, um zu ermitteln, ob eine Spielernummer gültig ist.
GetTeamByIndexGibt die indizierte Teamnummer zurück. Die Funktion garantiert für Werte zwischen 0 und GetTeamCount()-1, dass eine gültige Teamnummer zurückgegeben wird (denn durch eliminierte Spieler und Neubeitritte kann es vorkommen, dass "Löcher" unbelegter Teamnummern in der Liste entstehen!). Damit ist es einfacher, eine Schleife zu schreiben, die alle Teamnummern durchgeht.
GetTeamColorLiefert die Farbe eines Teams.    
GetTeamCountLiefert die Anzahl der Teams, die momentan im Spiel sind.
GetTeamNameLiefert den Namen eines Teams.
GetTemperature=Liefert die globale Temperatur. Werte abhängig von Klima und Jahreszeit zwischen +80 und -80.
GetTime=Gibt die Zeit seit Windowsstart in Millisekunden zurück. Kann zur genauen Zeitmessung verwendet werden.
GetType=Gibt den Typ des übergebenen Werts zurück.
GetUnusedOverlayID=Gibt eine ungenutzte Overlay-ID zurück. Es wird der erste freie Overlay nach base_index zurückgegeben.
GetValue=Gibt einen Objekt- oder Definitionswert zurück.Ein Objektwert berechnet sich folgendermaßen: Zunächst geprüft, ob eine CalcValue-Funktion im Script des Objekttyps vorhanden ist, und gegebenenfalls ausgewertet. Ansonsten wird der Definitionswert (siehe nächster Absatz) verwendet. Unabhängig davon wird der Wert des Objekts immer mit der Fertigstellung (GetCon()/100) multipliziert. Tote Lebewesen (GetCategory()&OCF_Living && !GetAlive()) haben immer den Wert 0.Der Definitionswert wird folgendermaßen ermittelt: Ist eine CalcDefValue-Funktion im Script vorhanden, wird diese ausgewertet. Ansonsten wird eine Wertüberladung aus der Scenario.txt verwendet. Ist diese ebenfalls nicht vorhanden, wird der in der DefCore angegebene Wert benutzt.
GetVertex=Liefert eine Koordinate des indizierten Vertex (siehe DefCore.txt) des aufrufenden Objekts. Koordinaten in Relation zur Objektmitte.
GetVertexNum=Liefert die Anzahl der Vertices des aufrufenden Objekts.
CheckVisibility=
GetWealth=Liefert das Vermögen von owner.
GetWind=Liefert die Windstärke und Richtung an der Position X, Y. Wird die Funktion aus einem Objekt heraus aufgerufen, so ist die Position relativ zur Objektposition. Wenn global=true, wird der globale Wind zurückgegeben.
GetX=Liefert die X-Position des aufrufenden Objekts.
GetXDir=Liefert die Geschwindigkeit in X-Richtung des aufrufenden Objekts.
GetY=Liefert die Y-Position des aufrufenden Objekts.
GetYDir=Liefert die Geschwindigkeit in Y-Richtung des aufrufenden Objekts.
GlobalN=Liefert den Inhalt der globalen Variable mit dem Namen text. Per GlobalN("Name")=Wert; kann der Wert einer benannten globalen Variable gesetzt werden.
goto=Setzt den Skriptzähler in Szenarioskripten auf den gewünschten Wert. Der Scriptzähler sorgt dafür, dass die ScriptXXX-Funktionen im Szenrienscript aufgerufen werden. Dies funktioniert nicht in Objektscripten, stattdessen sollten TimerCalls oder ActMaps mit StartCall/PhaseCall/EndCall verwendet werden.
GrabContents=Entfernt sämtlichen Inhalt von *obj, und gibt diesen dem aufrufenden Objekt.
GrabObjectInfo=Überträgt die Infosektion von einem anderen Objekt zu dem aufrufenden Objekt. Die Infosektion enthält Namen, Rang, permantente Physicals, usw. Mit diesem Befehl lassen sich beispielsweise Wiederbelebungen realisieren, indem einfach beim Tod eines Clonks ein neuer erstellt und die Infosektion übertragen wird.
Hostile=Prüft, ob zwei Spieler verfeindet sind. Dazu reicht es, wenn nur einer von beiden mit dem anderen Spieler verfeindet ist.
HSL=Setzt einen 32Bit-Farbwert aus den drei Parametern zusammen. 0-255 für alle Parameter.
HSL2RGBWandelt einen 24Bit HSL-Wert in den bekannten 32Bit RGB-Farbwert um. Der 24Bit HSL-Wert kann mit RGB(Hue,Saturation,Lightness) erzeugt werden.		
HSLa=Setzt einen 32Bit-Farbwert aus den drei Parametern und einem Durchsichtigkeitswert zusammen. 0-255 für alle Parameter.
Incinerate=Zündet das aufrufende Objekt an. In dem jeweiligen Objekt wird ggf. Incineration() aufgerufen
inherited=Ruft die überladene Funktion auf. Funktionen überladen sich, wenn sie beide den gleichen Namen haben.
InLiquid=Gibt TRUE zurück, wenn sich das aufrufende Objekt in einer Flüssigkeit befindet.
InsertMaterial=Fügt ein Materialpixel an der angegebenen Position in der angegebenen Geschwindigkeit ein.
Inside=Gibt TRUE zurück, wenn value >= lower_bound und value <= upper_bound ist.
IsNetwork=Prüft, ob das aktuelle Spiel ein Netzwerkspiel ist.
IsRef=Prüft, ob Value eine Referenz ist.
Jump=Veranlasst das Objekt dazu, zu springen. Dabei gelten sämtliche Beschränkungen, die auch bei Ansteuerung über die Tastatur gelten: Das Objekt kann nur springen, wenn es gerade steht (seine Action die Procedure "WALK" hat). Im Wasser wird die Action "Dive" aktiviert. Die Funktion gibt zurück, ob die Aktion erfolgreich durchgeführt wurde.          
Kill=Tötet das aufrufende Objekt. Nur Lebewesen.
LandscapeHeight=Gibt die Höhe der Landschaft in Pixel zurück.
LandscapeWidth=Gibt die Breite der Landschaft in Pixel zurück.
LaunchEarthquake=Erzeugt einen Erdbeben an angegebener Stelle. Koordinaten auch bei lokalem Aufruf global
LaunchLightning=Erzeugt einen Blitz. Dieser bewegt sich von der Position (x, y) mit der angegebenen Geschwindigkeit fort. Dabei geben xrange/yrange an, wie sehr der Blitz von diesem vorgegegebenen Weg abweichen kann (mit xrange = yrange = 0 würde der Blitz schnurgerade verlaufen). xrange/yrange sind sozusagen ein Maß für die "Zackigkeit" eines Blitzes. Die Position muss auch bei lokalem Aufruf in globalen Koordinaten angegeben werden.
LaunchVolcano=Erzeugt einen Vulkan an angegebener Position
LocalN=Gibt eine Referenz auf eine Objektlokale Variable zurück. Diese Referenz kann zum Lesen und Schreiben benutzt werden.
Log=Gibt einen Text im Messageboard am unteren Bildschirmrand aus. Die Parameter können über den C-Formatierungsstil in den Text eingebunden werden. Siehe dazu auch Format.
MakeCrewMember=Fügt das aufrufende Objekt (z.B. einen Clonk) der Crew eines Spielers hinzu. Das Objekt muss die CrewMember-Eigenschaft in der DefCore gesetzt haben. Gibt true zurück, wenn das Objekt erfolgreich der Crew hinzugefügt wurde.
Material=Gibt den Index eines Materials anhand seines Namens zurück. Dieser Index wird in den meisten materialbezogenen Funktionen verwendet.
MaterialName=Gibt den (internen, englischen) Namen eines Materials zurück.
Max=Gibt den größeren der beiden Werte zurück
Message=Zeigt eine Nachricht an. Diese kann nach dem C-Formatierungsstil formatiert werden (siehe Format)
Min=Gibt den kleineren der beiden Werte zurück
Music=Spielt ein Musikstück ab. Die entsprechende Datei muss in einer der aktiven Musikdateien vorhanden sein. Sind im ausgewählten Szenario Musikdateien vorhanden, gilt die Szenariodatei als aktive Musikdatei, andernfalls wird die globale Musikdatei Music.c4g genutzt.
MusicLevel=Setzt die Lautstärke, mit der die Hintergrundmusik abgespielt wird (siehe Music).
NoContainer=Konstante für FindObject: Suche außerhalb aller Objekte.
Object=Wandelt eine Objektnummer in einen Objektpointer um.
ObjectCall=
ObjectCount=Gibt die Anzahl der Objekte zurück, die das angegebenen Suchkriterien erfüllen. Die Suchkriterien werden mittels speziellen Kriteriums-Funktionen der Form "Find_*" angegeben.
ObjectDistance=Liefert die Distanz zwischen zwei Objekten. Ist obj 0, Wird die Distanz zwischen dem aufrufenden Objekt und obj2 gemessen.
ObjectNumber=Bestimmt die Nummer des aufrufenden Objekts. Diese Nummer ist eindeutig und kann mittels der Funktion Object in einen Objektpointer zurückverwandelt werden.
OnFire=Gibt zurück, ob das aufrufende Objekt brennt.
Par=Gibt einen der an die Funktion übergebenen Parameter zurück.
PathFree=Gibt zurück, ob der Weg zwischen den beiden angegebenen Punkten in der Landschaft frei ist, d.h., ob sich keine festen Materialien auf der Verbindungslinie zwischen den Punkten befinden.
PlaceAnimal=Erzeugt ein Lebewesen vom angegebenen Typ in der Landschaft. Die Startposition bestimmt sich dabei aus dem Wert Placement im DefCore des Lebewesens. Rückgabewert ist ein Zeiger auf das neu erzeugte Objekt.
PlaceObjectsErzeugt amount viele Objekte im angegebenen Zielrechteck (optional) im angegebenen Material. Gibt die Anzahl der Iterationen zurück, oder -1 wenn die Erzeugung fehlschlägt.		
PlaceVegetation=Platziert Vegetation im angegebenen Zielrechteck. Bei lokalen Aufrufen gelten die Koordinaten als Offset zur Mitte des aufrufenden Objekts. Rückgabewert ist ein Zeiger auf das neu erzeugte Objekt.
PlayerMessage=Gibt eine Nachricht nur im Viewport eines Spielers aus. Die Nachrichtenformatierung erfolgt analog zu Message.
PlrMessage=Gibt eine Nachricht nur im Viewport eines Spielers aus. Die Nachrichtenformatierung erfolgt analog zu Message.
Pow=Errechnet die Potenz von value1 und value2 ("X hoch Y")
PrivateCall=Ruft die private, geschützte oder öffentliche Funktion function in obj auf. Es sollte überlegt werden, ob der Aufruf wirklich nötig ist.
ProtectedCall=Ruft die geschützte oder öffentliche Funktion function in obj auf. Es sollte überlegt werden, ob der Aufruf wirklich nötig ist.
Punch=Schlägt obj.
PushParticles=Beschleunigt alle Partikel eines angegebenen Typs in die angegebene Richtung.
Random=Gibt eine Zufallszahl zwischen 0 und max-1 zurück. Der zurückgegebene Wert kann jedoch nicht höher als 32767 sein.
RandomX=Liefert einen Zufallswert zwischen value1 und value2. Dabei ist egal, welcher Wert der größere ist.
ReloadDef=Aktualisiert eine Definition. Dieser Befehl kann im Entwicklermodus in der Konsole eingegeben werden, nachdem die Definition auf der Festplatte verändert wurde. Sie muss zuvor geladen gewesen sein.
ReloadParticle=Aktualisiert eine Partikeldefinition. Dieser Befehl kann im Entwicklermodus in der Konsole eingegeben werden, nachdem die Definition auf der Festplatte verändert wurde. Sie muss zuvor geladen gewesen sein.
RemoveAll=Entfernt alle Objekte die den Suchkriterien entsprechen.
RemoveEffect=Löscht einen Effekt
RemoveObject=Entfernt das aufrufende Objekt.
RemoveVertex=Entfernt einen Vertex vom aufrufenden Objekt.
ResetGamma=Setzt eine Gammarampe auf den Normalwert zurück. Dies entspricht SetGamma(RGB(0,0,0), RGB(128,128,128), RGB(255,255,255), ramp_index);. Für weitere Informationen siehe SetGamma.
ResetPhysical=Setzt alle Physicals auf den Normalwert zurück. Für weitere Informationen siehe SetPhysical.
Resort=Sortiert ein Objekt neu in die Objektliste ein.
ResortObject=Sortiert das aufrufende Objekt neu in die Objektliste ein. Die Platzierung ergibt sich nach einer Platzierungsfunktion, die die Objektposition relativ zu jedem anderen Objekt in der Objektliste definieren sollte. Wenn das erste Objekt vor dem zweiten stehen sollte, muss die Funktion einen Wert kleiner Null zurückgeben. Ansonsten einen Wert größer oder gleich Null.
ResortObjects=Sortiert die Objektliste teilweise oder komplett neu. Dafür wird ein einfacher Sortierungsalgorithmus angewandt, der immer wieder die angegebene Funktion aufruft, welche dann die Relation zweier Objekte zueinander zurückgeben muss. Die beiden Objekte werden als Par(0) und Par(1) übergeben. Wenn das erste Objekt vor dem zweiten stehen sollte, muss die Funktion einen Wert kleiner Null zurückgeben. Ansonsten einen Wert größer oder gleich Null.
return=Beendet die aktuelle Funktion und gibt einen Wert an den Aufrufer zurück.
RGB=Setzt einen 32Bit-Farbwert aus den drei Grundfarben zusammen. 0-255 für alle Parameter.
RGB2HSLWandelt einen 32Bit-Farbwert in die entsprechenden Hue-, Saturation- und Lightness-Werte um wie bereits von Malprogrammen bekannt. Die HSL Werte werden ebenfalls als int zurückgegeben und können mit GetRGBaValue() oder SplitRGBaValue() weiter verwendet werden. Alle Werte sind von 0 bis 255 skaliert.		
RGBa=Setzt einen 32Bit-Farbwert aus den drei Grundfarben und einem Durchsichtigkeitswert zusammen. 0-255 für alle Parameter.
Schedule=Führt einen bestimmes Script mit Verzögerung aus.
ScheduleCall=Ruft eine Funktion nach einer angegebenen Verzögerung auf.
ScoreboardColWandelt eine Objektdefinitions-ID in eine Zahl um, die als Spaltenidentifikator für SetScoreboardData verwendet werden kann. Diese Funktion ist dann interessant, wenn ein Objekt auf das Scoreboard zugreifen will, aber dabei sicher stellen muss, dass es nicht dieselbe ID wie ein anderes Objekt verwendet.
ScriptCounter=Gibt den derzeitigen Stand des Scriptzählers fürs Szenarioscript an.
ScriptGo=Startet den Scriptzähler, bzw. hält ihn wieder an.
ScrollContents=Rotiert den Inhalt des aufrufenden Objekts. Dabei wird immer genau ein Objekt weiter gescrollt (im Gegensatz zu ShiftContents). Es wird außerdem kein ControlContents aufgerufen. Zurückgegeben wird ein Pointer auf das Objekt, das sich nach der Rotation am Anfang der Inhaltsliste befindet.
SelectCrew=Aktiviert bzw. deaktiviert ein Mannschaftsmitglied für die Steuerung.
SelectMenuItem=Setzt die Auswahl in einem Menü.
Sell=Verkauft das aufrufende Objekt mitsamt Inhalt.
SetAction=Setzt die Aktivität des aufrufenden Objekts. Siehe auch ActMap.txt.
SetActionData=Setzt den Zusatzparameter für die aktuell ausgeführte Aktivitäts-Prozedur. Die Auswirkung dieses Parameters hängt von der gesetzten Prozedur ab. Siehe dazu auch ActMap-Prozeduren.
SetActionTargets=Setzt die aktuellen Aktivitätszielobjekte des aufrufenden Objekts. Die Auswirkung der Zielobjekte richtet sich nach der Prozedur der aktuell gesetzten Aktivität.
SetAlive=Legt fest, ob ein Objekt lebt.
SetBit=Gibt die neue Bitmaske mit dem an bit_number durch bit ersetzten Bit zurück.
SetBridgeActionData=Setzt Zusatzparameter für eine aktuell ausgeführte BRIDGE-Prozedur des aufrufenden Objekts.
SetCategory=Ändert die Kategorie des aufrufenden Objekts.
SetClimate=Setzt das Klima (Durchschnittstemperatur).
SetClrModulation=Ändert die Farbmodulation des aufrufenden Objekts. Diese ist ein Farbwert, der multiplikativ aufgerechnet wird. Bei RGB(255,0,0) würden also nur die Rotanteile der Grafik gezeichnet werden. RGBa(255,255,255,128) würde die Grafik halbtransparent machen (sofern Alphaaddition nicht in den Grafikoptionen deaktiviert ist).
SetColor=Setzt die ColorByOwner-Färbung des aufrufenden Objekts. Dieser Aufruf entspricht dem Setzen eines neuen Besitzers mit SetOwner bei einem Spieler mit der Spielerfarbe color.
SetComDir=Setzt die Befehlsrichtung des aufrufenden Objekts (siehe GetComDir)
SetCommandGibt dem aufrufenden Objekt ein Kommando, welches dieses selbstständig (ggf. durch automatische Wegfindung) auszuführen versucht.
SetComponent=Setzt die Anzahl einer Komponente des aufrufenden Objekts.
SetCon=Setzt die Fertigstellung des aufrufenden Objekts auf den angegebenen Wert.
SetContactDensity=Legt fest, welche Dichte ein Material haben muss, damit das Objekt mit diesem kollidiert. Standardmäßig liegt dieser Wert bei 50 (dichtes Material).
SetController=Ändert den steuernden Spieler des aufrufenden Objekts.
SetCrewEnabled=Aktiviert oder deaktiviert Mannschaftsmitglieder. Deaktivierte Mannschaftsmitglieder können nicht mehr vom Spieler angewählt werden. So kann es auch passieren, dass ein Spieler zwar 0 Mannschaftsmitglieder zur Auswahl hat, aber trotzdem nicht eliminiert ist. Nur für Objekte, die auch wirklich zu einer Mannschaft gehören. Deaktivierte Mannschaftsmitglieder sind automatisch nicht mehr ausgewählt.
SetCrewExtraData=Mithilfe dieses Befehls können beliebige, scriptdefinierte Werte unter einem gegebenen Namen im Clonk in der Spielerdatei gespeichert werden. Auf diese Weise kann man Daten über einen Clonk in einer Spielerdatei über Szenariogrenzen hinweg erhalten (z.B. für RPGs) Zurückgegeben wird (wenn erfolgreich) der gesetzte Wert.
SetCrewStatus=Fügt das aufrufende Objekt (z.B. einen Clonk) der Crew eines Spielers hinzu oder entfernt dieses aus der Crew. Das Objekt muss die CrewMember-Eigenschaft in der DefCore gesetzt haben.
SetCursor=Setzt die Auswahlmarkierung eines Spielers auf ein Zielobjekt und aktiviert dieses für die Steuerung. Gibt false zurück falls das Zielobjekt momentan durch SetCrewEnabled deaktiviert ist.
SetDir=Setzt die Richtung des aufrufenden Objekts.
SetEntrance=Ermöglicht bzw. verhindert das Betreten eines Gebäudes. Nur lokale Aufrufe.
SetFilmView=Setzt die Sicht in Filmwiedergaben auf den angegebenen Spieler.
SetFoW=Schaltet den Nebel des Krieges für einen Spieler ein oder aus.
SetGameSpeed=Setzt die Spielgeschwindigkeit.
SetGamma=Setzt eine Gammarampe. Mit Gammarampen kann global das Aussehen des gesamten Spieles gesteuert werden, indem jedem Farbkanal eine eigene Tabelle zugewiesen wird, aus der die neue Helligkeit abgelesen wird. Damit kann man zum Beispiel bestimmte Farben speziell hervorheben, alles abdunkeln oder erhellen oder sogar das Bild komplett invertieren.
SetGraphics=Ändert die Grafik des aufrufenden Objekts. Diese beeinflusst die Darstellung des betreffenden Objekts überall im Spiel: In der Landschaft, im Menü oder auf Maussteuerungssymbolen.
SetGravity=Setzt die Schwerkraft. Dabei entspricht die Standardgravitation (100%) einer Beschleunigung von 0.2 Pixeln pro Tick² (Zunahme der YDir um 2 pro Tick bei precision=10)
SetHostility=Setzt das Bündnisverhältnis zwischen zwei Spielern einseitig.
SetLandscapePixel=Färbt ein Pixel in der Landschaft ein. Diese Funktion ist nicht im 8Bit-Grafiksystem verfügbar.
SetLength=Verändert die Länge eines Arrays auf den angegebenen Wert. Überzählige Elemente werden dabei gegebenenfalls gelöscht.
SetMass=Ändert die Eigenmasse des aufrufenden Objekts. Die Eigenmasse entspricht dem in der DefCore.txt angegebenen Wert unter [DefCore], Mass. Die tatsächliche Objektmasse ergibt sich durch Hinzurechnen der Masse aller enthaltenen Objekte.
SetMatAdjust=Setzt die Materialmodulation. Die Materialfarben werden mit der angegebenen Farbe so verrechnet wie auch ColorByOwner-Grafiken.
SetMaxPlayer=Ändert die Maximalzahl der Spieler, die an der Runde teilnehmen können. Dieser Wert wirkt sich nur auf Neubeitritte aus; es werden keine vorhandenen Spieler eliminiert, um das Limit zu erfüllen.
SetMenuSize=Ändert die Größe eines Objektmenüs, so dass die vorgegebene Anzahl an Menüeinträgen in Breite und Höhe hineinpassen.
SetObjDrawTransform=Transformiert die Grafik des aufrufenden Objektes.
SetObjectBlitMode=Ändert den Zeichenmodus für das aufrufende Objekt. Die möglichen Werte entsprechen denen des DefCore-Flags BlitMode (siehe Anmerkung). Die Funktion gibt jeweils den vorher gesetzten Blitmodus zurück.
SetObjectOrder=Sorgt dafür, dass ein Objekt mit Sicherheit vor oder hinter einem anderen Objekt angeordnet ist. Dadurch lässt sich beispielsweise sicherstellen, dass sich ein Fahrstuhlkorb immer vor dem zugehörigen Fahrstuhl befindet.
SetOwner=Ändert den Besitzer des aufrufenden Objekts.
SetPhase=Setzt die Aktivitätsphase des aufrufenden Objekts.
SetPhysical=Ändert die physischen Eigenschaften des aufrufenden Objekts. Hiermit können die in der Physical-Sektion der DefCore.txt angegebenen Werte temporär oder permanent angepasst werden.
SetPicture=Ändert die Repräsentativgrafik des aufrufenden Objekts auf ein neues Zielrechteck der aktuell benutzten Grafik. Die Repräsentativgrafik wird beispielsweise im Menü oder der Inventarliste des ausgewählten Clonks verwendet. Siehe auch Eintrag Picture in der DefCore.txt.
SetPlayerTeamTeilt einen Spieler einem neuen Team zu. Es wird geprüft, ob in dem neuen Team noch Platz ist (anhand des MaxPlayer-Werts).
SetPlayList=Setzt die Liste der Musikstücke, die in zufälliger Reihenfolge abgespielt werden sollen (wenn die Musik aktiviert ist). Zurückgegeben wird die Anzahl der aktivierten Musikstücke (Im Netzwerk wird allerdings immer 0 zurückgegeben).
SetPlrExtraData=Mithilfe dieses Befehls können beliebige, scriptdefinierte Werte unter einem gegebenen Namen in der Spielerdatei gespeichert werden. Auf diese Weise kann man Daten über einen Spieler über Szenariogrenzen hinweg erhalten (z.B. für RPGs) Zurückgegeben wird (wenn erfolgreich) der gesetzte Wert.
SetPlrKnowledge=Fügt einen Bauplan zum Wissen des Spielers hinzu (oder entfernt ihn bei angegebenem remove).
SetPlrMagic=Fügt einen Zauber der Liste der verfügbaren Zauber eines Spielers hinzu oder entfernt einen Zauber aus der Liste.
SetPlrShowCommand=
SetPlrShowControl=
SetPlrShowControlPos=
SetPlrView=Zentriert das Sichtfenster eines Spielers auf ein Objekt. Die Sicht folgt dem Objekt bis zum nächsten Spielerkommando.
SetPlrViewRange=Setzt die Sichtweite des aufrufenden Objekts.
SetPortrait=Ändert das Portrait des aufrufenden Crew-Mitglieds während des Spiels.
SetPosition=Verschiebt das aufrufende Objekt an die angegebene Position. Dabei wird das Objekt an die exakte Pixelposition gesetzt, und eventuelle, interne Verschiebungen um Pixelbruchteile werden verworfen.
SetProperty=Setzt die Eigenschaft key von object auf value. Die Eigenschaft muss vorher nicht existiert haben.
SetR=Setzt die Drehung des aufrufenden Objekts.
SetRDir=Setzt die Drehungsgeschwindigkeit des aufrufenden Objekts.
SetRGBaValueSetzt einen einzelnen Farbwert des angegebenen 32bit-Farbewerts.		
SetScoreboardDataSetzt Daten im Scoreboard. Das Scoreboard ist eine globale Tabelle, die Szenarien nutzen können um zum Beispiel den aktuellen Punktestand aller Spieler oder sonstige Rundendaten darzustellen. Es wird vom Spieler standardgemäß mit der Taste Tab aufgerufen, kann aber auch per Script mit DoScoreboardShow forciert gezeigt oder verborgen werden. Das Scoreboard wird automatisch erstellt, sobald Daten darin gesetzt werden. Es wird automatisch gelöscht, wenn es außer Überschriften keine Daten mehr enthält.	Daten werden über einen Zeilen- und Spaltenindex adressiert. Werte mit gleichem Zeilenindex landen in der gleichen Zeile; Werte mit gleichem Spaltenindex in der gleichen Spalte. Existieren noch keine Daten für einen Zeilen- bzw. Spaltenindex, so wird die Zeile bzw. Spalte neu angelegt und unten bzw. rechts angehängt. Es ist also nicht entscheidend, welche Indizes verwendet werden, solange sie eindeutig sind. Es können z.B. Spielernummern, Spieler-IDs (siehe GetPlayerID) oder Team-IDs (siehe GetPlayerTeam) angegeben werden. Damit mehrere Objektdefinitionen wie zum Beispiel ein Todeszähler nicht dieselben IDs für Spalten verwenden, gibt es die Funktion ScoreboardCol, die aus einer ID einen eindeutige Spaltenindex generiert. Dabei ist natürlich trotzdem darauf zu achten, dass mehrere solcher Objekte die gleichen Zeilenadressierungen verwenden. Indizes müssen nicht fortlaufend sein; Zeilen und Spalten werden nach Reihenfolge des Hinzufügens und nicht nach Indizes sortiert. Für benutzerdefinierte Sortierungen (zum Beispiel absteigend nach Punkten für eine Bestenliste) dient die Funktion SortScoreboard.    
SetSeason=Setzt die Jahreszeit.
SetShape=Ändert das interne Objektrechteck des aufrufenden Objekts. Das Objektrechteck wird beispielsweise für Kollisionsabfragen verwendet. Dies hat keine Auswirkung auf die Darstellung des Objekts.
SetSkyAdjust=Setzt die Himmelsmodulation. Die Himmelsfarben werden mit der angegebenen Farbe so verrechnet wie auch ColorByOwner-Grafiken.
SetSkyParallax=Verändert Parallaxität und Scrollgeschwindigkeit des Himmels.
SetSolidMask=Setzt einen neuen, festen Bereich eines Objekts. Das Quellrechteck der Grafik gibt dabei an, welche Pixel im Rechteck fest werden sollen: Alle Pixel, die zu weniger als 50% transparent sind, werden fest. Siehe auch Eintrag SolidMask in der DefCore.txt.
SetSpeed=Setzt die Geschwindigkeit eines Objekts.
SetTemperature=Setzt die globale Temperatur.
SetTransferZone=Setzt einen neuen Transferbereich für das aufrufende Objekt. Führt die Suche der Wegfindung durch einen Transferbereich (dieser gilt für die Wegfindung immer als komplett durchlaufbar), werden für den Clonk ControlTransfer-Aufrufe an das Script des Objekts aufgerufen. In diesen sollte mit Hilfe von Befehlen dafür gesorgt werden, dass der Clonk an seine Zielposition kommt.
SetVertex=Setzt eine Koordinate des indizierten Vertex (siehe DefCore.txt) eines Objekts. Koordinaten in Relation zur Objektmitte.
SetVertexXY=Setzt X und Y eines Vertices zugleich
SetViewOffset=Verschiebt die Sicht eines Spielers permanent um einen bestimmten Betrag. Ein erneuter Aufruf überschreibt die Verschiebung wieder, ein Aufruf mit 0-Koordinaten setzt die Sicht wieder in den Normalzustand zurück.
SetVisibilityVerändert die Sichtbarkeit eines Objekts. Objekte können für beliebige Gruppen sichtbar gemacht werden, indem für dwVisibility eine Bitmaske angegeben wird.		
SetWealth=Setzt das Vermögen eines Spielers.
SetWind=Setzt die globale Windrichtung und -stärke.
SetXDir=Setzt die horizontale Geschwindigkeit des aufrufenden Objekts.
SetYDir=Setzt die vertikale Geschwindigkeit des aufrufenden Objekts.
ShakeFree=Löst innerhalb eines kreisförmigen Bereiches halbfestes Material in der Landschaft. Für gelöstes Material wird neu geprüft, ob es in darunterliegendes Material fallen kann. Dadurch kann man zum Beispiel Höhlendecken einstürzen lassen.
ShakeObjects=Schüttelt innerhalb eines kreisförmigen Bereiches alle Lebewesen durch. Dieses Verhalten ist vergleichbar mit Fling()-Aufrufen mit kleinen Zufallswerten auf alle Objekte im Zielbereich.
ShiftContents=Sortiert die Inhaltsobjekte des aufrufenden Objekts so um, dass das nächste Objekt mit anderer ID vorne liegt. Die häufigste Anwendung für diesen Befehl ist ein Inventarwechsel.
ShowInfo=Zeigt die Beschreibung eines Objekts in einem kleinen Informationsfenster (intern ein Menü) beim aufrufenden Objekt an.
SimFlight=Simuliert die Bewegung eines freien Falles mit Anfangsgeschwindigkeit in die angegebene Richtung. Wenn die simulierte Bewegung ein Material mit der gewünschten Dichte durchläuft, gibt diese Funktion true zurück, ansonsten false. Bei true wird die X- und Y-Position des Aufpralls in den angegebenen Variablen für x und y gespeichert, die Aufprallgeschwindigkeit in den angegebenen Variablen fü xdir und ydir. Siehe dazu Referenzen.
Sin=Liefert sin(angle) * radius.
SkyPar_Keep=Konstante für SetSkyParallax.
Smoke=Erzeugt eine Rauchwolke an der angegebenen Position.
SortScoreboardSortiert die Zeilen des Scoreboards nach den Extradaten einer Spalte. Wenn zwei Einträge in dieser Spalte die gleichen Werte besitzen, wird nicht umsortiert. So kann durch sukzessive Aufrufe dieser Funktion nach mehreren Spalten sortiert werden.    
Sort_Distance=Sortierkriterium: Sortiert die gefundenen Objekte nach Entfernung zum angegebenen Bezugspunkt. Die nahesten Objekte zuerst.
Sort_Func=Sortierkriterium: Sortiert die gefundenen Objekte anhand des int-Rückgabewertes der angegebenen Funktion. Je kleiner der Wert, desto weiter vorne steht das Objekt im Array.
Sort_Mass=Sortierkriterium: Sortiert die gefundenen Objekte nach ihrer Masse. Die leichtesten Objekte zuerst.
Sort_Multiple=Sortierkriterium: Ermöglicht das Sortieren nach mehreren Kriterien. Das erste Kriterium hat höchste Priorität.
Sort_Random=Sortierkriterium: Sortiert die gefundenen Objekte zufällig.
Sort_Reverse=Sortiermodifikator: Kehrt die Sortierung der angegebenen Sortierfunktion um.
Sort_Speed=Sortierkriterium: Sortiert die gefundenen Objekte nach Geschwindigkeit. Die langsamsten Objekte zuerst.
Sort_Value=Sortierkriterium: Sortiert die gefundenen Objekte nach ihrem Wert. Die wertlosesten Objekte zuerst.
Sound=Spielt einen Sound ab. Die entsprechende Sounddatei muss in der Gruppendatei Sound.c4g, in der aktiven Szenariodatei oder in einer geladenen Objektdefinition vorhanden sein. Bei lokalen Aufrufen werden Geräusche abhängig von der aktuellen Position des aufrufenden Objekts abgespielt.
SplitRGBaValueZerstückelt den 32Bit-Farbwert und schreibt die einzelnen Farbwerte in die jeweiligen angegeben Variablen.		
Sqrt=Zieht die Wurzel aus dem ersten Parameter. Ist der Parameter kleiner als 0, wird einfach 0 zurückgegeben.
StartScriptProfiler=Startet den Scriptprofiler.
StopScriptProfiler=Stoppt den Scriptprofiler, und gibt das Ergebnis im Log aus.
Stuck=Ermittelt, ob das aufrufende Objekt feststeckt, d.h., ob sich einer seiner Vertices in festem Material befindet.
Tan=Liefert tan(angle) * radius.
this=Liefert einen Zeiger auf das Objekt, in dem der Script ausgeführt gerade wird.
ToggleBit=Gibt die neue Bitmaske mit dem an der angegebenen Stelle umgedrehten Bit zurück
TrainPhysical=Erhöht den Wert der physischen Eigenschaft des aufrufenden Objekts um den in train_by angegebenen Wert. Mit diesem Aufruf werden sowohl die permanenten, als auch temporäre und temporär gestapelte Physicals trainiert. Dieser Befehl kann beispielsweise genutzt werden, um nach einem Zauber die Magiephysical zu trainieren.
UnselectCrew=Wählt die gesamte Mannschaft eines Spieler ab. Nach dem Aufruf dieses Befehls sollte mit SelectCrew wieder ein Clonk angewählt werden.
VarN=Gibt eine Referenz auf eine funktionslokale Variable zurück. Diese Referenz kann zum Lesen und Schreiben benutzt werden.
VerticesStuck=Liefert die Anzahl feststeckender Vertices von *obj
WildcardMatchPrüft, ob zwei Strings gleich sind. Die Prüfung ist case-sensitiv, außerdem können Wildcards benutzt werden.
_inherited=Ruft die überladene Funktion auf. Funktionen überladen sich, wenn sie beide den gleichen Namen haben. Die Funktion ist im Gegensatz zu inherited außerdem failsafe. Das heißt, dass es zu keinem Fehler führt, wenn die Ursprungsfunktion gar nicht existiert.
AsyncRandom=
SetKiller=
SetName=
CreatePropList=
ClearLastPlrCom=
GetPlrControlName=
SurrenderPlayer=
SetLeaguePerformance=
GetViewCursor=
SetViewCursor=
GetTexture=
BlastObject=
BlastFree=
DrawVolcanoBranch=
SetMenuDecoration=
SetMenuTextProgress=
GetLeague=
TestMessageBoard=
CallMessageBoard=
AbortMessageBoard=
OnMessageBoardAnswer=
ActivateGameGoalMenu=
CastBackParticles=
GetMatAdjust=
GetObjectLayer=
SetObjectLayer=
DrawMatChunks=
SetTextureIndex=
RemoveUnusedTexMapEntries=
SetObjDrawTransform2=
LoadScenarioSection=
SetObjectStatus=
GetObjectStatus=
AdjustWalkRotation=
FxFireStart=
FxFireTimer=
FxFireStop=
FxFireInfo=
ModulateColor=
SetPreSend=
GetTeamConfig=
InitScenarioPlayer=
GetScoreboardString=
GetScoreboardData=
AddEvaluationData=
HideSettlementScoreInEvaluation=
FatalError=
PlayVideo=
StartCallTrace=
PauseGame=
ExecuteCommand=
LocateFunc=
SetNextMission=
IncinerateLandscape=
Equal=
PlayerObjectCommand=
PathFree2=
GameCallEx=
AddMessage=
DebugLog=
GetIndexOf=
Anim_AbsX=Der Wert hängt von der Bewegung des Objekts in X-Richtung ab. Jeder Pixel den sich das Objekt in X-Richtung bewegt erhöht den Wert etwas. Wenn end erreicht wurde wird der Wert wieder auf begin zurückgesetzt. Im Gegensatz zu Anim_X bewegt sich der Wert immer auf end zu, egal in welche Richtung sich das Objekt bewegt.
Anim_AbsY=Der Wert hängt von der Bewegung des Objekts in Y-Richtung ab. Jeder Pixel den sich das Objekt in Y-Richtung bewegt erhöht den Wert etwas. Wenn end erreicht wurde wird der Wert wieder auf begin zurückgesetzt. Im Gegensatz zu Anim_Y bewegt sich der Wert immer auf end zu, egal in welche Richtung sich das Objekt bewegt.
Anim_Action=Der Wert hängt von der Phase der aktuellen Action ab. Die Phase wird linear auf die von der Action zur Zeit abgespielte Animation abgebildet (siehe ActMap). Dies kann verwendet werden um Animationen synchron zur ActMap-Animation zu spielen.
Anim_Const=Wertangabe für PlayAnimation, SetAnimationPosition oder SetAnimationWeight: Über die komplette Zeitdauer der Animation wird der gegebene konstante Wert verwendet.
Anim_Linear=Der Wert nimmt linear mit der Zeit (in Frames) zu oder ab (je nachdem ob end größer oder kleiner als begin ist). Anfangs beträgt der Wert position und läuft dann Richtung end. Ein Durchgang von begin bis nach end dauert length Frames. Wenn position von begin abweicht dann wird end bereits früher erreicht sein. on_ending bestimmt, was passiert, wenn das Ende erreicht ist.
Anim_X=Der Wert hängt von der Bewegung des Objekts in X-Richtung ab. Jeder Pixel den sich das Objekt in positiver X-Richtung bewegt erhöht den Wert etwas, und jeder Pixel in negative X-Richtung verringert ihn etwas. Wenn end erreicht wurde wird der Wert wieder auf begin zurückgesetzt, und wenn begin erreicht wurde wird er auf end gesetzt.
Anim_XDir=Der Wert ist proportional zur X-Geschwindigkeit des Objekts. Die Geschwindigkeiten 0 bis max_dir werden linear auf den Wertebereich von begin bis end abgebildet.
Anim_Y=Der Wert hängt von der Bewegung des Objekts in Y-Richtung ab. Jeder Pixel den sich das Objekt in positiver Y-Richtung bewegt erhöht den Wert etwas, und jeder Pixel in negative Y-Richtung verringert ihn etwas. Wenn end erreicht wurde wird der Wert wieder auf begin zurückgesetzt, und wenn begin erreicht wurde wird er auf end gesetzt.
Anim_YDir=Der Wert ist proportional zur Y-Geschwindigkeit des Objekts. Die Geschwindigkeiten 0 bis max_dir werden linear auf den Wertebereich von begin bis end abgebildet.
ExtractLiquid=Saugt ein Pixel Flüssigkeit an der angegebenen Position ab. Zurückgegeben wird die Materialnummer des abgesogenen Materials; bei Misserfolg -1.
Find_Action=Suchkriterium: sucht alle Objekte mit der entsprechenden Aktion.
Find_ActionTarget=Suchkriterium: sucht alle Objekte mit dem entsprechenden ersten Aktionsziel.
Find_Allied=Suchkriterium: sucht alle Objekte die Spielern gehören, die mit dem angegebenen Spieler verbündet sind.
Find_And=Suchkriterium: sucht Objekte, auf die alle angegebenen Suchkriterien zutreffen.
Find_AnyContainer=Suchkriterium: sucht alle Objekte die irgendwo enthalten sind.
Find_AtPoint=Suchkriterium: sucht alle Objekte, deren Grafikbereich (Shape) den angegebenen Punkt überlappt.
Find_Category=Suchkriterium: sucht alle Objekte mit der entsprechenden Kategorie.
Find_Container=Suchkriterium: sucht alle Objekte im angegebenen Behälter.
Find_Distance=Suchkriterium: Sucht alle Objekte, die höchstens den angegebenen Radius vom Bezugspunkt entfernt sind. Wird kein Bezugspunkt angegeben, gilt der Mittelpunkt des aufrufenden Objektes.
Find_Exclude=Suchkriterium: das angegebene Objekt wird von der Suche ausgeschlossen.
Find_Func=Suchkriterium: sucht alle Objekte bei denen der Aufruf der angegebenen Funktion true liefert. Wenn es eine lokale Funktion gibt, wird diese aufgerufen, sonst wenn vorhanden eine globale.
Find_Hostile=Suchkriterium: sucht alle Objekte die Spielern gehören, die mit dem angegebenen Spieler verfeindet sind.
Find_ID=Suchkriterium: sucht alle Objekte mit der angegeben ID.
Find_InRect=Suchkriterium: sucht alle Objekte im angegebenen Suchrechteck.
Find_NoContainer=Suchkriterium: sucht alle Objekte die im Freien sind.
Find_Not=Suchkriterium: findet genau alle Objekte, die nicht das angegebene Kriterium erfüllen.
Find_OCF=Suchkriterium: Sucht alle Objekte, bei denen eine der angegebenen Object-Character-Flags gesetzt ist.
Find_Or=Suchkriterium: sucht alle Objekte, auf die mindestens eines der angegebenen Suchkriterien zutrifft.
Find_Owner=Suchkriterium: sucht alle Objekte die dem angegebenen Spieler gehören.
for=Siehe Die For-Schleife
GetActMapVal=Fragt Aktionsdaten aus der ActMap.txt anhand deren dortigem Namen ab.
GetMeshMaterial=Gibt zurück, welches Material das Mesh des aufrufenden Objekts gerade gesetzt hat.
if=Wenn condition ungleich Null, wird der unmittelbar folgende Block bzw. die unmittelbar folgende Anweisung einmal ausgeführt.
SetAttachBones=Wurde zuvor mit AttachMesh ein Mesh an einem anderen befestigt, so kann mit dieser Funktion einer oder beide der Bones geändert werden mit denen sie aneinander hängen. Um nur einen Bone zu ändern kann für den anderen Parameter nil angegeben werden.
SetAttachTransform=Wurde zuvor mit AttachMesh ein Mesh an einem anderen befestigt, so kann mit dieser Funktion die Transformation des angehängten Meshes geändert werden.
Split2Components=Zerlegt ein Objekt in seine Bestandteile. Die Bestandteile werden in zufälliger Drehung und mit geringer Geschwindigkeit in zufälliger Richtung an der Stelle erzeugt, an der sich das Objekt befand. Das Objekt wird anschließend vernichtet. Wenn sich das Objekt in einem Behälter befand, werden auch die Komponenten nach der Erschaffung in den Behälter versetzt.
Trans_Identity=Liefert eine 3x4-Einheitsmatrix. Sie kann als Transformation für AttachMesh oder für die "PictureTransformation" oder "MeshTransformation"-Eigenschaften (siehe Meshes) verwendet werden.
Trans_Mul=Multipliziert zwei oder mehr 3x4-Transformationsmatrizen in der gegegebenen Reihenfolge. Somit können die Effekte mehrerer Transformationen miteinander kombiniert werden. Das Ergebnis kann als Transformation für AttachMesh oder für die "PictureTransformation" oder "MeshTransformation"-Eigenschaften (siehe Meshes) verwendet werden.
Trans_Rotate=Liefert eine 3x4-Rotationsmatrix welche eine Drehung um die Achse (rx, ry, rz) um angle Grad beschreibt. Sie kann als Transformation für AttachMesh oder für die "PictureTransformation" oder "MeshTransformation"-Eigenschaften (siehe Meshes) verwendet werden.
Trans_Scale=Liefert eine 3x4-Skalierungsmatrix. Sie kann als Transformation für AttachMesh oder für die "PictureTransformation" oder "MeshTransformation"-Eigenschaften (siehe Meshes) verwendet werden.
Trans_Translate=Liefert eine 3x4-Verschiebungsmatrix. Sie kann als Transformation für AttachMesh oder für die "PictureTransformation" oder "MeshTransformation"-Eigenschaften (siehe Meshes) verwendet werden.
while=Solange condition ungleich Null ist, wird der unmittelbar folgende Block bzw. die unmittelbar folgende Anweisung ausgeführt.
