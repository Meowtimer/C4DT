[Functions]
	[_inherited]
	Description=Calls the overloaded function. A function will overload another function if it is declared in the same scope with the same name. As opposed to, this method is also failsafe, meaning it will not cause an error if the original function doesn't really exist.

	[Abs]
	Description=Returns the absolute value of the given parameter, ignoring the sign of the value.
		[value]
		Description=Absolute coordinate you want to convert to a relative coordinate.


	[AbsX]
	Description=If called from an object, this function returns the given X coordinate relative to the object's center. Otherwise, the original coordinate is returned.
		[x]
		Description=X


	[AbsY]
	Description=If called from an object, this function returns the given Y coordinate relative to the object's center. Otherwise, the original coordinate is returned.
		[y]
		Description=Y


	[ActIdle]
	Description=Checks whether an object is currently performing an activity.

	[AddCommand]
	Description=Adds a command to the top of the command stack of an object (also see). This command will be executed first, then the object will continue with the existing commands. If the command stack is empty, AddCommand does the same as.For the list of commands see.
		[command]
		Description=Command name (as string). See the table below.

		[target]
		Description=target object for the command

		[x]
		Description=X target coordinate

		[y]
		Description=Y target coordinate

		[target2]
		Description=secondary target object

		[delay]
		Description=Time (in ticks or frames) until the command is automatically aborted. Execution will continue with the next command in the stack.

		[Data]
		Description=additional data for the command

		[retries]
		Description=Number of retries if the command fails, until the command fails completely.

		[base_mode]
		Description=Determines the behaviour if the command fails.
		[AddEffect]
	Description=Creates an effect. Returns the effect if successful orif not (e.g. because the effect was rejected). If the effect was accepted by another effect which is deleting itself within the same call, the return value is probably.
		[name]
		Description=Name of the effect without prepended 'Fx'.

		[target]
		Description=Target object for the effect. If, a global effect is created.

		[priority]
		Description=Effect priority. Must be greater than zero.

		[timer]
		Description=Interval for the timer calls. With, no timer calls are made and the effect stays on permanently until it is deleted by other calls.

		[command_target]
		Description=Command target. If specified, all callbacks are executed in this object. Otherwise the callbacks are made without any object context. If the command target object is deleted, all effects belonging to this object are deleted without any further callbacks. If the target object changes its definition, belonging effects should reassign their callback functions using.

		[command_target_id]
		Description=Definition in which callbacks are to be executed if no command target object is specified. If both command_target and command_target_id are, callbacks are made globally. For this, the Fx* must also be declared globally or they must be engine functions.

		[var1]
		Description=First extra parameter to be passed to Fx*Start and Fx*Effect callbacks.

		[var2]
		Description=Second extra parameter to be passed to Fx*Start and Fx*Effect callbacks.

		[var3]
		Description=Third extra parameter to be passed to Fx*Start and Fx*Effect callbacks.

		[var4]
		Description=Fourth extra parameter to be passed to Fx*Start and Fx*Effect callbacks.


	[AddMenuItem]
	Description=Adds a menu entry.
		[caption]
		Description=Text of the new menu entry

		[command]
		Description=Command to be executed when the menu item is selected. This can be either a function name or a statement. If a function name is given then the function will be called in the object which was given as command_object to.

		[symbol]
		Description=The ID is used as a picture for the menu item. The name of the definition can be used in caption using %s. Also the ID is passed as the first parameter to the call to command in case it is a function name.

		[count]
		Description=Numeric value to be displayed next to the menu entry (such as counts and amounts).

		[parameter]
		Description=Second parameter to the function specified in command (see remark).

		[info_caption]
		Description=Description text of the new menu entry.

		[extra]
		Description=Extra parameter for special behaviour of the menu entry.Lower 7 bits (0-127): menu symbol.0: normal1: rank symbol. With symbol specified, the Rank.png component of that definition will be used. count indicates the rank2: picture facet, shifted to the right by XPar1 times the facet width. This is used to include multiple menu symbols in a single definition.3: XPar1 specifies an object to be drawn with the rank symbol. If the object has no info section (and thus no rank), there will be an empty entry in context menus.4: XPar1 specifies an object to be drawn.Bit 8 (128): XPar2 is used as object value and overrides the normal object value. Also see extra in
		[XPar1]
		Description=First additional parameter for extra.

		[XPar2]
		Description=Second additional parameter for extra.


	[AddMsgBoardCmd]
	Description=Creates a user-defined messageboard command. This command can be entered by any player using the syntax "/
		[command]" in the message board. This will execute the defined script. The script can use "%s" to incorporate parameters.
		[command]
		Description=Name of messageboard command

		[script]
		Description=Script to be executed


	[AddVertex]
	Description=Adds a new vertex to an object.
		[x]
		Description=X coordinate, relative to the object center

		[y]
		Description=Y coordinate, relative to the object center


	[Angle]
	Description=Returns the view angle from the first point to the second in degrees. 0Â° ist straight up. All coordinates global.
		[x1]
		Description=X coordinate of the first point

		[y1]
		Description=Y coordinate of the first point

		[x2]
		Description=X coordinate of the second point

		[y2]
		Description=Y coordinate of the second point

		[precision]
		Description=Multiplied with the angle. For a higher precision while working with integers (whole numbers) you can specify a higher precision value. A precision of 10 will produce values from 0 to 3600.


	[Anim_AbsX]
	Description=The value depends on the movement of the object into X direction. Every pixel the object moves into X direction increases the value a little bit. Once end has been reached the value is reset to begin. In contrast tothe value moves towards end not depending on whether the object moves to the left or to the right.
		[position]
		Description=Start value. Should be inside the interval given by begin and end.

		[begin]
		Description=Start of the interval.

		[end]
		Description=End of the interval. If end is greater than begin then the value increases with every movement of the object, otherwise it decreases.

		[length]
		Description=Number of pixels to be moved into X direction for the animation to be played from begin to end.


	[Anim_AbsY]
	Description=The value depends on the movement of the object into Y direction. Every pixel the object moves into Y direction increases the value a little bit. Once end is reached the value is reset to begin. In contrast tothe value always moves towards end, not depending on whether the object moves upwards or downwards.
		[position]
		Description=Start value. Should be inside the interval given by begin and end.

		[begin]
		Description=Start of the interval.

		[end]
		Description=End of the interval. If end is greater than begin then the value increases with every movement of the object, otherwise it decreases.

		[length]
		Description=Number of pixels that need to be moved in Y direction for the animation to be played from begin to end.


	[Anim_Action]
	Description=The value depends on the phase of the current action. The phase is mapped linearily to the length of the animation the current action is playing. This can be used to play animations synchronized to the ActMap animation.

	[Anim_Const]
	Description=Value provider for,or: For the whole animation the given constant value will be used.
		[value]
		Description=Value to use.


	[Anim_Linear]
	Description=The value increases or decreases (depending on whether end is smaller or larger than begin) linearily in time (in frames). Initially the value is set to position and it is moving towards end. One cycle from begin to end lasts for length frames. If position and begin are not the same then end will be reached earlier already. on_ending specifies what happens once the end is reached.
		[position]
		Description=Start value. Should be inside the interval given by begin and end.

		[begin]
		Description=Start of the interval.

		[end]
		Description=End of the interval. If end is larger than begin then the value increases linearily with time, otherwise it decreases.

		[length]
		Description=Number of frames for the animation to be played from begin to end.

		[on_ending]
		Description=Specifies what happens once end is reached. There are the following possibilities:were called to the exact point in time. For combination nodes the child node with the smaller weight is removed.
		[Anim_R]
	Description=The value depends on the rotation of the object. Upward rotation (0 degrees) is mapped to the value given by begin, and moves toward end when the object rotates clockwise, up to end after one revolution (360 degrees).
		[begin]
		Description=Start of the interval.

		[end]
		Description=End of the interval. If end is chosen to be greater than begin then the value increases with clockwise rotation, otherwise it decreases.


	[Anim_X]
	Description=The value depends on the movement into X direction. Every pixel moved into positive X direction increases the value a little bit, and each pixel moved into negative X direction decreases it. If end was reached then the value is reset to begin and if begin was reached then the value is reset to end.
		[position]
		Description=Start value. Should be inside the interval given by begin and end.

		[begin]
		Description=Start of the interval.

		[end]
		Description=End of the interval. If end is chosen to be greater than begin then the value increases with movement into positive X direction, otherwise it decreases.

		[length]
		Description=Number of pixels to be moved into X direction for the animation to be played from begin to end.


	[Anim_XDir]
	Description=The value is proportional to the object's velocity in X direction. The velocities from 0 to max_dir are mapped linearily to the interval from begin to end.
		[begin]
		Description=Start of the interval.

		[end]
		Description=End of the interval. If end is greater than begin then the value increases with increases XDir, otherwise it decreases.

		[max_dir]
		Description=Largest value of XDir to be mapped. Even larger velocities lead to the same animation value (end).


	[Anim_Y]
	Description=The value depends on the movement of the object in Y direction. Each pixel the object moves into positive Y direction increases the value a little bit, and each pixel in negative Y direction decreases it. If end is reached then the value is reset to begin, and if begin is reached then the value is reset to end.
		[position]
		Description=Start value. Should be inside the interval given by begin and end.

		[begin]
		Description=Start of the interval.

		[end]
		Description=End of the interval. If end is greater than begin then the value increases with movement into positive Y direction, otherwise it decreases in that case.

		[length]
		Description=Number of pixels that need to be moved in Y direction for the animation to be played from begin to end.


	[Anim_YDir]
	Description=The value is proportional to the object's velocity in Y direction. The velocities 0 to max_dir are mapped linearly to the interval given by begin and end.
		[begin]
		Description=Start of the interval.

		[end]
		Description=End of the interval. If end is greater than begin then the value increases with increases XDir, otherwise it decreases.

		[max_dir]
		Description=Highest value of the YDir to be mapped. All larger velocities lead to the same animation value (end).


	[AppendCommand]
	Description=Appends a command to the command stack of an object. The appended command will be executed after the current other commands.For command descriptions seeNotice: commands set by AppendCommand are not transferred to controlled vehicles (see VehicleControl).
		[command]
		Description=Command name (as string). See the table below.

		[target]
		Description=target object for the command

		[x]
		Description=X target coordinate

		[y]
		Description=Y target coordinate

		[target2]
		Description=secondary target object

		[delay]
		Description=Time (in ticks or frames) until the command is terminated.

		[Data]
		Description=additional data for the command

		[retries]
		Description=Number of retries if the command fails, until the command fails completely.

		[base_mode]
		Description=Command stack mode. Seefor values.


	[ArcCos]
	Description=Calculates arc cosine of value/radius, or x = arccos(value/radius). This corresponds to cos(x) = value/radius. This function is used to calculate an angle from horizontal and vertical offsets. However, in most cases() does what you need.
		[value]
		Description=Length of the adjacent leg

		[radius]
		Description=Length of hypotenuse


	[ArcSin]
	Description=Calculates arc sine of value/radius, or x = arcsin(value/radius). This corresponds to sin(x) = value/radius. This function is used to calculate an angle from horizontal and vertical offsets. However, in most cases() does what you need.
		[value]
		Description=Length of the opposite leg

		[radius]
		Description=Length of hypotenuse


	[AttachMesh]
	Description=Attaches a mesh to another mesh. Ifis an ID then the mesh of the corresponding definition is used. Ifis an object then the current mesh of that object is used, including all its animations and attached meshes. However, in that case only the graphics will be attached - the object itself stays at its current position. The return value is a number that can be used to detach the mesh again via.
		[mesh]
		Description=ID or object of the mesh to be attached.

		[parent_bone]
		Description=Bone of the calling object's mesh at which to fix the mesh to be attached.

		[child_bone]
		Description=Bone of the object to be attached with which to fix it.

		[transformation]
		Description=Transformation to be applied on the attached mesh in its own frame of reference. The array should consist of 12 integer entries which make up a 3x4 matrix in which each vaule is given in promille (1000 = 100%). These matrices can be created via,,andor they can be combined via.

		[flags]
		Description=Additional flags to specify the behavior of the attached mesh. Multiple values can be separated with.
		[BlastObjects]
	Description=Applies explosion damage to all objects at the specified position. x and y are always global coordinates. If a container is specified, damage is only applied to objects contained in that container. Explosion damage can cause incineration or fling away living objects.
		[x]
		Description=X coordinate

		[y]
		Description=Y coordinate

		[level]
		Description=Strength.

		[container]
		Description=Container of the objects to be blasted.

		[caused_by]
		Description=Number of the player who has caused the damage. If not specified, the the controller of the calling object is considered to have caused the damage in local calls.


	[BoundBy]
	Description=Returns value if it is within the given boundaries (value >= lower_bound and value <= upper_bound). Otherwise returns the applicable limit.
		[value]
		Description=Value to be compared.

		[lower_bound]
		Description=Lower limit.

		[upper_bound]
		Description=Upper limit.


	[Bubble]
	Description=Creates a bubble.
		[x]
		Description=X position of the bubble. Offset in local calls.

		[y]
		Description=Y position of the bubble. Offset in local calls.


	[Buy]
	Description=Buys an object for for_plr, deducting the wealth of pay_player. The function will fail if the paying player does not have enough money or the object is currently not available in the home base material.
		[buy_object]
		Description=Type of object to be bought.

		[for_player]
		Description=Owner (player number) of the new object.

		[pay_player]
		Description=Number of the player who pays for the object.

		[to_base]
		Description=Target object in which the new object is placed. This parameter can be left out if the calling object is the base.

		[show_errors]
		Description=If specified and not, failure messages such as "Buying not possible" are displayed, e.g. if there is not enough money.


	[C4Id]
	Description=Converts a string into an id.
		[id_string]
		Description=String to be converted into an id.


	[Call]
	Description=Calls the specified function. If given a string, the function is looked up in the context object (). For example,is the same as. Using Call like this is primarily useful when the name of the function can vary. If "~" is prepended to the function name then the call does not fail if the function does not exist.
		[function]
		Description=Function to be called.


	[CanConcatPictureWith]
	Description=Checks whether the pictures of two objects are the same and therefore can be stacked in contents menus.
		[other]
		Description=The object with which to compare.


	[CastObjects]
	Description=Casts number objects at the specified position with speed level. For local calls the created objects will have the same owner as the calling object.
		[id]
		Description=Type of objects.

		[number]
		Description=Number of objects.

		[level]
		Description=Velocity of the objects.

		[x]
		Description=X casting position. In local calls offset to the calling object.

		[y]
		Description=Y casting position. In local calls offset to the calling object.

		[angle]
		Description=Angle into which to cast the objects.

		[angle_variance]
		Description=Maximum deviation from that angle. If not given objects will be cast into all directions.


	[CastParticles]
	Description=Casts the specified amount of particles of the specified type. The extra parameters are set randomly in the range from a0/b0 to a1/b1.
		[name]
		Description=Name of the particle type.

		[amount]
		Description=Amount of particles.

		[level]
		Description=Velocity at which to cast the particles.

		[x]
		Description=X coordinate of the particle. Offset in local calls.

		[y]
		Description=Y coordinate of the particle. Offset in local calls.

		[a0]
		Description=Lower limit for the first extra parameter. This is usually the size of the particles in 1/5 pixels.

		[a1]
		Description=Upper limit for the first extra parameter.

		[b0]
		Description=Lower limit for the second extra parameter. This is usually the color modulation of the particles.

		[b1]
		Description=Upper limit for the second extra parameter.

		[obj]
		Description=Target object for object local particles. Object local particles are drawn directly on top of the object and are removed when the object is deleted.


	[CastPXS]
	Description=Casts material pixels at the specified position. In local calls, the coordinates are an offset to the position of the calling object.
		[material_name]
		Description=Material name

		[amount]
		Description=Amount

		[level]
		Description=Strength.

		[x]
		Description=X coordinate

		[y]
		Description=Y coordinate

		[angle]
		Description=Angle into which the material pixels are casted.

		[angle_variance]
		Description=Maximum deviation from that angle. If not given the material pixels will all be casted into all directions.


	[ChangeDef]
	Description=Assigns a new definition to an object.
		[new_def]
		Description=id of the new definition.


	[CheckConstructionSite]
	Description=Checks whether the given location is suitable for the construction of object_id. The same check is used before creation inif check_side is true. In local calls the specified position will be an offset to the position of the calling object.
		[object_id]
		Description=Type of object to be checked.

		[xoffset]
		Description=X coordinate

		[yoffset]
		Description=Y coordinate


	[CheckEffect]
	Description=Makes Fx*Effect (and in cases Fx*Add) callbacks to the specified list of effects, without actually creating any effect. The return value is -1 if another effect has rejected the call. If an effect accepts the call, the return value is the effect number of that effect.
		[name]
		Description=Name of the effect without prepended 'Fx'.

		[target]
		Description=Target object of the effects to be notified. If, the global effects are notified.

		[priority]
		Description=Effect priority. Calls are made to all effects of equal or higher priority. If unspecified or 0, all effects are notified.

		[timer]
		Description=Interval for the timer calls. With, no timer calls are made and the effect stays on permanently until it is deleted by other calls.

		[var1]
		Description=First extra parameter to be passed to the effect callback.

		[var2]
		Description=Second extra parameter to be passed to the effect callback.

		[var3]
		Description=Third extra parameter to be passed to the effect callback.

		[var4]
		Description=Fourth extra parameter to be passed to the effect callback.


	[CheckVisibility]
	Description=Checks whether this object is visible for the given player.
		[player]
		Description=Player whose visibility to determine.


	[ClearMenuItems]
	Description=Removes all entries from a menu.

	[ClearParticles]
	Description=Removes all particles of the specified type.
		[name]
		Description=Name of the particle definition of which you want to delete all particles. If not specified, all particles of all types will be removed.

		[obj]
		Description=If specified, only the particles local to that object are removed.


	[ClearScheduleCall]
	Description=Cancels function calls which has been scheduled by. All scheduled calls to the specified function will be cancelled.
		[obj]
		Description=Object for which to cancel scheduled function calls.for scheduled calls without object context.

		[function]
		Description=Name of the scheduled function.


	[CloseMenu]
	Description=Closes the menu of the calling object.

	[Collect]
	Description=Collects an object. This function performs the same events as they occur if the object is collected in the game through the Collection area (there will be a RejectCollect call, flag collection checks, hit calls, etc.) The only difference is that there will be no comparison of collection position and the collected item is not checked for the OCF_Carryable flag.Using this function you can for example collect objects directly from a container. If the function fails (e.g. through a RejectCollect or a full target container) the function returns, otherwise.
		[item]
		Description=Object to be collected.


	[ComponentAll]
	Description=Checks whether an object is composed of only one specified component type.
		[components]
		Description=id of the expected component.


	[ComposeContents]
	Description=Creates an object of the specified type in the contents of the calling object. The object is composed from components which must be available inside the object. Otherwise, a message is displayed listing missing components. This function causes the callback BuildNeedsMaterial which can be used to intercept the message and perform custom actions for acquiring the necessary material.
		[object_id]
		Description=Type of object to be created.


	[Construction]
	Description=Called at the creation of an object.
		[creator]
		Description=Object that created the new object.if created in a global context (scenario script,...).


	[Contained]
	Description=Returns the container object in which this object is contained. Returnsif this object is not contained.

	[Contents]
	Description=Returns the indicated object contained in the target obj.
		[index]
		Description=Index of the object in the container, starting with 0.


	[ContentsCount]
	Description=Returns the number of objects of the specified type which are contained in the target object.
		[object_id]
		Description=Object type to be counted.


	[Cos]
	Description=Returns cos(angle) * radius.
		[angle]
		Description=Angle in degrees

		[radius]
		Description=Radius

		[precision]
		Description=If specified, the angle will be divided by this value. An angle of 445Â° and a precision value of 10 will thus result in a more precise angle of 45,5Â° internally.


	[CreateArray]
	Description=Creates a new zero filled array.
		[length]
		Description=Length of the new array.


	[CreateConstruction]
	Description=Should be used instead ofto create a building or construction site. In local calls the specified position will be an offset to the position of the calling object. If check_site is 1, the site is checked for suitability before creating the object. If the site is not suitable (e.g. rough ground or not enough space), a message is displayed above the calling object and the function returns.
		[object_id]
		Description=Type of object to be created.

		[xoffset]
		Description=X coordinate

		[yoffset]
		Description=Y coordinate

		[owner]
		Description=Owner of the new object (valid player number orfor no-owner).

		[completion]
		Description=Determines the initial completion of the object in percent (minimum 1).

		[adjust_terrain]
		Description=Determines whether the landscape at the creation site has to be adjusted to the objects basement.

		[check_site]
		Description=First checks the specified site for suitability.


	[CreateContents]
	Description=Creates an object of the specified type in the contents of another object.
		[id]
		Description=Type of object to be created.

		[count]
		Description=Number of objects to be created, if not specified, 1 is assumed.


	[CreateMenu]
	Description=Creates a user defined menu for the specified object. Menu entries are to be added using.
		[symbol]
		Description=The picture of this object definition is used as symbol.

		[command_object]
		Description=Object to receive the menu command (see). Can bein local calls.

		[extra]
		Description=Additional information to be displayed about the currently selected entry.

		[caption]
		Description=Text to be displayed if the menu is empty.

		[extra_data]
		Description=Comparison value for extra 3.

		[style]
		Description=Appearance of the menu.

		[permanent]
		Description=The menu stays open after an entry has been selected.

		[menu_id]
		Description=If specified, this id is used as menu id. The current menu id is returned by
		[CreateObject]
	Description=Creates an object of the specified type at the specified position. The position will be the bottom center of the new object. xoffset and yoffset are relative to the calling object in local calls, otherwiese global.
		[id]
		Description=Type of object to be created.

		[xoffset]
		Description=X coordinate

		[yoffset]
		Description=Y coordinate

		[owner]
		Description=Owner of the new object. Either a valid player number orfor no owner. If not specified the owner is the controller (see) of the calling object orif the call is made without object context.


	[CreateParticle]
	Description=Creates a particle. The named particle definition must be loaded. For more information see the particle documentation.
		[szName]
		Description=Name of the particle

		[x]
		Description=X coordinate of the particle. Offset in local calls.

		[y]
		Description=Y coordinate of the particle. Offset in local calls.

		[xdir]
		Description=Initial horizontal velocity of the particle.

		[ydir]
		Description=Initial vertical velocity of the particle.

		[a]
		Description=Extra parameter. This is usually the size of the particle in 1/5 pixels.

		[b]
		Description=Extra parameter. This is usually the color modulation of the particle.

		[target]
		Description=Target object for object local particles. Object local particles are drawn directly on top of the object and are removed when the object is deleted.

		[behind_target]
		Description=If specified and not, the particle is drawn directly behind the target object.


	[CreateParticleAtBone]
	Description=Creates a particle relative to a bone of the calling object's skeleton. The named particle definition must be loaded. For more information see the particle documentation.
		[szName]
		Description=Name of the particle

		[szBoneName]
		Description=Name of the bone at which to create the particle

		[pos]
		Description=Vector of three elements with the X,Y and Z coordinates of the particle relative to the bone position and orientation.

		[dir]
		Description=Vector of three elements with the X,Y and Z components of the velocity of theparticle relative to the bone orientation.

		[a]
		Description=Extra parameter. This is usually the size of the particle in 1/5 pixels.

		[b]
		Description=Extra parameter. This is usually the color modulation of the particle.

		[target]
		Description=Target object for object local particles. Object local particles are drawn directly on top of the object and are removed when the object is deleted.

		[behind_target]
		Description=If specified and not, the particle is drawn directly behind the target object.


	[CreateScriptPlayer]
	Description=Initializes a joining script player. Script players appear as regular players from the scripting point of view. They have a crew, wealth, build knowledge, home base material, hostility, teams, etc. However, script players do not have a game view port and they can not be controlled by human users.Script players can be used to create AI controlled opponent teams in special scenarios.
		[name]
		Description=Name for the script player. Required.

		[color]
		Description=Player color

		[team]
		Description=Team-Id. If 0, a team is automatically chosen according to the rules also applied to normal joining players.

		[flags]
		Description=Bit mask

		[extra_data]
		Description=Id which is passed to the InitializePlayer call. Using this id, it is quite simple to create different types of script players. E.g. a scenario could feature AI players with different types of crew members.


	[CustomMessage]
	Description=Displays a message.
		[message]
		Description=Message to be displayed

		[obj]
		Description=If not, the message is displayed above the specified object.

		[plr]
		Description=Player number for which the message should be displayed. Defaults towhich will display the message globally.

		[offset_x]
		Description=x offset of the message position. For global messages this refers to the viewport center. For object messages this is relative to the standard message position above the object. For portrait messages (portrait!=0) the offset is relative to the upper left viewport corner.

		[offset_y]
		Description=y offset of the message position.

		[color]
		Description=Color of the message. Default is 0xffffff (white).

		[deco]
		Description=ID of the object definition which is used for decoration of the message. If given the message will be surrounded by a border. Only valid for given portrait.

		[portrait]
		Description=Definition or object to take the graphics from as a portrait.

		[flags]
		Description=Bit mask specifying additional options.
		[DeathAnnounce]
	Description=Displays a death message above the calling object.

	[Definition]
	Description=Called after loading of the calling definition. This should only change the definition.
		[def]
		Description=The definition being initialized.


	[DetachMesh]
	Description=If a mesh was previously attached to another one viathen it can be detached again using this function.
		[attach_number]
		Description=Number of the mesh to detach.returns such a number.


	[DigFree]
	Description=Makes a circular hole in semi-solid materials. The return value is the amount of pixels that were dug free. If no_dig2objects is true, the dug out material does neither create objects according to the Dig2Objects in thenor will the amount be stored in the internal buffer.
		[x]
		Description=X coordinate

		[y]
		Description=Y coordinate

		[radius]
		Description=Radius

		[no_dig2objects]
		Description=Prevent objects from being dug out


	[DigFreeRect]
	Description=Makes a rectangular hole in semi-solid materials. The return value is the amount of pixels that were dug free. If no_dig2objects is true, the dug out material does neither create objects according to the Dig2Objects in thenor will the amount be stored in the internal buffer.
		[x]
		Description=X coordinate

		[y]
		Description=Y coordinate

		[width]
		Description=Width

		[height]
		Description=Height

		[no_dig2objects]
		Description=Prevent objects from being dug out


	[Distance]
	Description=Calculates the distance between two points. Same as Sqrt((x2-x1)^2 + (y2-y1)^2;).
		[x1]
		Description=X coordinate of the first point.

		[y1]
		Description=Y coordinate of the first point.

		[x2]
		Description=X coordinate of the second point.

		[y2]
		Description=Y coordinate of the second point.


	[DoBreath]
	Description=Changes the breath value of an object.
		[change]
		Description=Change of the breath value in frames.


	[DoCon]
	Description=Adjusts the completion value of an object. This affects the completion of construction sites or the growth of trees and living beings. If completion drops below 0, the object is removed.
		[change]
		Description=Change of completion in percentage point (positive or negative).


	[DoCrewExp]
	Description=Gives experience points to a clonk.
		[change]
		Description=Change of the experience value.


	[DoDamage]
	Description=Adjusts the damage value of an object. If a change is made, the callback 'Damage' is made in the target object.
		[change]
		Description=Change of damage value (positive or negative).

		[damage_type]
		Description=Damage cause specification which is to be passed to Fx*Damage callbacks of effects (see). Default is FX_Call_DmgScript.

		[caused_by]
		Description=Number of the player who has caused the damage.


	[DoEnergy]
	Description=Adjusts the energy value of an object. Energy signifies life energy in living beings.
		[change]
		Description=Change of the energy value (positive or negative) in percent of the maximum value. 100% correspond to the maximum physical value of 100,000.

		[exact]
		Description=If, change is applied to the exact energy value (0 to value of Physical "Energy").

		[damage_type]
		Description=Damage cause specification which is to be passed to Fx*Damage callbacks of effects (see). Default is FX_Call_EngScript.

		[caused_by]
		Description=Number of the player who has caused the damage.


	[DoHomebaseMaterial]
	Description=Changes availability of buyable objects at the home base.
		[player]
		Description=Number of the player whose home base material you want to change.

		[definition]
		Description=id of the buyable object type you want to adjust.

		[change]
		Description=Change of the available amount (positive or negative).


	[DoHomebaseProduction]
	Description=Changes resupply speed of buyable objects at the home base.
		[player]
		Description=Number of the player whose home base resupply list you want to change.

		[type]
		Description=id of the object type you want to adjust.

		[change]
		Description=Change of the resupply value (positive or negative).


	[DoPlayerScore]
	Description=Changes the player score of a player.
		[player]
		Description=Number of the player whose score you want to change.

		[change]
		Description=Change of score (positive or negative).


	[DoRGBaValue]
	Description=Adds a specified color value to a 32 bit color value.
		[Val]
		Description=32 bit color value

		[change]
		Description=Color value to be added.

		[select]
		Description=0-3: Color value to be changed.

	[DoScoreboardShow]
	Description=Sets the visibility counter of the scoreboard. This internal counter starts at 0. If the counter value is greater than 0, the scoreboard is visible. If it is less than 0, it is removed. If it is equal to 0, the scoreboard is visible when the player presses the corresponding keyboard key (usually Tab).
		[change]
		Description=Change of visibility.

		[for_player]
		Description=If greater than 0, this is the player number + 1 of the player for which scoreboard visibility is to be changed.


	[DoWealth]
	Description=Changes the wealth value of a player.
		[player]
		Description=Player number of the player whose wealth you want to change.

		[value]
		Description=The change in wealth value.


	[DrawDefMap]
	Description=Draws a dynamic map within the specified rectangle over the old landscape using a given map specification from Landscape.txt.
		[x]
		Description=Left border of the rectangle in which to draw the map.

		[y]
		Description=Top border of the rectangle in which to draw the map.

		[width]
		Description=Width of the rectangle in which to draw the map.

		[height]
		Description=Height of the rectangle in which to draw the map.

		[map_name]
		Description=Name of the map to be used from Landscape.txt.


	[DrawMap]
	Description=Draws a dynamic map within the specified rectangle over the old landscape. This is done using the same evaluation as with Landscape.txt components.
		[x]
		Description=Left border of the rectangle in which to draw the map.

		[y]
		Description=Top border of the rectangle in which to draw the map.

		[width]
		Description=Width of the rectangle in which to draw the map.

		[height]
		Description=Height of the rectangle in which to draw the map.

		[map]
		Description=Definition of the dynamic map. The enclosing map { ... } tag must be present.


	[DrawMaterialQuad]
	Description=Draws a four-cornered polygon of the specified material and texture into the landscape.
		[szMaterialTexture]
		Description=Material-Texture combination for the material to be drawn.

		[x1]
		Description=X coordinate of the first corner. Always global.

		[y1]
		Description=Y coordinate of the first corner. Always global.

		[x2]
		Description=X coordinate of the second corner. Always global.

		[y2]
		Description=Y coordinate of the second corner. Always global.

		[x3]
		Description=X coordinate of the third corner. Always global.

		[y3]
		Description=Y coordinate of the third corner. Always global.

		[x4]
		Description=X coordinate of the fourth corner. Always global.

		[y4]
		Description=Y coordinate of the fourth corner. Always global.

		[sub]
		Description=If, the material will be drawn as 'underground'.


	[DrawParticleLine]
	Description=Creates a line of particles between two points. Returns the number of particles created.
		[particle]
		Description=Type of particle to be created.

		[x0]
		Description=X coordinate of the starting point. Offset in local calls.

		[y0]
		Description=Y coordinate of the starting point. Offset in local calls.

		[x1]
		Description=X coordinate of the end point. Offset in local calls.

		[y1]
		Description=Y coordinate of the end point. Offset in local calls.

		[prtdist]
		Description=Distance between particles. This may not be applied exactly as particles are always spread evenly over the total distance.

		[a]
		Description=Extra parameter. This is usually the size of the particle in 1/5 pixels.

		[b0]
		Description=Extra starting parameter. This is usually the color modulation at the starting point.

		[b1]
		Description=Extra end parameter. This parameter is interpolated from starting to end point and then applied.

		[ydir]
		Description=Initial vertical velocity.


	[EditCursor]
	Description=In the developer mode of the engine this function returns the object which is currently under the mouse cursor (in edit mode: select and move).

	[EffectCall]
	Description=Makes a function call in the specified effect. The call is made within the context of the effect. The first two parameters are always the target object and the effect. The remaining parameters can be freely chosen.
		[target]
		Description=Target object of the effect the of which you want to access variables.for global effects.

		[effect]
		Description=The effect.

		[command]
		Description=Function to be called. The prefix 'Fx' is automatically prepended to the function name. Do not include 'Fx' in the parameter.


	[EliminatePlayer]
	Description=Eliminates a player. The round counts as 'lost' for all eliminated players.
		[player]
		Description=Number of the player to be eliminated.


	[Enter]
	Description=Moves an object into the contents of another object. This call invokes no RejectCollect, Collection, or ActivateEntracnce callbacks in the target object. It does, however, cause RejectEntrance and Entrance callbacks in the entering object.
		[target]
		Description=Target container.


	[eval]
	Description=Executes a string as script.
		[script]
		Description=Script to be executed


	[Exit]
	Description=Moves an object from its container. Optionally, sets its exit velocity.
		[x]
		Description=Offset of the X exit position.

		[y]
		Description=Offset of the Y exit position.

		[iR]
		Description=Object rotation on exit in degrees.

		[xdir]
		Description=Horizontal exit velocity. This is the actual speed value (with no precision multiplication).

		[ydir]
		Description=Vertical exit velocity. This is the actual speed value (with no precision multiplication).

		[rdir]
		Description=Rotational speed of the exiting object.


	[Explode]
	Description=Makes an object explode. The explosion will affect landscape and objects and the object including all of its contents is removed. If the object is contained, the explosion will also damage all other objects in that container. The owner of the exploding object is considered to have caused the explosion.
		[level]
		Description=Explosion level. This determines the amount of explosion damage caused and the type of explosion sound played. Up to level 29 the explosion is a Blast1, 30 to 39 is a Blast2, and above is a Blast3.

		[effect]
		Description=If specified, an object of this type is created instead of a particle. It is assumed that the newly created object will perform the explosion effect.

		[particle]
		Description=Type of particle to be created instead of the normal explosion particle.


	[Extinguish]
	Description=Extinguishes a burning object.

	[ExtractLiquid]
	Description=Sucks up one pixel of liquid at the specified position. Return value is the material number of the material actually extracted, or -1 if no liquid was there.
		[x]
		Description=X position at which material is extracted. Offset in local calls.

		[y]
		Description=Y position at which material is extracted. Offset in local calls.


	[ExtractMaterialAmount]
	Description=Extracts a certain amount of material at the specified position. The return value is the amount actually extracted.
		[x]
		Description=X position at which material is extracted. Offset in local calls.

		[y]
		Description=Y position at which material is extracted. Offset in local calls.

		[material_index]
		Description=Index of the material to be extracted. Also see.

		[amount]
		Description=Maximum amount to be extracted.


	[FatalError]
	Description=Prints out the specified error message and the call stack, then cancels the execution of the function it was called in. This function can e.g. be used to effectively debug scripts or to throw an error if required parameters of a function are not given by the user of the function.
		[message]
		Description=Error message to be displayed


	[Find_Action]
	Description=Search criterion: finds all objects with the specified action.
		[action]
		Description=Current action of the objects to be found.


	[Find_ActionTarget]
	Description=Search criterion: finds all objects that have the specified first action target.
		[action_target]
		Description=Action target of the objects to be found.


	[Find_ActionTarget2]
	Description=Search criterion: finds all objects that have the specified second action target.
		[action_target]
		Description=Action target of the objects to be found.


	[Find_ActionTargets]
	Description=Search criterion: finds all objects that have the specified action targets.
		[action_target1]
		Description=First action target of the objects to be found.

		[action_target2]
		Description=Second action target of the objects to be found.


	[Find_Allied]
	Description=Search criterion: finds all objects owned by friends of the specified player.
		[player]
		Description=Number of the player to which the found objects must be friendly.


	[Find_And]
	Description=Search criterion: finds all objects fulfilling the specified search criteria.
		[Criteria]
		Description=Search criterion in the form of a Find_* function


	[Find_AnyContainer]
	Description=Search criterion: finds all objects which are contained.

	[Find_AtPoint]
	Description=Search criterion: finds all objects which overlap the specified coordinate point.
		[x]
		Description=X coordinate of the starting point. Relative to the calling object's center in local calls.

		[y]
		Description=Y coordinate of the starting point. Relative to the calling object's center in local calls.


	[Find_Category]
	Description=Search criterion: finds all objects of the specified category.
		[category]
		Description=Object category of the objects to find.


	[Find_Container]
	Description=Search criterion: finds all objects within the specified container.
		[container]
		Description=Container of the objects to find.


	[Find_Distance]
	Description=Search criterion: finds all objects within the specified maximum distance from the specified coordinates. If no coordinates are specified, the position of the calling object is used.
		[radius]
		Description=Maximum object distance.

		[x]
		Description=Distance reference point. In local calls, relative to the calling object.

		[y]
		Description=Distance reference point. In local calls, relative to the calling object.


	[Find_Exclude]
	Description=Search criterion: the specified object is excluded from the search.
		[exclude]
		Description=Object to be excluded. This will be the calling object if unspecified or.


	[Find_Func]
	Description=Search criterion: finds all objects which returnto a call of the specified function. If the function is defined locally, the local function will be called, otherwiese a global function.
		[function]
		Description=Function to call


	[Find_Hostile]
	Description=Search criterion: finds all objects owned by an enemy of the specified player.
		[player]
		Description=Player number of the player which has to be hostile to the player owning the objects to find.


	[Find_ID]
	Description=Search criterion: finds all objects of the specified ID.
		[definition]
		Description=ID of the objects to find


	[Find_InRect]
	Description=Search criterion: finds all objects within the specified rectangle.
		[x]
		Description=X position of the top left corner of the search rectangle. Relative to the calling object's center in local calls.

		[y]
		Description=Y position of the top left corner of the search rectangle. Relative to the calling object's center in local calls.

		[width]
		Description=Width of the search rectangle

		[height]
		Description=Height of the search rectangle


	[Find_NoContainer]
	Description=Search criterion: finds all uncontained objects.

	[Find_Not]
	Description=Search criterion: finds all objects which do NOT fulfill the specified criterion.
		[Criteria]
		Description=Search criterion in the form of a Find_* function


	[Find_OCF]
	Description=Search criterion: finds all objects which have the specified Object Character Flag set.
		[ocf]
		Description=Object character flag of the objects to find.


	[Find_OnLine]
	Description=Search criterion: finds all objects which overlap a line going from one point to the other.
		[x1]
		Description=X coordinate of the starting point. Relative to the calling object's center in local calls.

		[y1]
		Description=Y coordinate of the starting point. Relative to the calling object's center in local calls.

		[x2]
		Description=X coordinate of the end point. Relative to the calling object's center in local calls.

		[y2]
		Description=Y coordinate of the end point. Relative to the calling object's center in local calls.


	[Find_Or]
	Description=Search criterion: finds all objects fulfilling at least one of the specified search criteria.
		[Criteria]
		Description=Search criterion in the form of a Find_* function


	[Find_Owner]
	Description=Search criterion: finds all objects owned by the specified player.
		[player]
		Description=Number of the player owning the objects to search.


	[FindBase]
	Description=Searches for the home base of a player. The home base is usually the building with the flag.
		[player]
		Description=Player whose home base you are looking for.

		[index]
		Description=Search index for finding multiple home base objects. index = 0 finds the first base, and so on.


	[FindConstructionSite]
	Description=Searches for a suitable construction site for a building of the specified type, starting at the specified position. If a site is found, the coordinates are returned in the array [x,y]. Otherwise, the function returns.
		[definition]
		Description=id of the desired building type.

		[x]
		Description=Designated x-position of the construction site. Always global coordinates.

		[y]
		Description=Designated y-position of the construction site. Always global coordinates.


	[FindContents]
	Description=Returns the first found contained object of the specified type.
		[type]
		Description=Object type to be found.


	[FindObject]
	Description=Returns an object fulfilling the specified search criteria. Search criteria are composed of special Find_x() values.
		[Criteria]
		Description=Search criterion in the form of a Find_* function


	[FindObjects]
	Description=Creates a list of objects which fulfill the specified search criteria. Search criteria are composed of Find_x() values.
		[Criteria]
		Description=Search criterion in the form of a Find_* function


	[FindOtherContents]
	Description=Returns the first contained object which is not of the specified type.
		[type]
		Description=id of the object type to be ignored.


	[FinishCommand]
	Description=Ends a command in the command stack of an object.
		[success]
		Description=Whether to evaluate the ended command as successful.

		[command_num]
		Description=Index of the command. 0 is the current command, other values indicate the following commands.


	[Fling]
	Description=Flings an object into the specified direction. This function is designed for living beings as it will also set the tumbling activity.
		[xdir]
		Description=X flinging speed

		[ydir]
		Description=Y flinging speed


	[Format]
	Description=Composes a string of several values. To do this, text is scanned for placeholders starting with '%' which are then replaced by the parameters.The general syntax for these placeholders is:Except for type all fields are optional. Type specifies the data type of the parameter to be expected. It can be one of the following values:Length specifies the minimum number of characters used to display the value. If the value is shorter, the display is padded on the left with space characters, or with zeroes if there is a '0' before the length specification.The meaning of the precision field varies with the data type: for integers (d) it specifies the minimum display length (the number is padded with zeroes at the beginning); however for strings (s) it specifies the maximum number of characters to be displayed.
		[text]
		Description=String into which to insert values.


	[FrameCounter]
	Description=Returns the current frame number. This counter starts at 0 at the beginning of each round and increases by roughly 37 frames per second, depending of the performance of the computer.

	[FreeRect]
	Description=Removes all material within the specified rectangle. Coordinates are always global. Excluding the right and lower limits of the rectangle.
		[x]
		Description=Left limit of the rectangle

		[y]
		Description=Top limit of the rectangle

		[width]
		Description=Width of the rectangle

		[height]
		Description=Height of the rectangle

		[density]
		Description=If specified, material of the specified density is removed.


	[GainMissionAccess]
	Description=Adds a password to the list of gained mission access passwords. All players on this computer can then start scenarios which require this password (defined in Scenario.txt). In a sequence of mission scenarios each scenario should give access to the next one.
		[password]
		Description=Password to be added to the list.


	[GameCall]
	Description=Calls function in the scenario script. If the function is not defined in the scenario script, this call returnsand does not cause an error.
		[function]
		Description=Name of the scenario script function.


	[GameCallEx]
	Description=Makes a broadcast call to the scenario script, all goals, rules and environment objects. This is what the engine does when it makes a scenario callback, see.
		[function]
		Description=Name of the script function.


	[GameOver]
	Description=Ends the round. The game will count as won for all surviving players.

	[GBackLiquid]
	Description=Checks whether there is liquid at the specified position in the landscape.
		[x]
		Description=X coordinate. Offset in local calls.

		[y]
		Description=Y coordinate. Offset in local calls.


	[GBackSemiSolid]
	Description=Checks whether there is solid matter or liquid at the specified position in the landscape.
		[x]
		Description=X coordinate. Offset in local calls.

		[y]
		Description=Y coordinate. Offset in local calls.


	[GBackSky]
	Description=Checks whether there is sky at the specified position in the landscape.
		[x]
		Description=X coordinate. Offset in local calls.

		[y]
		Description=Y coordinate. Offset in local calls.


	[GBackSolid]
	Description=Checks whether there is solid matter at the specified position in the landscape.
		[x]
		Description=X coordinate. Offset in local calls.

		[y]
		Description=Y coordinate. Offset in local calls.


	[GetAction]
	Description=Returns the name of the current activity of an object. If the object is currently not active, the return value is "Idle".

	[GetActionTarget]
	Description=Returns the current action targets of the calling object.
		[index]
		Description=0 for target, or 1 for target2


	[GetActMapVal]
	Description=Gets activity data fromof an object.
		[entry]
		Description=Name of the entry to be retrieved.

		[action]
		Description=Name of the activity of which to get an entry.

		[definition]
		Description=Object definition of which to get action data. If not specified, the definition of the calling object is used.

		[entry_number]
		Description=Index of the value to be retrieved if an entry contains multiple values.


	[GetActTime]
	Description=Returns the time (in frames) that the object is already executing this same action.

	[GetAlive]
	Description=Returns whether the calling object is still alive.

	[GetAnimationLength]
	Description=Returns the length of the animation with the given name, orif there is no such animation. Valid positions (forand) include values between 0 and the animation length. The returned number corresponds to the animation length (as specified in the modelling tool) in milliseconds.
		[animation]
		Description=Name of the animation whose length to retrieve.


	[GetAnimationName]
	Description=Returns the name of the animation with the given number. If there is no such animation with the given number or the number refers to a combination node then this function returns.
		[animation_number]
		Description=Animation number of the animation whose name to retrieve.


	[GetAnimationPosition]
	Description=Returns the position of the animation refered to by the given number. The returned value lies between 0 and((animation_number)). If there is no such animation with the given number or the number refers to a combination node then this function returns.
		[animation_number]
		Description=Animation number of the animation whose position to retrieve.


	[GetAnimationWeight]
	Description=Returns the weight of a combination node. The weight specifies the relative portion the combined animations contribute to the resulting animation. The number is always between 0 (only the first animation contributes) and 1000 (only the second animation contributes). Returnsif there is no such animation with the calling number or if the number refers to an animation node.
		[animation_number]
		Description=Animation number of which the weight must be queried.


	[GetBase]
	Description=Returns the player whose home base the specified object is. Return valueif the object is not a home base.

	[GetBit]
	Description=Returns the value of the bit_number'th bit.
		[old_value]
		Description=Old value of the bit masc

		[bit_number]
		Description=The requested bit.


	[GetBreath]
	Description=Returns the current breath value of an object, this is the number of frames an object can still hold its breath.

	[GetCategory]
	Description=Determines the category of an object. The category is usually specified in thebut may in some cases haven been changed during the game by. The category determines general placement and behaviour of the object. The returned category value can be compared with C4D_x constants using the & operator.

	[GetChar]
	Description=Determines the ASCII character code of a character in a string.
		[text]
		Description=String of which to get a character.

		[index]
		Description=Position of the character. The first character is at position 0. If the specified position is outside the string,is returned.


	[GetClimate]
	Description=Returns the current climate. This is the median, constant temperature. Actual temperature is calculated by adding the current season and TemperatureRange.

	[GetClrModulation]
	Description=Determines the color modulation of an object. This is a color value which is multiplied (or added, according to BlitMode) with the object graphics. For more information see().
		[overlay_id]
		Description=If specified, the color modulation of the overlay is returned instead. The overlay must be set usingfirst.


	[GetColor]
	Description=Gets the RGB color value of the ColorByOwner areas of an object. These are controlled byor.

	[GetComDir]
	Description=Returns the current command direction of an object. This indicates the object's current intended heading. The exact evaluation of the command direction depends on theof the current.

	[GetCommand]
	Description=Returns information on a current command of an object. If the object does not have any commands set,is returned for all queries.
		[element]
		Description=Data to be returned. Unspecified or 0: Name, 1: Target, 2: TargetX, 3: TargetY, 4: Target2, 5: Data

		[command_num]
		Description=Number of the command. 0 is the currently active command, other values are the following (super-level) commands.


	[GetComponent]
	Description=Used to determine object components.
		[component]
		Description=Object component of which to determine the count. If not specified, index is used and the id of the component is returned.

		[index]
		Description=Index of the component to be returned. This parameter is ignored if component is specified. Returns the id of the indicated component which can then be used to determine the count in a subsequent call to GetComponent.

		[obj]
		Description=Object of which to determine components. Can bein local calls. If definition is specified, this parameter is ignored.

		[definition]
		Description=Definition of which to determine components. If, the specified object is checked instead.


	[GetCon]
	Description=Returns the completion of an object. With buildings this is the completion of the construction site. With animals and plants this is the current growth (see StretchGrowth/OverSize in).

	[GetContact]
	Description=Determines on which side individual or all vertices of an object are touching the landscape. Directions are specified using.
		[index]
		Description=Index of the vertex to be checked. -1 checks all vertices and returns the result as a bitmask of values combined with OR.

		[dwCNAT]
		Description=Bit mask of CNAT values which determine which directions to check. If not specified, all directions are checked.


	[GetController]
	Description=Determines which player is currently controlling an object or has last controlled it. With crew members this is usually the owning player. With vehicles it is the owner of the clonk that has last grabbed or pushed it. Objects that are collected by living things automatically change their owner to the owner of the new container. If an object changes its owner (see()), the controller is automatically set to the new owner.

	[GetCrew]
	Description=Returns the indicated crew member of a player. For an invalid indexis returned.
		[player]
		Description=Player number of the player whose crew member will be returned.

		[index]
		Description=Crew index of the clonk.


	[GetCrewCount]
	Description=Returns the number of crew members of a player.
		[player]
		Description=Player number of the player whose crew members you want to count.


	[GetCrewEnabled]
	Description=Determines whether a crew member can currently be selected.

	[GetCrewExtraData]
	Description=Retrieves extra data stored in the player file using.
		[data_name]
		Description=Name for the data.


	[GetCursor]
	Description=Returns the currently controlled Clonk of a player.
		[player]
		Description=Player number of the player whose controlled clonk you want to determine.


	[GetDamage]
	Description=Determines the damage level of an object.

	[GetDefBottom]
	Description=Determines the lower limit of an object. This corresponds to y position + DefCore OffsetY + DefCore Height. Object rotation is not taken into consideration.

	[GetDefCoreVal]
	Description=Returns the property value of an object definition by its name in the.
		[entry]
		Description=Name of the entry to be retrieved.

		[section]
		Description=Section of the entry to be retrieved. If not specified, all sections will be searched for an entry of the specified name.

		[entry_number]
		Description=Index of the value to be retrieved if an entry contains multiple values.


	[GetDefinition]
	Description=Returns the id of the indicated definition from the list of definitions as currently loaded by the engine.
		[index]
		Description=Index of the definition.


	[GetDir]
	Description=Returns the current direction of an object as DIR_x value.

	[GetEffect]
	Description=Retrieves a certain effect. If an effect cannot be found the return value is.
		[name]
		Description=Name of the effect without preceding 'Fx'. You can use '*' and '?' wildcards.

		[target]
		Description=Target object in which to access effects. If, the global effects are accessed.

		[index]
		Description=Effect index. With name specified and multiple matches for the search this will give you the indicated effect from the list of results.

		[max_priority]
		Description=If not 0, only those effects are counted which have the specified priority or lower.


	[GetEffectCount]
	Description=Counts object effects or global effects.
		[mask]
		Description=Search mask for effect names. You can use '*' or '?' wildcards or specify an effect name directly. If unspecified, all effects are counted.

		[target]
		Description=Target object the effects of which you want to count. If unspecified, the global effects will be counted.

		[max_priority]
		Description=If not 0, only those effects are counted which have the specified priority or lower.


	[GetEnergy]
	Description=Returns the current energy value of an object. 100% representing the maximum physical value of 100,000. Also see DefCore section [Physical].

	[GetEntrance]
	Description=Returns the current entrance status of an object.if entering the object is currently allowed orif it is disallowed.

	[GetGravity]
	Description=Returns the current gravity in 1/100 pixel/tickÂ².

	[GetHiRank]
	Description=Returns the highest ranking active clonk of a player.
		[player]
		Description=Player


	[GetHomebaseMaterial]
	Description=With id specified, the function returns the number of objects of that type which the player can buy at his home base. In this case index and category are ignored. If id is not specified, the function returns the id of the indicated type of objects of the specified category buyable at the players home base. This will return object types which are generally buyable, even if currently no object of that type is available.
		[player]
		Description=Number of the player whose buying options to determine.

		[id]
		Description=If specified, the function returns the number of objects of the given type which the player can buy at his home base. In this case index and category are ignored.

		[index]
		Description=List index of the buyable item to check.

		[category]
		Description=Category of buyable items you want to check.


	[GetHomebaseProduction]
	Description=With id specified, the function returns how quickly objects of that type are resupplied to the player's home base. In this case index and category are ignored. If id is not specified, the function returns the id of the indicated type of objects of the specified category in the player's resupply list. This will return all object types from the resupply list, even if they are currently not being resupplied.
		[player]
		Description=Number of the player whose buying options you want to determine. The first player has the player number 0.

		[id]
		Description=If specified, the function returns the number of objects of the given type which are resupplied to the player's home base. In this case index and category are ignored.

		[index]
		Description=List index of the buyable item to check.

		[category]
		Description=Category of buyable items you want to check.


	[GetID]
	Description=Returns the object definition id of an object.

	[GetIndexOf]
	Description=Finds the first occurrence of a value in an array and returns its zero-based index. If the element is not found, -1 is returned. The usual rules for comparison using theapply.
		[array2search]
		Description=Array in which the element should be searched. The array can be zero, in which case the element is never found and -1 is returned.

		[needle]
		Description=The value to which every element of the array is to be compared.


	[GetKiller]
	Description=Returns the player who has lastly caused energy loss to an object.

	[GetLength]
	Description=Returns the length of a string or an array.
		[text]
		Description=String or array of which to get the length


	[GetMass]
	Description=Returns the mass of the calling objects (including the mass of all its contents) or the calling definition.

	[GetMaterial]
	Description=Determines the material type at the specified position in the landscape. Returns a material index which can be used for comparison e.g. with. For sky areas the function returns -1.
		[x]
		Description=X coordinate at which to check the material. Offset in local calls.

		[y]
		Description=Y coordinate at which to check the material. Offset in local calls.


	[GetMaterialCount]
	Description=Returns the amount of the specified material found in the landscape.
		[material_index]
		Description=Material index


	[GetMaterialVal]
	Description=Returns the property value of a material definition by its name in the.
		[entry]
		Description=Name of the entry to be retrieved.

		[section]
		Description=Section of the entry to be retrieved. If not specified, all sections will be searched for an entry of the specified name.

		[material]
		Description=Number of the material of which to retrieve an entry.

		[entry_number]
		Description=Index of the value to be retrieved if an entry contains multiple values.


	[GetMenu]
	Description=Returns the id of the menu if the object has an open menu. This is usually the id of the menu symbol (symbol) unlesswas used to explicitly use a differing menu id in idMenuID.

	[GetMenuSelection]
	Description=Determines the currently selected menu entry of the currently open menu of an object, orif no menu is open.

	[GetMeshMaterial]
	Description=Returns the material currently set for the calling object.
		[submesh]
		Description=If the mesh is composed of multiple submeshes then this parameter can be used to specify the submesh whose material to query.


	[GetMissionAccess]
	Description=Determines whether the player already has the specified mission access password.
		[mission_access]
		Description=Mission access to be checked.


	[GetName]
	Description=Returns the name of an object or of an object definition. If the object does not have a name of its own, the definition name is returned anyway.

	[GetNeededMatStr]
	Description=Returns the still needed construction materials of an object.

	[GetObjectBlitMode]
	Description=Returns the current blit mode of an object.
		[overlay_id]
		Description=If specified, the blit mode of the graphics overlay is returned instead. The overlay must have been previously set using.


	[GetObjectInfoCoreVal]
	Description=The InfoCore contains personal information of one crew member. It is stored in the player in a file with the extension oci. Accordingly, GetObjectInfoCoreVal returns a property of a crew member by its name in the InfoCore.
		[entry]
		Description=Name of the entry to be retrieved.

		[section]
		Description=Section of the entry to be retrieved. If not specified, all sections will be searched for an entry of the specified name.

		[entry_number]
		Description=Index of the value to be retrieved if an entry contains multiple values.


	[GetObjectVal]
	Description=Returns the property value of an object by its name in the Objects.txt.
		[entry]
		Description=Name of the entry to be retrieved.

		[section]
		Description=Section of the entry to be retrieved. If not specified, all sections will be searched for an entry of the specified name.

		[entry_number]
		Description=Index of the value to be retrieved if an entry contains multiple values.


	[GetOCF]
	Description=Returns the Object Character Flag of an object. This value describes the current state of an object. The return value is a bit mask and can be compared with OCF_x values using &.

	[GetOwner]
	Description=Determines the owner of the calling object.

	[GetPathLength]
	Description=Searches for a path from start point to end point using the pathfinding algorithm as used by clonks and returns the length of the found path. Returnsif no path was found.
		[startx]
		Description=X coordinate of starting position. Always global coordinate.

		[starty]
		Description=Y coordinate of starting position. Always global coordinate.

		[endx]
		Description=X coordinate of end position. Always global coordinate.

		[endy]
		Description=Y coordinate of end position. Always global coordinate.


	[GetPhase]
	Description=Returns the animation phase of the calling object.

	[GetPhysical]
	Description=Returns physical properties of the object or the definition in the calling context
		[physical]
		Description=Name of the physical property requested.

		[mode]
		Description=Change mode
		[GetPlayerByIndex]
	Description=Returns the indicated player number. This function guarantees that for values from 0 to GetPlayerCount()-1 a valid player number will be returned (notice that there may be "gaps" between player numbers in case some players have left the game). This makes it easier to process all players in a loop.
		[index]
		Description=Index in the player table.

		[player_type]
		Description=If specified, the indicated player of the specified type is returned. This can be used e.g. to walk only through the list of human players or only through the list of script players. For a list of all player types see.


	[GetPlayerByName]
	Description=Returns the number of the given player or -1 if there is no such player.
		[player_name]
		Description=Name of the player


	[GetPlayerControlAssignment]
	Description=Returns the name of the key, mouse of joystick button assigned to a control for a player. If the player number is invalid,is returned. For unassigned or invalid controls, "" is returned.
		[player]
		Description=Number of the player for whom the control set is queried.

		[control]
		Description=Control to query. A CON_* constant should be used here.

		[human_readable]
		Description=If true, some internal names such as JOY_* for joystick buttons are replaced by variants suitable for display to the player.

		[short_name]
		Description=If true, short names are preferred if available. Currently effects Mac builds only.


	[GetPlayerCount]
	Description=Returns the number of players currently in the game.
		[player_type]
		Description=If specified, only the number of players of the specified type is returned. For a list of all player types see.


	[GetPlayerID]
	Description=Returns the player-ID of a joined player. Player-IDs are being counted upwards starting at 1. Other than player numbers, they won't be used again after a player has been eliminated. Each newly joined player has a unique ID.
		[player]
		Description=Player of which to retrieve the ID.


	[GetPlayerInfoCoreVal]
	Description=Returns the property value of a player by its name in the Player.txt.
		[entry]
		Description=Name of the entry to be retrieved.

		[section]
		Description=Section of the entry to be retrieved. If not specified, all sections will be searched for an entry of the specified name.

		[player]
		Description=Player of which to retrieve an entry.

		[entry_number]
		Description=Index of the value to be retrieved if an entry contains multiple values.


	[GetPlayerName]
	Description=Returns the name of a player. If the specified player number is invalid,is returned. Thus this function can also be used to determine whether a player of a given number exists.
		[player]
		Description=Number of the player whose name to get.


	[GetPlayerScore]
	Description=Returns a player's score.
		[player]
		Description=Number of the player whose score you want to determine.


	[GetPlayerScoreGain]
	Description=Returns the gain of player score since the beginning of the round.
		[player]
		Description=Player whose score gain you want to determine.


	[GetPlayerTeam]
	Description=Returns the team number of a player. If the player is not in a team, 0 is returned.
		[player]
		Description=Number of the player whose team you want to determine.


	[GetPlayerType]
	Description=Returns the type of a player.
		[player]
		Description=Number of the player whose type you want to retrieve.


	[GetPlayerVal]
	Description=Retrieves properties of a player by way of the name under which they are stored in the Game.txt component of a savegame.
		[entry]
		Description=Name of the entry to be retrieved.

		[section]
		Description=Section of the entry to be retrieved. If not specified, all sections will be searched for an entry of the specified name.

		[player]
		Description=Number of the player of which you want to retrieve an entry.

		[entry_number]
		Description=Index of the value to be retrieved if an entry contains multiple values.


	[GetPlrClonkSkin]
	Description=Determines the clonk skin ID chosen by the player. The skin is used to alter the look of the clonks in the player's crew.
		[player]
		Description=Player to be checked


	[GetPlrColor]
	Description=Determines the player color. The player color is used to identify various owned objects such as flags or clonks as well as his text messages.
		[player]
		Description=Player to be checked


	[GetPlrExtraData]
	Description=This commands retrieves extra data stored in the player file by.
		[player]
		Description=Player for whom additional data is saved.

		[data_name]
		Description=Name for the data.


	[GetPlrKnowledge]
	Description=Withspecified the function returnsif the player has the construction plan of the specified object. In this caseandare ignored. Otherwise, the function returns the indicated construction plan of the specified category.
		[player]
		Description=Player whose construction plans you want to determine.

		[type]
		Description=If specified, the function returns, if the player has the construction plan of the specified object.

		[index]
		Description=Ifis not specified, this is the index of the construction plan from the list of construction plans.

		[category]
		Description=Ifis not specified, this narrows down the category of the construction plans.


	[GetPlrMagic]
	Description=Determines magic spell knowledge of a player.
		[player]
		Description=Player whose magic knowledge you want to determine.

		[id]
		Description=With id specified the function returns, if the specified player knows the specified spell. In this case index is ignored.

		[index]
		Description=With index specified the function returns the indicated spell from the player's list of known spells.


	[GetPlrView]
	Description=Returns the object which is followed by a player's view. If the player view does not currently follow an object, the function returns(also see).
		[player]
		Description=Number of the player whose view you want to determine.


	[GetPlrViewMode]
	Description=Determines the current view mode of a player. The function returns the following values:).. Also see.
		[player]
		Description=Number of the player whose view mode you want to determine.


	[GetProcedure]
	Description=Returns the procedure of the current activity of an object (e.g. FLOAT, ATTACH, WALK). If the procedure is NONE or the object has no activity set the return value is.

	[GetProperties]
	Description=Returns the names of all properties of.
		[object]
		Description=Object to request property from,in local calls.


	[GetProperty]
	Description=Returns the propertyof.
		[key]
		Description=Requested property.

		[object]
		Description=Object to request property from,in local calls.


	[GetR]
	Description=Returns the rotation of an object. Values range from -180Â° to +180Â°. 0Â° is unrotated.

	[GetRank]
	Description=Returns the rank of the specified object. 0 is a freshly recruited clonk.

	[GetRDir]
	Description=Returns the rotation speed of an object.
		[precision]
		Description=Precision. Default 10 if not specified.


	[GetRGBaValue]
	Description=Returns one of the three color fractions of the specified 32 bit color value.
		[Val]
		Description=32 bit color value

		[select]
		Description=0-3: desired value to be returned


	[GetRootAnimation]
	Description=Returns the number of the animation at the top of the given slot. This animation is combined with the animation of the next smaller slot number and the result of this combination will be combined with the animation at the top of the slot with the next higher slot number, or, if there is no such slot, be the final output displayed on the screen. If the slot contains more than one animation then the animation at the top is always a combination node which combines multiple animations or other combinations of animations to the result of the slot. Returnsif there are no animations in the given slot.
		[slot]
		Description=Slot whose topmost animation shall be returned.


	[GetScenarioVal]
	Description=Returns the property value of the scenario by its name and section in the.
		[entry]
		Description=Name of the entry to be retrieved.

		[section]
		Description=Section of the entry to be retrieved. If not specified, all sections will be searched for an entry of the specified name.

		[entry_number]
		Description=Index of the value to be retrieved if an entry contains multiple values.


	[GetSeason]
	Description=Returns the current season. From 0 = winter through 50 = summer to 99 = again winter.

	[GetSkyAdjust]
	Description=Returns the sky modulation as set by. For more information see.
		[back_color]
		Description=If not, the secondary sky color is returned as specified in SetSkyAdjust.


	[GetTaggedPlayerName]
	Description=Returns the name of a player, including color markup using the player color. If the specified player number is invalid,is returned. Thus this function can also be used to determine whether a player of a given number exists.
		[player]
		Description=Number of the player whose name to get.


	[GetTeamByIndex]
	Description=Returns the indicated team number. This function guarantees that for values from 0 to GetTeamCount()-1 a valid team number will be returned (notice that there may be "gaps" between team numbers in case some team have been removed from the game). This makes it easier to process all teams in a loop.
		[index]
		Description=Index into the list of teams.


	[GetTeamColor]
	Description=Returns the color of a team.
		[team]
		Description=Number of the team whose color to get.


	[GetTeamCount]
	Description=Returns the number of teams currently in the game.

	[GetTeamName]
	Description=Returns the name of a team.
		[team]
		Description=Number of the team whose name to get.


	[GetTemperature]
	Description=Returns the global temperature. Values depend on climate and season and range from -80 to +80.

	[GetTime]
	Description=Returns the time passed since operating system start. Can be used for exact time measurement.

	[GetType]
	Description=Returns the data type of a passed value.
		[Value]
		Description=Data of which to determine the type.


	[GetUnusedOverlayID]
	Description=Returns an unused overlay ID. The first unused overlay ID following base_index will be returned.
		[base_index]
		Description=ID of the overlay after which you want to start the search.


	[GetValue]
	Description=Determines the value of an object. If called as a definition call (e.g.), the standard value of the original object definition is returned, otherwise the current value of the calling object.An object's value is determined as follows: withspecified it is first checked whether the CalcValue function is defined in the object's script and if so, it is evaluated. Otherwise, the definition value is used (see below). The resulting value is then reduced according to the object's completion.Dead animals or clonks always have value 0.The definition value is determined as follows: if the function CalcDefValue is defined in the definition script, it is evaluated. Otherwise, the value overload from Scenario.txt is used, if present. Otherwise, the standard value from DefCore is used.
		[base]
		Description=Home base in which to buy. If the CalcValue function is defined in this object, the return value of CalcValue is used.

		[for_player]
		Description=Player to whom the value applies. If the CalcValue function is defined in this object, the return value of CalcValue is used in this case also.


	[GetVertex]
	Description=Returns a coordinate of the specified vertex (see). Coordinates are relative to the object center.
		[index]
		Description=Index of the vertex to be changed.

		[data]
		Description=of the vertex.
		[GetVertexNum]
	Description=Returns the number of vertices of an object.

	[GetWealth]
	Description=Returns the wealth of a player.
		[owner]
		Description=Player number


	[GetWind]
	Description=Returns the wind's strength and direction at the specified position. In local calls, the position is an offset to the object position. If global is, the global wind value is returned.
		[x]
		Description=X position

		[y]
		Description=Y position

		[global]
		Description=Whether to retrieve the global wind value.


	[GetX]
	Description=Returns the x position of the calling object.

	[GetXDir]
	Description=Returns the horizontal speed of the calling object.
		[precision]
		Description=Precision with which to retrieve the speed. Default value is 10.


	[GetY]
	Description=Returns the y position of the calling object.

	[GetYDir]
	Description=Returns the vertical speed of the calling object.
		[precision]
		Description=Precision with which to retrieve the speed. Default value is 10.


	[GrabContents]
	Description=Removes all contents from obj and gives it to the calling object.
		[obj]
		Description=Obect of which to grab the contents.


	[GrabObjectInfo]
	Description=Transfers the info section from one object to another. The info section contains name, rank, permanent physicals, etc. Using this command you can e.g. perform reincarnations by transferring the info section from a dead clonk to a live one.
		[from]
		Description=Object (clonk) of which to retrieve the info section.


	[Hostile]
	Description=Determines whether two players are enemies. Two players will be opposed if at least one of them has declared hostility towards the other.
		[player1]
		Description=First player

		[player2]
		Description=Second player

		[check_one_way]
		Description=If, checks only if player1 is hostile towards player2 but not in reverse.


	[HSL]
	Description=Creates a 32 bit color value from three parameters. Range is 0-255 for all parameters.
		[byH]
		Description=Hue of the color. 0 is red, 85 is green, 170 is blue, and 255 is red again.

		[byS]
		Description=Saturation of the color. This is the color contrast.

		[byL]
		Description=Brightness of the color. A brightness of 0 would correspond to(0,0,0).


	[HSL2RGB]
	Description=Converts a 24 bit HSL value into the better known 32 bit RGB format.The 24 bit HSL value can be created using(hue, saturation, lightness).
		[Val]
		Description=24 bit HSL value


	[HSLa]
	Description=Creates a 32 bit color value from four parameters. Range is 0-255 for all parameters.
		[byH]
		Description=Hue of the color. 0 is red, 85 is green, 170 is blue, and 255 is red again.

		[byS]
		Description=Saturation of the color. This is the color contrast.

		[byL]
		Description=Brightness of the color. A brightness of 0 would correspond to(0,0,0).

		[byA]
		Description=Opacity of the color.


	[Incinerate]
	Description=Incinerates the specified object. This may cause an Incineration() call in the object.

	[inherited]
	Description=Calls the overloaded function. A function overloads another function if it is declared with the same name in the same scope.

	[InLiquid]
	Description=Returns, if the object is submerged in liquid.

	[InsertMaterial]
	Description=Inserts a material pixel at the given position and given speed.
		[material_index]
		Description=Material to be inserted (see()).

		[x]
		Description=X insert position or offset

		[y]
		Description=Y insert position or offset

		[xdir]
		Description=horizontal speed of material pixel to be inserted

		[ydir]
		Description=vertical speed of material pixel to be inserted

		[out_insertpos]
		Description=If a writeable proplist is passed, members x and y are filled with the actual insertion position.


	[Inside]
	Description=Returns, if value >= lower_bound and val <= upper_bound.
		[value]
		Description=Input value

		[lower_bound]
		Description=Lower limit

		[upper_bound]
		Description=Upper limit


	[IsNetwork]
	Description=Returns whether the current game is a network game.

	[Jump]
	Description=Makes an object jump. The same limitations apply as they would with a keyboard controlled jump: the object can jump only from the WALK activity or SWIM activity (jumping from the latter will cause a dive jump).Returns whether the jump was successfully initiated.

	[Kill]
	Description=Kills an object. Applies to living beings only.
		[forced]
		Description=If set, the object will be killed, even if an effect tries to prevent this. .


	[LandscapeHeight]
	Description=Returns the height of the landscape in pixels.

	[LandscapeWidth]
	Description=Returns the width of the landscape in pixels.

	[LaunchEarthquake]
	Description=Creates an earthquake at the given position. Coordinates are global, even in local calls.
		[x]
		Description=X position

		[y]
		Description=Y position


	[LaunchLightning]
	Description=Creates a bolt of lightning. This will then move from the starting position (iX, iY) at the specified speed and the specified deviation (iXRange, iYRange). Setting the deviation values to 0 would create a straight, linear bolt.Coordinates are global, even in local calls.
		[x]
		Description=X position

		[y]
		Description=Y position

		[xspeed]
		Description=Horizontal average speed of the lightning bolt.

		[xrange]
		Description=Maximum deviation of xspeed.

		[yspeed]
		Description=Vertical average speed of the lightning bolt.

		[yrange]
		Description=Maximum deviation of yspeed.

		[do_gamma]
		Description=If, the lightning will cause a screen flash for all players.


	[LaunchVolcano]
	Description=Launches a volcano at the specified position.
		[x]
		Description=X position

		[y]
		Description=Y target position. Default: Bottom of the landscape.

		[strength]
		Description=Strength. Default: Relative to the height of the landscape

		[material_name]
		Description=Name of the material. The default is "Lava"


	[Log]
	Description=Displays a text in the message board at the bottom of the screen. Parameters can be inserted in C formatting style. See.
		[message]
		Description=Text to be displayed.


	[MakeCrewMember]
	Description=Adds an object (usually a clonk) to the crew of a player. The object must have the CrewMember property set in the DefCore.Returnsif the object was added successfully.
		[player]
		Description=Player to whose crew you want to add a member.


	[Material]
	Description=Returns the index of a material from its name. This index is used in most functions dealing with materials.
		[material_name]
		Description=Name of material


	[MaterialName]
	Description=Returns the internal (technical) name of a material.
		[material_index]
		Description=Index of the material of which you want to know the name.


	[Max]
	Description=Returns the greater of two values.
		[value1]
		Description=first Value

		[value2]
		Description=second Value


	[Message]
	Description=Displays a message. Text can be formatted in C formatting style (see).
		[message]
		Description=Message to be displayed.


	[Min]
	Description=Returns the lesser of two values.
		[value1]
		Description=first Value

		[value2]
		Description=second Value


	[Music]
	Description=Plays a music track. The corresponding music file must be available in the active music group. If the loaded scenario contains music files, the scenario file will be the music group. Otherwise, the global file Music.ocg will be used.
		[song_name]
		Description=Filename of the music track. The file extension must be specified. If unspecified, music playback will be interrupted.

		[loop]
		Description=If 1, the specified track will be looped forever.


	[MusicLevel]
	Description=Sets the volume for playback of background music (see).
		[level]
		Description=Desired volume (0-100).


	[Object]
	Description=Converts an object number into an object pointer.
		[object_number]
		Description=Unique object number.


	[ObjectCount]
	Description=Returns the number of objects fulfilling the specified search criteria. Search criteria are composed of Find_x() function values.
		[Criteria]
		Description=Search criterion in the form of a Find_* function


	[ObjectDistance]
	Description=Returns the distance between two objects. If obj isthe distance between the calling object and obj2 is measured.
		[obj2]
		Description=Second object.

		[obj]
		Description=First object. Can bein local calls.


	[ObjectNumber]
	Description=Returns the object number of an object. This number always uniquely identifies an object, even in subsequent savegame runs. Usingit can be converted back to an object pointer.

	[OnFire]
	Description=Returns whether an object is on fire.

	[Par]
	Description=Returns the value of a parameter passed to the function.
		[index]
		Description=0-9: index of the requested parameter


	[PathFree]
	Description=Determines whether the path from the start point to the end point is free, meaning that no solid material is intersected by a directly line between those points.
		[x1]
		Description=X coordinate of the start point

		[y1]
		Description=Y coordinate of the start point

		[x2]
		Description=X coordinate of the end point

		[y2]
		Description=Y coordinate of the end point


	[PlaceAnimal]
	Description=Creates an animal of the specified type in the landscape. The placement position depends on the Placement value in theof the animal's definition. Returns a pointer to the newly created animal.
		[animal_id]
		Description=Type of the animal to be created.


	[PlaceObjects]
	Description=Creates the specified number of objects in the specified target rectangle and target material (optional). Returns the number of iterations or -1 if creation has failed.
		[definition]
		Description=ID of the object to be created

		[amount]
		Description=Count of objects to be created

		[material_name]
		Description=Material in which object are to be created. This can be a material number or a string as follows:().().().().
		[x]
		Description=Left boundary coordinate of the target rectangle (x coordinate).

		[y]
		Description=Top boundary coordinate of the target rectangle (y coordinate).

		[width]
		Description=Width of the target rectangle. If not specified, the right landscape boundary.

		[height]
		Description=Height of the target rectangle. If not specified, the bottom landscape boundary.

		[on_surface]
		Description=If, all objects will be created above the upper surface of the specified material (this might be outside the target rectangle).

		[no_stuck]
		Description=If, placement will not ensure that objects are in solid material. This is needed e.g. when placing objects in liquids.


	[PlaceVegetation]
	Description=Places vegetation in the specified target rectangle. In local calls, the specified coordinates are an offset to the position of the calling object. Returns a pointer to the newly created plant.
		[id]
		Description=ID of the object to be created.

		[x]
		Description=Top left corner of the target rectangle; X coordinate.

		[y]
		Description=Top left corner of the target rectangle; Y coordinate.

		[width]
		Description=Width of the target rectangle.

		[height]
		Description=Height of the target rectangle.

		[growth]
		Description=Growth phase of the target object. Value -1 places vegetation at random growth, otherwise the valid range is 1-100000 (1-100%).


	[PlayAnimation]
	Description=Starts playing a new animation. The return value of this function is the animation number of the animation node inserted which can be used to manipulate or remove the animation later. If there are already animations in the given slot then additionally a combination node is created. This combination node is assigned the returned number plus 1.
		[animation]
		Description=Name of the animation to be played.

		[slot]
		Description=Slot in the animation stack in which the animation should be inserted. See.

		[position]
		Description=Specifies how to compute the position of the animation. The value needs to be created with one of the "Anim_" animation functions.

		[weight]
		Description=Specifies how to compute the weight of the animation in case the animation is combined with another animation in the given slot. The value needs to be created with one of the "Anim_" animation functions.

		[sibling]
		Description=If the animation is combined with another animation then this refers to the node with which the new node is combined. If not given orthen the animation is combined with the animation at the top of the slot as returned by.


	[PlayerMessage]
	Description=Displays a message in the viewport of the specified player. Message formatting is done accoring to.
		[player]
		Description=Number of the player for whom to display the message.

		[message]
		Description=Message to be displayed


	[Punch]
	Description=Punches the target object.
		[obj]
		Description=The victim.

		[strength]
		Description=Strength of the punch (life energy to be subtracted).


	[PushParticles]
	Description=Speeds up all particles of the specified type with a given direction.
		[name]
		Description=Name of the particle definition you want to accelerate. If not specified, all particle types will be moved.

		[xacc]
		Description=Horizontal accelleration

		[yacc]
		Description=Vertical accelleration


	[Random]
	Description=Yields a random number from 0 to max-1. The returned value cannot be greater than 32767, however.
		[max]
		Description=Maximum value


	[RandomX]
	Description=Yields a random value from value1 to value2. It does not matter, which limit is greater or less.
		[value1]
		Description=Range start

		[value2]
		Description=Range end


	[ReloadDef]
	Description=Reloads an object definition. This command can be entered in the console of the developer mode engine after the object definition file has been modified. It will work only if the definition is already loaded.
		[definition]
		Description=ID of the definition to be reloaded.


	[ReloadParticle]
	Description=Reloads a particle definition. This command can be entered in the console of the developer mode engine after the particle definition file has been modified. It will work only if the particle is already loaded.
		[particle]
		Description=Name of the particle definition to reload.


	[RemoveAll]
	Description=Removes all objects which are found using the search criteria.
		[Criteria]
		Description=Search criterion in the form of a Find_* function


	[RemoveEffect]
	Description=Deletes an effect.
		[name]
		Description=Name of the effect without preceding 'Fx'. You can use '*' and '?' wildcards.

		[target]
		Description=Target object from which to remove an effect. If, the global effects list will be searched.

		[effect]
		Description=The effect. Instead to search by name, the effect can be directly removed if this parameter is given.

		[no_calls]
		Description=If not, no Stop calls will be made.


	[RemoveObject]
	Description=Removes the calling object.
		[eject_contents]
		Description=If, the object's contents is exited before deletion of the object. Otherwise, the contents will be deleted as well.


	[RemoveVertex]
	Description=Removes a vertex from the calling object.
		[index]
		Description=Index of the vertex to be removed.


	[ResetGamma]
	Description=Resets a gamma ramp to default value. This corresponds to((0,0,0),(128,128,128),(255,255,255), ramp_index);. For more information see.
		[ramp_index]
		Description=0-7: index of the gamma ramp to reset.


	[ResetPhysical]
	Description=Resets all physicals to their default value. For more information see.
		[physical]
		Description=If nonzero, this string should specify the name of a physical attribute of which a previous value has been stored usingin PHYS_StackTemporary-mode. The specified physical is reset to its previous value and the previous value is removed from the temporary physical stack. If the stack is empty - i.e., ResetPhysical has been called for all respective calls toin PHYS_StackTemporary-mode, the temporary physicals will automatically be reset. If this parameter is zero, all temporary physicals are reset and any temporary physical values deleted form the stack. Seefor an example using this parameter.


	[RGB]
	Description=Composes a 32 bit color value from the three base colors. Range 0-255 for all parameters.
		[byR]
		Description=Red color part

		[byG]
		Description=Green color part

		[byB]
		Description=Blue color part


	[RGB2HSL]
	Description=Converts a 32 bit color value into hue, saturation, and lightness values as know in paint programs.The HSL value is returned as int and can be processed usingor.All values range from 0-255.
		[Val]
		Description=32 bit color value


	[RGBa]
	Description=Composes a 32 bit color value from the three base colors and a transparency value. Range 0-255 for all parameters.
		[byR]
		Description=Red color part

		[byG]
		Description=Green color part

		[byB]
		Description=Blue color part

		[byA]
		Description=Opacity


	[Schedule]
	Description=Executes a specified script command after a specified delay.
		[obj]
		Description=Object in which the call is to be made. Can befor no object context.

		[script]
		Description=Script to be executed.

		[delay]
		Description=Delay after which the first call is made. If repeat is greather than 1, this is also the delay inbetween subsequent calls.

		[repeat]
		Description=Number of calls. If 0 or not specified, the call is made exactly once.


	[ScheduleCall]
	Description=Calls a function after a specified delay.
		[obj]
		Description=Object in which to call the function.for no object context.

		[function]
		Description=Name of the function to call.

		[delay]
		Description=Delay after which the first call is made. If repeat is greather than 1, this is also the delay inbetween subsequent calls.

		[repeat]
		Description=Number of calls. If 0 or not specified, the call is made exactly once.


	[ScoreboardCol]
	Description=Converts an object definition id into a number which can be used as index for. This function is of interest if an object script intends to access the scoreboard but wants to be sure that it is not using the same column indices as another object definition.
		[definition]
		Description=C4ID to be converted into a scoreboard column index. For object based scoreboards you should always use the id of the object definition which is accessing the scoreboard.


	[ScrollContents]
	Description=Shifts the contents of an object. This will always shift by exactly one object (as opposed to). No call to ControlContents is made. Returns a pointer to the object at the front of the contents list after the shift.

	[SelectMenuItem]
	Description=Sets menu selection in an object menu.
		[number]
		Description=Number of the menu item which is to be selected. The first entry is number 0.


	[Sell]
	Description=Sells an object including all its contents.
		[player]
		Description=Number of the player to which to sell to.


	[SetAction]
	Description=Sets the activity of the calling object. Also see.
		[action]
		Description=New action to be set. "ActIdle" or "Idle" will clear any action.

		[target1]
		Description=First target object for the action.

		[target2]
		Description=Second target object for the action.

		[force]
		Description=If, changes the action even if the action defined NoOtherAction=1.


	[SetActionData]
	Description=Sets the extra data for the current action. The application of the extra data depends on the procedure of the current action. See.
		[data]
		Description=Additional parameter for the activity.


	[SetActionTargets]
	Description=Sets the activity targets of an object. The result depends on theof the current action.
		[target1]
		Description=First target object

		[target2]
		Description=Second target object


	[SetAlive]
	Description=Sets whether an object is alive.
		[alive]
		Description=false = dead; alive otherwise.


	[SetAnimationPosition]
	Description=Sets a new position for the given animation. Returnsif the new AVP was set orif there is no such animation with the given number or the number refers to a combination node.
		[animation_number]
		Description=Animation number of the animation whose position to set.

		[position]
		Description=Specifies how to compute the position of the animation. The value needs to be created with one of the "Anim_" animation functions.


	[SetAnimationWeight]
	Description=Sets a new weight for the given animation. Returnsif the new AVP was set orif there is no such animation with the given number or the refernced node is an animation node.
		[animation_number]
		Description=Animation number of the animation whose position to set.

		[weight]
		Description=Specifies how to compute the weight of the animation in case the animation is combined with another animation in the given slot. The value needs to be created with one of the "Anim_" animation functions.


	[SetAttachBones]
	Description=If a mesh was previously attached to another mesh then this function can be used to change one or both of the bones at which they are attached. To only change a single bone the other parameter can be set to.
		[attach_number]
		Description=Number of the attached mesh. The return value ofprovides such a number.

		[parent_bone]
		Description=Bone of the calling object at which to attach the mesh.

		[child_bone]
		Description=Bone of the object to be attached.


	[SetAttachTransform]
	Description=If a mesh was previously attached to another one viathen the transformation of the attached mesh can be changed using this function.
		[attach_number]
		Description=Number of the attached mesh whose transformation is to be changed. The return value ofprovides such a number.

		[transformation]
		Description=New transformation to be applied on the attached mesh in its own frame of reference. The array should consist of 12 integer entries which make up a 3x4 matrix in which each vaule is given in promille (1000 = 100%). These matrices can be created via,,andor they can be combined via.


	[SetBit]
	Description=Returns the new bit mask with the bit at position bit_number replaced by bit.
		[old_value]
		Description=Old value of the bit masc

		[bit_number]
		Description=The bit to change

		[bit]
		Description=The new value of the bit


	[SetBridgeActionData]
	Description=Sets additional parameters for a currently executed BRIDGE procedure of the calling object.
		[bridge_length]
		Description=Length of the bridge.

		[move_clonk]
		Description=Whether the clonk is supposed to move with the bridge.

		[build_wall]
		Description=if the clonk is meant to build a ceiling above his head instead of a bridge underneath his feet.

		[bridge_material]
		Description=Material number of the material to be used for the bridge.


	[SetCategory]
	Description=Changes the category of an object.
		[category]
		Description=Object category. Should be a valid C4D_x value.


	[SetClimate]
	Description=Sets the climate (median temperature).
		[temperature]
		Description=Temperature from -50 to 50.


	[SetClrModulation]
	Description=Changes the color modulation of an object. This is a color value which is multiplied with the object color.(255,0,0) will only let the red part of the color show.(255,255,255,128) will make all color half transparent.
		[color]
		Description=Color value to be modulated with.

		[overlay_id]
		Description=If specified, sets the color modulation of the graphics overlay instead. The overlay must have been created usingfirst.


	[SetColor]
	Description=Sets the ColorByOwner color of an object. This call corresponds to setting the owner usingto a player with color as the player color.
		[color]
		Description=New color for ColorByOwner areas.


	[SetComDir]
	Description=Sets the command direction of an object (see).
		[com_dir]
		Description=Order direction. Must be,,,,,,,,or.


	[SetCommand]
	Description=Gives a command to an object. The object will try to complete the command using the internal artificial intelligence (including pathfinding).
		[command]
		Description=Command name (as string). See the table below.

		[target]
		Description=target object for the command

		[x]
		Description=X target coordinate

		[y]
		Description=Y target coordinate

		[target2]
		Description=secondary target object

		[Data]
		Description=additional data for the command

		[retries]
		Description=Number of retries if the command fails, until the command fails completely.


	[SetComponent]
	Description=Sets the component count of the calling object.
		[component]
		Description=Component to be added

		[count]
		Description=Count to be set for components of type component


	[SetCon]
	Description=Sets the completion of an object to the specified value.
		[con]
		Description=Completion/growth in percent


	[SetContactDensity]
	Description=Determines the minimum density of a material to cause an object to collide with the material. By default, objects collide with material that have a density of 50 (solid) or more.
		[density]
		Description=Minimum material density to cause collisions with this object.


	[SetController]
	Description=Changes the controller of the calling object.
		[player]
		Description=Player number of the new controller.for no controller.


	[SetCrewEnabled]
	Description=Activates or deactivates crew members. Deactivated crew members can no longer be selected for control by a player. If all of a player's crew members are deactivated the player can not control any clonks but he is still not eliminated. Only valid for true crew member objects. Deactivated crew members are automatically deselected from player control.
		[enabled]
		Description=Specifies whether the crew member is to be activated or deactivated.


	[SetCrewExtraData]
	Description=With this function additional data can be saved in a crew member's file the in player. This can be used to preserve values across scenarios, for example for RPGs or highscores. If successful, the saved value is returned.
		[data_name]
		Description=Name for the data.

		[Data]
		Description=Data to be saved.


	[SetCrewStatus]
	Description=Adds or removes an object (usually a clonk) to or from the crew of a player. The object must have the CrewMember property set in the DefCore. This does not add the object to the permanent crew of the player, usefor that.
		[player]
		Description=Player number of the player whose crew you want to change.

		[into_crew]
		Description=if you want to add a clonk to the crew andif you want to remove him.


	[SetCursor]
	Description=Sets the control cursor of a player to the specified object and selects this object for player control. Returnsif the target object is currently deactivated by.
		[player]
		Description=Player number

		[obj]
		Description=Object to be selected.

		[no_select_arrow]
		Description=If specified and not, no cursor arrow is drawn when the object is selected.


	[SetDir]
	Description=Sets the direction of the object.
		[dir]
		Description=New direction. Predefined values:/
		[SetEntrance]
	Description=Enables or disables the possibility to enter or leave this building.
		[status]
		Description== closed;= open


	[SetFilmView]
	Description=Sets film playback view to the specified player.
		[for_player]
		Description=Number of the player whose view is to be displayed.


	[SetFoW]
	Description=Switches the fog of war for one player on or off.
		[enabled]
		Description=If, the fog of war is activated, if, deactivated.

		[player]
		Description=Player number.


	[SetGameSpeed]
	Description=Sets game speed.
		[game_speed]
		Description=Game speed in FPS (frames per second). If this parameter is omitted or, the default game speed of 38 FPS is used.


	[SetGamma]
	Description=Sets a gamma ramp. Using gamma ramps, the global light situation of the game can be adjusted by assigning an individual data table to each color channel from which a new brightness value is read. By doing this you can strengthen chosen color ranges, darken or lighten the complete game or even invert light and darkness.
		[color1]
		Description=Adjusting darker colors. Default(0,0,0) for no adjustment.

		[color2]
		Description=Adjusting medium colors. Default(128,128,128) for no adjustment.

		[color3]
		Description=Adjusting brighter colors. Default(255,255,255) for no adjustment.

		[ramp_index]
		Description=0-7: index of the gamma ramp to be changed. There are eight gamma ramps which are applied subsequently. In this way, e.g. global time-of-day objects can modify the global lighting situation without conflicting with secondary lighting effects such as a lightning flash.


	[SetGraphics]
	Description=Changes the graphics of the object. This affects the display of the given object everywhere in the game: in the landscape, in menus, or on control buttons.
		[gfx_name]
		Description=Name of the graphic to be set. If, the default graphic is set.

		[source_definition]
		Description=Definition of which the graphics are to be used. If not specified, the definition of the changed object is used. If not specified and overlay!=0, that overlay is removed.

		[overlay]
		Description=Index of the overlay graphics to be set. If specified, must be greater than 0 and will add an overlay of the given index to the object or changes an existing overlay of the given index. Overlays with higher index will be drawn on top of those with a lower index. If an object has only one overlay you can use the symbolic constant GFX_Overlay (=1).

		[overlay_mode]
		Description=Only in conjunction with overlay parameter: specifies how the overlay is to be drawn.
		[action]
		Description=Only for overlay_mode==GFXOV_MODE_Action: the activity in definition source_definition, the graphics of which shall be superimposed onto the object. This activity has to be defined as Action inof the source definition. Notice: the length of this animation should be 1; longer animations are not yet possible.

		[dwBlitMode]
		Description=Blit mode of the overlayed graphics (e.g. additive). Siehe
		[overlay_object]
		Description=Only for overlay_mode==GFXOV_MODE_Object: the object the graphics of which shall be superimposed onto the target object.


	[SetGravity]
	Description=Sets the gravity. It is usually a good idea to set this to a multiple or a fraction of the previous value.
		[gravity]
		Description=New gravity in 1/100 pixel/tickÂ²


	[SetHostility]
	Description=Sets bilateral friendship of two players.
		[player1]
		Description=Player whose hostility towards another player you want to change.

		[player2]
		Description=Player towards whom you want to change hostility.

		[hostile]
		Description=If, the relationship is hostile. Otherwise friendly.

		[silent]
		Description=If not, the hostility messages in the message board will be suppressed. Hostility messages are never displayed during the first frame of a round, regardless of the value of this parameter.

		[no_calls]
		Description=If not, the callbacks RejectHostilityChange and OnHostilityChange are not executed.


	[SetKiller]
	Description=Sets the killer of the calling object.
		[new_killer]
		Description=Player number of the new killer.for no owner.


	[SetLength]
	Description=Changes the length of the array to the specified value. Surplus elements will be deleted, if necessary.
		[resize]
		Description=Array whose length is to be changed

		[size]
		Description=New length of the array.


	[SetMass]
	Description=Changes the mass of the object. The mass is initialized with/
		[DefCore]/Mass. The actual weight is the deadweight plus the weight of the contained objects.
		[mass]
		Description=New mass of the object


	[SetMatAdjust]
	Description=Sets the material drawing modulation. The material colors will be modulated with the specified color in the same way as ColorByOwner graphics.
		[colorMod]
		Description=Primary color modulation.


	[SetMaxPlayer]
	Description=Adjusts the maximum number of players that can take part in the current round. Lowering this value will not eliminate active players. This value only affects the limit for joining players.
		[max]
		Description=New maximum player count.


	[SetMenuSize]
	Description=Changes the display size of an object menu so the specified number of menu entries will be displayed per line or column.
		[coloumns]
		Description=0-50: number of entries to be displayed per line

		[rows]
		Description=0-50: number of entries to be displayed per column


	[SetMeshMaterial]
	Description=Changes the material of the calling object's mesh at runtime.
		[material]
		Description=Name of the material to set. It needs to be loaded at engine startup, i.e. it needs to be defined in a *.material file being located in an object that was loaded.

		[submesh]
		Description=If the mesh is composed of multiple submeshes then this parameter can be used to specify the submesh whose material is to be changed.


	[SetName]
	Description=Changes name of an object or a definition for the duration of the round.
		[name]
		Description=New name. If, the object's name is reset to the definition value or the original crew member's name.

		[set_permanent]
		Description=For crew members only: if, the name is changed permanently in the crew info in the player file. There may be no duplicate names within a player file.

		[make_valid_if_exists]
		Description=Determines what should happen if a clonk of the same name already exists in the player's crew. If, the function call will fail. If, a unique name is created by appending a number.


	[SetObjDrawTransform]
	Description=Transforms the image of the object.
		[width]
		Description=Width of the image. Original width is 1000. A negative value means horizontal mirroring. The image is always centered.

		[xskew]
		Description=Horizontal skew of the image: 0 means no skewing. 1000 yields a 45Â° offset of the horizontal edges (top edge to the left, bottom edge to the right). Negative values yield an offset into the opposite direction.

		[xadjust]
		Description=Horizontal image offset. Value 1000 moves the image one pixel to the right. Negative values move the image to the left. This means you can also move the image by fractions of a pixel.

		[yskew]
		Description=Vertical skew of the image: 0 means no skewing. 1000 yields a 45Â° offset of the vertical edges (left edge up, right edge down). Negative values yield an offset into the opposite direction.

		[height]
		Description=Height of the image. Original height is 1000. A negative value means vertical mirroring. The image is always centered.

		[yadjust]
		Description=Vertical image offset. Value 1000 moves the image one pixel down. Negative values move the image up. This means you can also move the image by fractions of a pixel.

		[overlay_id]
		Description=ID of the overlay the transform of which you want to adjust. Value 0 (default) indicates the main image (not an overlay).


	[SetObjectBlitMode]
	Description=Changes the drawing mode of the object. The possible values correspond to the BlitMode value in the DefCore (see notice). This function returns the previously set blit mode.
		[dwNewBlitMod]
		Description=New drawing mode (values see below). If 0 or unspecified, the object is reset to its definition blit mode. Otherwise bit 8 (user defined color value) is set implicitly.

		[overlay_id]
		Description=If specified, this will change the blit mode of the graphics overlay instead. The overlay must have been created usingfirst.


	[SetOwner]
	Description=Changes the owner of the object.
		[new_owner]
		Description=Player number of the new owner.for no owner.


	[SetPhase]
	Description=Sets the animation phase of the object.
		[phase]
		Description=New animation phase.


	[SetPhysical]
	Description=Changes the physical properties of the object. With this, the values from the Physical section of thecan be permanently or temporarily adapted.
		[physical]
		Description=Name of property to be changed.

		[value]
		Description=0-100000: new value for the property

		[mode]
		Description=Physical attribute change mode:to reset temporary physicals to permanent mode..
		[SetPicture]
	Description=Changes the representative picture of the object by setting it to a new source rectangle within the definition graphics. This picture is used e.g. in menus or the inventory. Also see the Picture entry in.
		[x]
		Description=X position of the top left corner of the new graphics rectangle.

		[y]
		Description=Y position of the top left corner of the new graphics rectangle.

		[width]
		Description=Width of the new graphics rectangle.

		[height]
		Description=Height of the new graphics rectangle.


	[SetPlayerTeam]
	Description=Assigns a player to a new team. The player limit (MaxPlayer) of the team will be considered.
		[player]
		Description=Player number of the player whose team assignment you want to change.

		[new_team]
		Description=Team number of the team to be joined.

		[no_calls]
		Description=If, calls to "RejectTeamSwitch" and "OnTeamSwitch" are not made. Also, player hostility is not automatically adjusted (this might have to be done manually instead).


	[SetPlayerViewLock]
	Description=Disabled or enabled locked view for one or all players. If the view is locked, the player cannot scroll around to explore the map.
		[player]
		Description=Player whose view lock is to be turned on or off. NO_OWNER for all players.

		[locked]
		Description=If the view is to be locked (true) or unlocked (false).


	[SetPlayerZoomByViewRange]
	Description=Disabled or enabled locked view for one or all players. If the view is locked, the player cannot scroll around to explore the map.
		[player]
		Description=Player whose zoom or zoom limits are to be adjusted. NO_OWNER for all players.

		[range_x]
		Description=Horizontal range that should be covered by the zoom. Zero to use range_y only. If both range_x and range_y are zero, a default range is assumed for range_x.

		[range_y]
		Description=Vertical range that should be covered by the zoom. Zero to use range_x only. If both range_x and range_y are nonzero, the number that yields the smaller zoom is used.

		[flags]
		Description=Flags controlling function behaviour.
		[SetPlayList]
	Description=Sets the play list of pieces of music to be played in random order, if music is activated. The actual number of pieces of music in the playlist is returned, or 0 in network mode.
		[playlist]
		Description=List of pieces of music to be played. The individual file names are separated with semicolons (";"). Wildcards are expanded.  If the parameter is left out, the standard playlist is restored.


	[SetPlrExtraData]
	Description=With this function additional data can be saved in player's file. This can be used to preserve values across scenarios, for example for RPGs or highscores. If successful, the saved value is returned.
		[player]
		Description=Player for whom additional data is saved.

		[data_name]
		Description=Name for the data.

		[Data]
		Description=Data to be saved.


	[SetPlrKnowledge]
	Description=Gives a player a construction plan resp. removes the plan if remove is given.
		[player]
		Description=Player which receives the construction plan.

		[definition]
		Description=Id of the definition for which the plan shall be given.

		[remove]
		Description=If not, the plan will be removed from the players knowledge.


	[SetPlrMagic]
	Description=Adds or removes a magic spell to or from the list of available spells of a player.
		[player]
		Description=Number of the player whose list of available spells you want to change.

		[id]
		Description=ID of the spell.

		[remove]
		Description=Whether to remove the spell.


	[SetPlrView]
	Description=Centers a player's view to the specified object. The view will follow this object until the next player command.
		[player]
		Description=Player whose view distance to want to set.

		[obj]
		Description=Object to which to want to set the view.


	[SetPlrViewRange]
	Description=Sets the view distance of the object.
		[range]
		Description=View distance in pixels.


	[SetPosition]
	Description=Moves the object to the specified position. This will set the exact pixel position and any internal sub-pixel offsets will be reset.
		[x]
		Description=New X position of the object.

		[y]
		Description=New Y position of the object.

		[check_bounds]
		Description=Only applies to objects using the BorderBound flag. Ensures that the position is always within the limits specified by the object.


	[SetProperty]
	Description=Sets the propertyofto. The property does not have to exist beforehand.
		[key]
		Description=Property to be set.

		[value]
		Description=Value to set the property to.

		[obj]
		Description=Object to be changed. Can bein local calls.


	[SetR]
	Description=Sets the rotation of the object.
		[angle]
		Description=Angle in degrees


	[SetRDir]
	Description=Sets the rotation speed of the object.
		[rdir]
		Description=Rotation speed divided by precision.

		[precision]
		Description=Precision. Default 10 if not specified.


	[SetRGBaValue]
	Description=Sets a single color value of a 32 bit color value.
		[Val]
		Description=32 bit color value

		[NewVal]
		Description=0-255: Color value to be replaced with the old one.

		[select]
		Description=0-3: Color value to be changed.


	[SetScoreboardData]
	Description=Sets data in the scoreboard. The scoreboard is a global data table which can be used by scenarios to keep track of each player's score or other data. By default, the scoreboard can be displayed with the Tab key but display can also be controlled using.The scoreboard is automatically created when data is set and automatically removed when all data is cleared.Data is set using a row and column index. If the row or column of a specified index does not yet exist, it is created as soon as data in this row or column is set. It does not matter which numeric indices you use as long as they are unique. So you could also use player numbers, player IDs (see), or team IDs (see) as row or column index. In order to prevent different object scripts from accidentally using the same row or column index you can use thefunction which will create a unique column index from a given value. In this case you should still take care that all object scripts accessing the scoreboard are using matching row indices. Rows and columnd are not sorted by row or column index. You can use thefunction for user defined sorting.
		[row_id]
		Description=Value greater than to equal to 0 or SBRD_Caption. Index of the row in which you want to set data. The constant SBRD_Caption indicates the first column which is to be used as column header.

		[coloumn_id]
		Description=Value greater than to equal to 0 or SBRD_Caption. Index of the column in which you want to set data. The constant SBRD_Caption indicates the first row which is to be used as row header.

		[text]
		Description=Text data to be set. If unspecified or 0, the cell is cleared. If a row is completely empty except for the header (SBRD_Caption), the row is removed. The same applies to columns. Row or column removal is only performed after clearing of a cell.To display symbols or text in different colors you can use markup.

		[data]
		Description=Extra data for these cells. This data is used to sort the scoreboard using.


	[SetSeason]
	Description=Sets the season.
		[season]
		Description=Season from 0 (spring) to 100 (winter).


	[SetShape]
	Description=Changes the bounding rectangle of the object. This rectangle is used e.g. for collision or overlap detection. It does not affect object drawing.
		[x]
		Description=X offset of the new shape.

		[y]
		Description=Y offset of the new shape.

		[width]
		Description=Width of the new shape.

		[height]
		Description=Height of the new shape.


	[SetSkyAdjust]
	Description=Sets the sky color modulation. The sky colors will be mixed with the specified color as is done in ColorByOwner overlays.
		[colorMod]
		Description=Primary color modulation.

		[backgroundColor]
		Description=Background color. If the alpha byte in colorMod is not 0, this color will be used as background color behind the sky. In this way you can create lighter or more desaturated skies.


	[SetSkyParallax]
	Description=Changes parallaxity and scroll speed of the sky.
		[mode]
		Description=Scroll mode. 0 standard; 1 wind moves with the wind.

		[xpar]
		Description=Horizontal parallaxity. With a value of 10 the sky is fixed to the landscape and thus appears to be on the same level as the landscape itself. Higher values will let the sky appear further away from the viewer.

		[ypar]
		Description=Vertical parallaxity.

		[xdir]
		Description=Constant horizontal motion of the sky.

		[ydir]
		Description=Constant vertical motion of the sky.

		[x]
		Description=X scroll position of the sky.

		[y]
		Description=Y scroll position of the sky.


	[SetSolidMask]
	Description=Sets the solid area of an object. The source rectangle determines which pixels from the definition graphic should be used. All pixels within the rectangle of less than 50% transparency will be solid. Also see the SolidMask entry in.
		[x]
		Description=X position of the top left corner of the new SolidMask rectangle within the definition graphic.

		[y]
		Description=Y position of the top left corner of the new SolidMask rectangle within the definition graphic.

		[width]
		Description=Width of the new SolidMask rectangle within the definition graphic.

		[height]
		Description=Height of the new SolidMask rectangle within the definition graphic.

		[target_x]
		Description=X target position of the SolidMask relative to the top left corner of the object graphic.

		[target_y]
		Description=Y target position of the SolidMask relative to the top left corner of the object graphic.


	[SetSpeed]
	Description=Sets the speed of the object.
		[xdir]
		Description=Horizontal speed divided by precision.

		[ydir]
		Description=Vertical speed divided by precision.

		[precision]
		Description=Precision. Default 10 if not specified.


	[SetTemperature]
	Description=Sets the global temperature.
		[temperature]
		Description=Temperature from -100 to 100.


	[SetTransferZone]
	Description=Sets the transfer zone of the object. If the pathfinding trail of another object leads through this transfer zone (a transfer zone is always considered completely passable in pathfinding) ControlTransfer calls will be made to the transfer zone object for the passing clonk. In these calls, the necessary script commands should be given to the clonk so he can pass the object and reach his destination.
		[x]
		Description=X position of the top left corner of the new transfer zone, relative to the object center.

		[y]
		Description=Y position of the top left corner of the new transfer zone, relative to the object center.

		[width]
		Description=Width of the new transfer zone.

		[height]
		Description=Height of the new transfer zone.


	[SetVertex]
	Description=Sets the offset coordinates of a given object vertex (see). Coordinates are relative to the object center.
		[index]
		Description=Index of the vertex to be changed.

		[select]
		Description=Determines which vertex data is to be changed.of the vertex.
		[value]
		Description=Value to be set to.

		[set_custom_permanent]
		Description=Special vertex mode. If 1 or 2 the new value will be stored in the last 25 vertices and copied from there during the next shape update. Using this parameter, script changed vertices will be kept during stretch or rotation operations. With value 2, vertices will be updated immediately, not only with the next shape update.


	[SetVertexXY]
	Description=Sets both X and Y position of a vertex.
		[index]
		Description=Vertex number

		[xpos]
		Description=Desired X offset of the vertex.

		[ypos]
		Description=Desired Y offset of the vertex.


	[SetViewOffset]
	Description=Moves the view of a player permanently by a given offset. Calling the function again will set a new offset. Calling the function with 0,0 parameters will reset to normal, centered view.
		[player]
		Description=Player whose view offset you want to change.

		[x]
		Description=X offset value in pixels.


	[SetWealth]
	Description=Sets the wealth value of a player.
		[player]
		Description=Player number of the player whose wealth you want to change.

		[value]
		Description=New wealth value.


	[SetWind]
	Description=Temporarily sets the global wind velocity and direction.
		[strength]
		Description=Wind velocity from -100 to 100.


	[SetXDir]
	Description=Sets the horizontal speed of the object.
		[xdir]
		Description=Horizontal speed divided by precision.

		[precision]
		Description=Precision. Default 10 if not specified.


	[SetYDir]
	Description=Sets the vertical speed of the object.
		[ydir]
		Description=Vertical speed divided by precision.

		[precision]
		Description=Precision. Default 10 if not specified.


	[ShakeFree]
	Description=Loosens instable material within a circular area. Loosened material will then begin to fall if there is room underneath. This can be used to collapse earth tunnels or similar.
		[x]
		Description=X center position of the circular area to be shaken free. Always global.

		[y]
		Description=Y center position of the circular area to be shaken free. Always global.

		[radius]
		Description=Radius of the circular area to be shaken free.


	[ShakeObjects]
	Description=Shakes all living beings within a given radius. This is comparable to calls to() with low random values to all objects in the target area.
		[x]
		Description=X center position of the circular area to be shaken. Always global.

		[y]
		Description=Y center position of the circular area to be shaken. Always global.

		[radius]
		Description=Radius of the circular area to be shaken.


	[ShiftContents]
	Description=Resorts the contained objects so the next object with a differing ID will be in front. The most common application for this command is inventory selection.
		[shift_back]
		Description=If, objects will be resorted backwards.

		[target_id]
		Description=ID of the object type to be in front after the shift. If this parameter is specified, no call to ControlContents will be made. The object will be selected directly and without the selection sound. In this way you can overload the contents switching in ControlContents and add your own sounds or special events.

		[no_calls]
		Description=If, calls to ControlContents and Selection will be made.


	[ShowInfo]
	Description=Displays the description text of an object in a popup window (a menu window).

	[SimFlight]
	Description=Simulates the motion of a falling object with a given starting position and initial speed. The returned array will contain [int x_final, int y_final, int xdir_final, int ydir_final, int time_passed].If the projected trajectory encounters a material of the specified density, the simulation will stop and time_passed will be non-negative. Otherwise, time_passed will be negative.
		[x]
		Description=X offset of the starting position. (NOT optional if used inobject context)

		[y]
		Description=Y offset of the starting position. (NOT optional if used inobject context)

		[xdir]
		Description=Initial horizontal speed. If not specified this will default to the object's horizontal speed. (NOT optional if used inobject context)

		[ydir]
		Description=Initial vertical speed. If not specified this will default to the object's vertical speed. (NOT optional if used inobject context)

		[min_density]
		Description=Minimum density of the material which will stop the projected trajectory. If not specified this will default to value 50 (solid material).

		[max_density]
		Description=Maximum density of the material which will stop the projected trajectory. If not specified this will default to value 100.

		[iterations]
		Description=Number of simulated frames for which the projection runs. If not specified or nonpositive the simulation will run indefinitely until material or the limits of the landscape are encountered.

		[precision]
		Description=Precision. Default 10 if not specified.


	[Sin]
	Description=Returns sin(angle) * radius.
		[angle]
		Description=Angle in degrees

		[radius]
		Description=Radius

		[precision]
		Description=If specified, the angle will be divided by this value. An angle of 445Â° and a precision value of 10 will thus result in a more precise angle of 45,5Â° internally.


	[Smoke]
	Description=Creates smoke at the specified position.
		[x]
		Description=X position of the smoke. In a local call this is an offset.

		[y]
		Description=Y position of the smoke. In a local call this is an offset.

		[level]
		Description=Size of the smoke.


	[Sort_Distance]
	Description=Sort criterion: Sorts the found objects by their distance to the indicated point. The nearest objects first.
		[x]
		Description=Distance reference point. In local calls, relative to the calling object.

		[y]
		Description=Distance reference point. In local calls, relative to the calling object.


	[Sort_Func]
	Description=Sort criterion: Sorts the found objects by the int result of the indicated function. Objects with smaller values first.
		[function]
		Description=Function to call


	[Sort_Mass]
	Description=Sort criterion: Sorts the found objects by their mass. The lightest objects first.

	[Sort_Multiple]
	Description=Sort criterion: Makes it possible to sort with several criterions. The first criterion has the highest priority.
		[Criteria]
		Description=Sort criterion in the form of a Sort_* function


	[Sort_Random]
	Description=Sort criterion: Sorts the found objects randomly.

	[Sort_Reverse]
	Description=Sort modificator: Reverses the sorting of the given sort function.
		[iSort]
		Description=Sort Function


	[Sort_Speed]
	Description=Sort criterion: Sorts the found objects by their speed. The slowest objects first.

	[Sort_Value]
	Description=Sort criterion: Sorts the found objects by their value. The cheapest objects first.

	[SortArray]
	Description=Sorts an array by its elements. Elements should be either all strings or all integers.
		[array2sort]
		Description=Array that is to be sorted

		[descending]
		Description=If true, elements are sorted in descending (highest to lowest) order. Otherwise ascending order.


	[SortArrayByArrayElement]
	Description=Sorts an array of arrays by a subarray element. All elements must be arrays of at least element_index+1 size. Subarray elements should be either all strings or all integer.
		[array2sort]
		Description=Array that is to be sorted

		[element_index]
		Description=Index of element in sub-array by which sorting should happen

		[descending]
		Description=If true, elements are sorted in descending (highest to lowest) order. Otherwise ascending order.


	[SortArrayByProperty]
	Description=Sorts an array of proplists by a property. All elements must be proplists. Properties should be either all strings or all integer. If a property is not assigned, it is assumed to be integer zero.
		[array2sort]
		Description=Array that is to be sorted

		[property_name]
		Description=Name of property by which the array is to be sorted

		[descending]
		Description=If true, elements are sorted in descending (highest to lowest) order. Otherwise ascending order.


	[SortScoreboard]
	Description=Sorts scoreboard lines by the extra data of a column. If two entries have the same value in this column, no sorting is done. In this way you can sort these entries by additional columns in subsequent calls to this function.
		[coloumn_id]
		Description=ID of the column by which you want to sort.

		[reverse]
		Description=If, sorting will be done in descendnig order. Otherwise ascending order.


	[Sound]
	Description=Plays a sound. The specified sound file has to be available in the group Sound.ocg, in the active scenario file, or in any loaded object definition. The audibility of object local sounds will depend on the position of the object relative to the visible viewports.
		[name]
		Description=Name of the sound effect (without .wav/.ogg extension). Wildcards as used byare used.

		[global]
		Description=Specifies wether the sound is played globally, i.e. independently of the object position always with the same loudness.

		[volume]
		Description=0-100: volume for playback of the sound. A volume value ofmeans playback at 100.

		[player]
		Description=Player number of the player for which the sound is to be played. In network games, the sound will thus not be audible for the other players. If(or not specified), the sound will be played for all players.

		[loop_count]
		Description=Increases or decreases the number of sounds running in a continuous loop. Value +1 will play this sound indefinitely until it is stopped by calling this function again with value -1. Value 0 will play the sound once normally.


	[Split2Components]
	Description=Splits an object into its components. The new component objects will be created with random rotation and a low speed in random direction at the position at which the object was located. The original object is removed. If the original object was contained, the new component objects will be created in the original container.

	[SplitRGBaValue]
	Description=Returns an array with the red, green, blue, and alpha values of the specified 32 bit color value: [red, green, blue, alpha]
		[rgba]
		Description=32 bit color value


	[Sqrt]
	Description=Returns the square root of the first parameter. If the parameter is less than 0, the result is 0.
		[value]
		Description=Value of which you want to take the square root.


	[StartScriptProfiler]
	Description=Starts the script profiler.
		[definition_script]
		Description=If specified, only script functions of the given object definition are measured.


	[StopAnimation]
	Description=Stops the animation corresponding to the given number (such as returned by) and removes it from the corresponding slot in the animation stack. If there is a combination node associated to that number then both of the anmiations being combined are removed as well; if either or both of those are combination nodes again then they are also removed and so on. If the node to be removed is combined with another node then the combining node is also removed because there is not anything to combine anymore. The function returnsif the animation was removed orotherwise (for example if there is no animation for the given number or if belongs to slot 0).
		[animation_number]
		Description=Number of the animation to stop.


	[StopScriptProfiler]
	Description=Stops the script profiler and writes the result to the log.

	[Stuck]
	Description=Returns whether the object is stuck, meaning that one of its vertices is enclosed in solid matter.

	[Tan]
	Description=Returns tan(angle) * radius.
		[angle]
		Description=Angle in degrees

		[radius]
		Description=Radius

		[precision]
		Description=If specified, the angle will be divided by this value. An angle of 445Â° and a precision value of 10 will thus result in a more precise angle of 45,5Â° internally.


	[ToggleBit]
	Description=Returns the new bit masc with the bit at the indicated position flipped
		[old_value]
		Description=Old value of the bit masc

		[bit_number]
		Description=The bit to flip


	[Trans_Identity]
	Description=Returns a 3x4 identity matrix. It can be used as a transformation foror for the "PictureTransformation" or "MeshTransformation" properties (see).

	[Trans_Mul]
	Description=Multiplies two or more 3x4 transformation matrices in the given order. This way the effects of more than one transformation can be combined. The result can be used as a transformation foror for the "PictureTransformation" or "MeshTransformation" properties (see).
		[first]
		Description=First matrix as returned by,,or.

		[second]
		Description=Second matrix.


	[Trans_Rotate]
	Description=Returns a 3x4 rotation matrix around the axis given by the vector (,,) bydegrees. It can be used as a transformation foror for the "PictureTransformation" or "MeshTransformation" properties (see).
		[angle]
		Description=Rotation angle. When looking into the same direction as the rotation axis then positive angles do anti-clockwise rotation and negative angles do clockwise rotation.

		[rx]
		Description=X coordinate of the rotation axis.

		[ry]
		Description=Y coordinate of the rotation axis.

		[rz]
		Description=Z coordinate of the rotation axis.


	[Trans_Scale]
	Description=Returns a 3x4 scaling matrix. It can be used as a transformation foror for the "PictureTransformation" or "MeshTransformation" properties (see).
		[sx]
		Description=Magnification factor in X direction.

		[sy]
		Description=Magnification factor in Y direction.

		[sz]
		Description=Magnification factor in Z direction.


	[Trans_Translate]
	Description=Returns a 3x4 translation matrix. It can be used as a transformation foror for the "PictureTransformation" or "MeshTransformation" properties (see).
		[dx]
		Description=Displacement in X direction

		[dy]
		Description=Displacement in Y direction.

		[dz]
		Description=Displacement in Z direction.


	[Translate]
	Description=Looks up a text inof the calling script and returns its translation.
		[text]
		Description=String to translate


	[VerticesStuck]
	Description=Returns the number of stuck vertices of *obj
		[obj]
		Description=Target object


	[WildcardMatch]
	Description=Returns whether two strings are equal. The comparison is case sensitive and wildcards are supported.
		[text]
		Description=String to compare.

		[wildcard]
		Description=String to compare.


	[CreatePropList]
		[prototype]
		Description=


	[ResetProperty]
		[key]
		Description=

		[pObj]
		Description=


	[DebugLog]
		[Pars]
		Description=


	[AsyncRandom]
		[iRange]
		Description=


	[LocateFunc]
		[funcname]
		Description=

		[p]
		Description=


	[ModulateColor]
		[iClr1]
		Description=

		[iClr2]
		Description=


	[StartCallTrace]

	[GetConstantNameByValue]
		[value]
		Description=

		[name_prefix]
		Description=

		[idx]
		Description=


	[IncinerateLandscape]
		[iX]
		Description=

		[iY]
		Description=


	[GetPlayerColor]
		[iPlayer]
		Description=


	[GetTexture]
		[x]
		Description=

		[y]
		Description=


	[GetAverageTextureColor]
		[Texture]
		Description=


	[BlastFree]
		[iX]
		Description=

		[iY]
		Description=

		[iLevel]
		Description=

		[iCausedBy]
		Description=


	[AddMessage]
		[Pars]
		Description=


	[ResetCursorView]
		[plr]
		Description=


	[SurrenderPlayer]
		[iPlr]
		Description=


	[SetLeaguePerformance]
		[iScore]
		Description=


	[GetViewCursor]
		[iPlr]
		Description=


	[SetViewCursor]
		[iPlr]
		Description=

		[pObj]
		Description=


	[ClearFreeRect]
		[iX]
		Description=

		[iY]
		Description=

		[iWdt]
		Description=

		[iHgt]
		Description=


	[PathFree2]
		[x1]
		Description=

		[y1]
		Description=

		[x2]
		Description=

		[y2]
		Description=


	[GetLeague]
		[idx]
		Description=


	[TestMessageBoard]
		[iForPlr]
		Description=

		[fTestIfInUse]
		Description=


	[CallMessageBoard]
		[pObj]
		Description=

		[fUpperCase]
		Description=

		[szQueryString]
		Description=

		[iForPlr]
		Description=


	[AbortMessageBoard]
		[pObj]
		Description=

		[iForPlr]
		Description=


	[OnMessageBoardAnswer]
		[pObj]
		Description=

		[iForPlr]
		Description=

		[szAnswerString]
		Description=


	[GetMatAdjust]

	[DrawMatChunks]
		[tx]
		Description=

		[ty]
		Description=

		[twdt]
		Description=

		[thgt]
		Description=

		[icntx]
		Description=

		[icnty]
		Description=

		[strMaterial]
		Description=

		[strTexture]
		Description=

		[bIFT]
		Description=


	[CastAParticles]
		[szName]
		Description=

		[iAmount]
		Description=

		[iLevel]
		Description=

		[iX]
		Description=

		[iY]
		Description=

		[a0]
		Description=

		[a1]
		Description=

		[b0]
		Description=

		[b1]
		Description=

		[pObj]
		Description=

		[fBack]
		Description=


	[CastBackParticles]
		[szName]
		Description=

		[iAmount]
		Description=

		[iLevel]
		Description=

		[iX]
		Description=

		[iY]
		Description=

		[a0]
		Description=

		[a1]
		Description=

		[b0]
		Description=

		[b1]
		Description=

		[pObj]
		Description=


	[SetTextureIndex]
		[psMatTex]
		Description=

		[iNewIndex]
		Description=

		[fInsert]
		Description=


	[RemoveUnusedTexMapEntries]

	[LoadScenarioSection]
		[pstrSection]
		Description=

		[dwFlags]
		Description=


	[SetPreSend]
		[iToVal]
		Description=

		[pNewName]
		Description=


	[GetTeamConfig]
		[iConfigValue]
		Description=


	[InitScenarioPlayer]
		[iPlayer]
		Description=

		[idTeam]
		Description=


	[GetScoreboardString]
		[iRowID]
		Description=

		[iColID]
		Description=


	[GetScoreboardData]
		[iRowID]
		Description=

		[iColID]
		Description=


	[AddEvaluationData]
		[pText]
		Description=

		[idPlayer]
		Description=


	[HideSettlementScoreInEvaluation]
		[fHide]
		Description=


	[ActivateGameGoalMenu]
		[iPlayer]
		Description=


	[PauseGame]
		[fToggle]
		Description=


	[SetNextMission]
		[szNextMission]
		Description=

		[szNextMissionText]
		Description=

		[szNextMissionDesc]
		Description=


	[GetPlayerControlState]
		[iPlr]
		Description=

		[iControl]
		Description=


	[SetPlayerControlEnabled]
		[iplr]
		Description=

		[ctrl]
		Description=

		[is_enabled]
		Description=


	[GetPlayerControlEnabled]
		[iplr]
		Description=

		[ctrl]
		Description=


	[ExecuteCommand]

	[SetMenuDecoration]
		[idNewDeco]
		Description=


	[SetMenuTextProgress]
		[iNewProgress]
		Description=


	[GetObjectLayer]

	[SetObjectLayer]
		[pNewLayer]
		Description=


	[SetObjDrawTransform2]
		[iA]
		Description=

		[iB]
		Description=

		[iC]
		Description=

		[iD]
		Description=

		[iE]
		Description=

		[iF]
		Description=

		[iG]
		Description=

		[iH]
		Description=

		[iI]
		Description=

		[iOverlayID]
		Description=


	[SetObjectStatus]
		[iNewStatus]
		Description=

		[fClearPointers]
		Description=


	[GetObjectStatus]

	[AdjustWalkRotation]
		[iRangeX]
		Description=

		[iRangeY]
		Description=

		[iSpeed]
		Description=


	[DoNoCollectDelay]
		[change]
		Description=